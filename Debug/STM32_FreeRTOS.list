
STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08008d44  08008d44  00009d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  0000a174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800917c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013050  20000084  08009200  0000b084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200130d4  08009200  0000b0d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167ef  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a70  00000000  00000000  000218a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00025318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff9  00000000  00000000  000267c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8ed  00000000  00000000  000277b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bf2  00000000  00000000  000420a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd80  00000000  00000000  0005bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fba18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  000fba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001018b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d2c 	.word	0x08008d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08008d2c 	.word	0x08008d2c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <led_effect_stop>:

#include "main.h"


void led_effect_stop(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; ++i){
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e00e      	b.n	80005ca <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <led_effect_stop+0x3c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2200      	movs	r2, #0
 80005be:	2103      	movs	r1, #3
 80005c0:	f006 fb8e 	bl	8006ce0 <xTimerGenericCommand>
	for(int i = 0; i < 4; ++i){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dded      	ble.n	80005ac <led_effect_stop+0xc>
	}

}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000130 	.word	0x20000130

080005e0 <led_effect>:


void led_effect(uint32_t n)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005e8:	f7ff ffda 	bl	80005a0 <led_effect_stop>
	xTimerStart(handle_led_timer[n - 1], portMAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <led_effect+0x34>)
 80005f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005f6:	f005 fc57 	bl	8005ea8 <xTaskGetTickCount>
 80005fa:	4602      	mov	r2, r0
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2101      	movs	r1, #1
 8000606:	4620      	mov	r0, r4
 8000608:	f006 fb6a 	bl	8006ce0 <xTimerGenericCommand>

}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	20000130 	.word	0x20000130

08000618 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000622:	480b      	ldr	r0, [pc, #44]	@ (8000650 <turn_off_all_leds+0x38>)
 8000624:	f001 ff8c 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062e:	4808      	ldr	r0, [pc, #32]	@ (8000650 <turn_off_all_leds+0x38>)
 8000630:	f001 ff86 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <turn_off_all_leds+0x38>)
 800063c:	f001 ff80 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000646:	4802      	ldr	r0, [pc, #8]	@ (8000650 <turn_off_all_leds+0x38>)
 8000648:	f001 ff7a 	bl	8002540 <HAL_GPIO_WritePin>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020c00 	.word	0x40020c00

08000654 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	480b      	ldr	r0, [pc, #44]	@ (800068c <turn_on_all_leds+0x38>)
 8000660:	f001 ff6e 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <turn_on_all_leds+0x38>)
 800066c:	f001 ff68 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <turn_on_all_leds+0x38>)
 8000678:	f001 ff62 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000682:	4802      	ldr	r0, [pc, #8]	@ (800068c <turn_on_all_leds+0x38>)
 8000684:	f001 ff5c 	bl	8002540 <HAL_GPIO_WritePin>

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00

08000690 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <turn_on_even_leds+0x38>)
 800069c:	f001 ff50 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a6:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <turn_on_even_leds+0x38>)
 80006a8:	f001 ff4a 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <turn_on_even_leds+0x38>)
 80006b4:	f001 ff44 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006be:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <turn_on_even_leds+0x38>)
 80006c0:	f001 ff3e 	bl	8002540 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020c00 	.word	0x40020c00

080006cc <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d6:	480b      	ldr	r0, [pc, #44]	@ (8000704 <turn_on_odd_leds+0x38>)
 80006d8:	f001 ff32 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e2:	4808      	ldr	r0, [pc, #32]	@ (8000704 <turn_on_odd_leds+0x38>)
 80006e4:	f001 ff2c 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <turn_on_odd_leds+0x38>)
 80006f0:	f001 ff26 	bl	8002540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006fa:	4802      	ldr	r0, [pc, #8]	@ (8000704 <turn_on_odd_leds+0x38>)
 80006fc:	f001 ff20 	bl	8002540 <HAL_GPIO_WritePin>

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020c00 	.word	0x40020c00

08000708 <led_control>:

void led_control(int value, int id)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if(id == 3){
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d11a      	bne.n	800074e <led_control+0x46>
		for(int i = 0; i < 4; ++i){
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e014      	b.n	8000748 <led_control+0x40>
			HAL_GPIO_WritePin(GPIOD, (LD4_Pin << i), ((value >> i) & 0x1));
 800071e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	b299      	uxth	r1, r3
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	fa42 f303 	asr.w	r3, r2, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	4815      	ldr	r0, [pc, #84]	@ (8000794 <led_control+0x8c>)
 800073e:	f001 feff 	bl	8002540 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; ++i){
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2b03      	cmp	r3, #3
 800074c:	dde7      	ble.n	800071e <led_control+0x16>
		}
	}

	if(id == 4){
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d11a      	bne.n	800078a <led_control+0x82>
		for(int i = 3; i >= 0; --i){
 8000754:	2303      	movs	r3, #3
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	e014      	b.n	8000784 <led_control+0x7c>
			HAL_GPIO_WritePin(GPIOD, (LD4_Pin << i), ((value >> i) & 0x1));
 800075a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	b299      	uxth	r1, r3
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	fa42 f303 	asr.w	r3, r2, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <led_control+0x8c>)
 800077a:	f001 fee1 	bl	8002540 <HAL_GPIO_WritePin>
		for(int i = 3; i >= 0; --i){
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3b01      	subs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dae7      	bge.n	800075a <led_control+0x52>
		}
	}
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00

08000798 <LED_effect1>:

void LED_effect1(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <LED_effect1+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	4a06      	ldr	r2, [pc, #24]	@ (80007c0 <LED_effect1+0x28>)
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <LED_effect1+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <LED_effect1+0x1e>
 80007b0:	f7ff ff32 	bl	8000618 <turn_off_all_leds>
}
 80007b4:	e001      	b.n	80007ba <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80007b6:	f7ff ff4d 	bl	8000654 <turn_on_all_leds>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000

080007c4 <LED_effect2>:

void LED_effect2(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <LED_effect2+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f083 0301 	eor.w	r3, r3, #1
 80007d0:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <LED_effect2+0x28>)
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <LED_effect2+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <LED_effect2+0x1e>
 80007dc:	f7ff ff58 	bl	8000690 <turn_on_even_leds>
}
 80007e0:	e001      	b.n	80007e6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007e2:	f7ff ff73 	bl	80006cc <turn_on_odd_leds>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000004 	.word	0x20000004

080007f0 <LED_effect3>:

void LED_effect3(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	static int i = 0;
	led_control(0x1 << (i++ % 4), 3);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <LED_effect3+0x30>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	4909      	ldr	r1, [pc, #36]	@ (8000820 <LED_effect3+0x30>)
 80007fc:	600a      	str	r2, [r1, #0]
 80007fe:	425a      	negs	r2, r3
 8000800:	f003 0303 	and.w	r3, r3, #3
 8000804:	f002 0203 	and.w	r2, r2, #3
 8000808:	bf58      	it	pl
 800080a:	4253      	negpl	r3, r2
 800080c:	2201      	movs	r2, #1
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	2103      	movs	r1, #3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff77 	bl	8000708 <led_control>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000a0 	.word	0x200000a0

08000824 <LED_effect4>:

void LED_effect4(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	static int i = 0;
	led_control(0x8 >> (i++ % 4), 4);		//1000
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <LED_effect4+0x30>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	4909      	ldr	r1, [pc, #36]	@ (8000854 <LED_effect4+0x30>)
 8000830:	600a      	str	r2, [r1, #0]
 8000832:	425a      	negs	r2, r3
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	f002 0203 	and.w	r2, r2, #3
 800083c:	bf58      	it	pl
 800083e:	4253      	negpl	r3, r2
 8000840:	2208      	movs	r2, #8
 8000842:	fa42 f303 	asr.w	r3, r2, r3
 8000846:	2104      	movs	r1, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <led_control>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000a4 	.word	0x200000a4

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f001 fb35 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f919 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f9d3 	bl	8000c10 <MX_GPIO_Init>
  MX_RTC_Init();
 800086a:	f000 f981 	bl	8000b70 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800086e:	f000 f9a5 	bl	8000bbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000872:	4b70      	ldr	r3, [pc, #448]	@ (8000a34 <main+0x1dc>)
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	2302      	movs	r3, #2
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2300      	movs	r3, #0
 800087c:	22fa      	movs	r2, #250	@ 0xfa
 800087e:	496e      	ldr	r1, [pc, #440]	@ (8000a38 <main+0x1e0>)
 8000880:	486e      	ldr	r0, [pc, #440]	@ (8000a3c <main+0x1e4>)
 8000882:	f005 f8cd 	bl	8005a20 <xTaskCreate>
 8000886:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d00b      	beq.n	80008a6 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000892:	f383 8811 	msr	BASEPRI, r3
 8000896:	f3bf 8f6f 	isb	sy
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	e7fd      	b.n	80008a2 <main+0x4a>

  status = xTaskCreate(cmd_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 80008a6:	4b66      	ldr	r3, [pc, #408]	@ (8000a40 <main+0x1e8>)
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2302      	movs	r3, #2
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	22fa      	movs	r2, #250	@ 0xfa
 80008b2:	4964      	ldr	r1, [pc, #400]	@ (8000a44 <main+0x1ec>)
 80008b4:	4864      	ldr	r0, [pc, #400]	@ (8000a48 <main+0x1f0>)
 80008b6:	f005 f8b3 	bl	8005a20 <xTaskCreate>
 80008ba:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d00b      	beq.n	80008da <main+0x82>
        __asm volatile
 80008c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	61bb      	str	r3, [r7, #24]
    }
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <main+0x7e>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80008da:	4b5c      	ldr	r3, [pc, #368]	@ (8000a4c <main+0x1f4>)
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	2302      	movs	r3, #2
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	22fa      	movs	r2, #250	@ 0xfa
 80008e6:	495a      	ldr	r1, [pc, #360]	@ (8000a50 <main+0x1f8>)
 80008e8:	485a      	ldr	r0, [pc, #360]	@ (8000a54 <main+0x1fc>)
 80008ea:	f005 f899 	bl	8005a20 <xTaskCreate>
 80008ee:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00b      	beq.n	800090e <main+0xb6>
        __asm volatile
 80008f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fa:	f383 8811 	msr	BASEPRI, r3
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	617b      	str	r3, [r7, #20]
    }
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <main+0xb2>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800090e:	4b52      	ldr	r3, [pc, #328]	@ (8000a58 <main+0x200>)
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2302      	movs	r3, #2
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	22fa      	movs	r2, #250	@ 0xfa
 800091a:	4950      	ldr	r1, [pc, #320]	@ (8000a5c <main+0x204>)
 800091c:	4850      	ldr	r0, [pc, #320]	@ (8000a60 <main+0x208>)
 800091e:	f005 f87f 	bl	8005a20 <xTaskCreate>
 8000922:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d00b      	beq.n	8000942 <main+0xea>
        __asm volatile
 800092a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	f3bf 8f6f 	isb	sy
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	613b      	str	r3, [r7, #16]
    }
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <main+0xe6>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000942:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <main+0x20c>)
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	2302      	movs	r3, #2
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	22fa      	movs	r2, #250	@ 0xfa
 800094e:	4946      	ldr	r1, [pc, #280]	@ (8000a68 <main+0x210>)
 8000950:	4846      	ldr	r0, [pc, #280]	@ (8000a6c <main+0x214>)
 8000952:	f005 f865 	bl	8005a20 <xTaskCreate>
 8000956:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d00b      	beq.n	8000976 <main+0x11e>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	60fb      	str	r3, [r7, #12]
    }
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	e7fd      	b.n	8000972 <main+0x11a>

  q_data = xQueueCreate(10, sizeof(uint8_t));
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	200a      	movs	r0, #10
 800097c:	f004 fad0 	bl	8004f20 <xQueueGenericCreate>
 8000980:	4603      	mov	r3, r0
 8000982:	4a3b      	ldr	r2, [pc, #236]	@ (8000a70 <main+0x218>)
 8000984:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);
 8000986:	4b3a      	ldr	r3, [pc, #232]	@ (8000a70 <main+0x218>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10b      	bne.n	80009a6 <main+0x14e>
        __asm volatile
 800098e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000992:	f383 8811 	msr	BASEPRI, r3
 8000996:	f3bf 8f6f 	isb	sy
 800099a:	f3bf 8f4f 	dsb	sy
 800099e:	60bb      	str	r3, [r7, #8]
    }
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	e7fd      	b.n	80009a2 <main+0x14a>

  q_print = xQueueCreate(10, sizeof(size_t));
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	200a      	movs	r0, #10
 80009ac:	f004 fab8 	bl	8004f20 <xQueueGenericCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a30      	ldr	r2, [pc, #192]	@ (8000a74 <main+0x21c>)
 80009b4:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <main+0x21c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10b      	bne.n	80009d6 <main+0x17e>
        __asm volatile
 80009be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009c2:	f383 8811 	msr	BASEPRI, r3
 80009c6:	f3bf 8f6f 	isb	sy
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	607b      	str	r3, [r7, #4]
    }
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	e7fd      	b.n	80009d2 <main+0x17a>


  //Create software timers for LED effect
  for(int i = 0; i < 4; ++i){
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009da:	e013      	b.n	8000a04 <main+0x1ac>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i + 1), led_effect_callback);
 80009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009de:	3301      	adds	r3, #1
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <main+0x220>)
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	4613      	mov	r3, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009ee:	4823      	ldr	r0, [pc, #140]	@ (8000a7c <main+0x224>)
 80009f0:	f006 f91c 	bl	8006c2c <xTimerCreate>
 80009f4:	4602      	mov	r2, r0
 80009f6:	4922      	ldr	r1, [pc, #136]	@ (8000a80 <main+0x228>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 4; ++i){
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	3301      	adds	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	dde8      	ble.n	80009dc <main+0x184>
  }

  rtc_timer = xTimerCreate ("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, rtc_report_callback);
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <main+0x22c>)
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a16:	481c      	ldr	r0, [pc, #112]	@ (8000a88 <main+0x230>)
 8000a18:	f006 f908 	bl	8006c2c <xTimerCreate>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <main+0x234>)
 8000a20:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	491a      	ldr	r1, [pc, #104]	@ (8000a90 <main+0x238>)
 8000a26:	481b      	ldr	r0, [pc, #108]	@ (8000a94 <main+0x23c>)
 8000a28:	f003 f9b9 	bl	8003d9e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000a2c:	f005 f93e 	bl	8005cac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <main+0x1d8>
 8000a34:	20000114 	.word	0x20000114
 8000a38:	08008d44 	.word	0x08008d44
 8000a3c:	08001665 	.word	0x08001665
 8000a40:	20000110 	.word	0x20000110
 8000a44:	08008d50 	.word	0x08008d50
 8000a48:	0800174d 	.word	0x0800174d
 8000a4c:	20000118 	.word	0x20000118
 8000a50:	08008d5c 	.word	0x08008d5c
 8000a54:	080018b5 	.word	0x080018b5
 8000a58:	2000011c 	.word	0x2000011c
 8000a5c:	08008d68 	.word	0x08008d68
 8000a60:	080018f5 	.word	0x080018f5
 8000a64:	20000120 	.word	0x20000120
 8000a68:	08008d74 	.word	0x08008d74
 8000a6c:	08001a65 	.word	0x08001a65
 8000a70:	20000124 	.word	0x20000124
 8000a74:	20000128 	.word	0x20000128
 8000a78:	08000ee1 	.word	0x08000ee1
 8000a7c:	08008d80 	.word	0x08008d80
 8000a80:	20000130 	.word	0x20000130
 8000a84:	08000ecd 	.word	0x08000ecd
 8000a88:	08008d8c 	.word	0x08008d8c
 8000a8c:	20000140 	.word	0x20000140
 8000a90:	2000012c 	.word	0x2000012c
 8000a94:	200000c8 	.word	0x200000c8

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	@ 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	@ 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 f971 	bl	8007d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <SystemClock_Config+0xd0>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemClock_Config+0xd0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemClock_Config+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a22      	ldr	r2, [pc, #136]	@ (8000b6c <SystemClock_Config+0xd4>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemClock_Config+0xd4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000af4:	230a      	movs	r3, #10
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b10:	2332      	movs	r3, #50	@ 0x32
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fd27 	bl	8002574 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b2c:	f000 fa5c 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	230f      	movs	r3, #15
 8000b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff88 	bl	8002a64 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b5a:	f000 fa45 	bl	8000fe8 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <MX_RTC_Init+0x48>)
 8000b78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b7c:	2240      	movs	r2, #64	@ 0x40
 8000b7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b82:	227f      	movs	r2, #127	@ 0x7f
 8000b84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b88:	22ff      	movs	r2, #255	@ 0xff
 8000b8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_RTC_Init+0x44>)
 8000ba0:	f002 faa2 	bl	80030e8 <HAL_RTC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000baa:	f000 fa1d 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	40002800 	.word	0x40002800

08000bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <MX_USART2_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f002 fff8 	bl	8003be8 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfe:	f000 f9f3 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000c8 	.word	0x200000c8
 8000c0c:	40004400 	.word	0x40004400

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	@ 0x30
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4ba2      	ldr	r3, [pc, #648]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4aa1      	ldr	r2, [pc, #644]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b9f      	ldr	r3, [pc, #636]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b9b      	ldr	r3, [pc, #620]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a9a      	ldr	r2, [pc, #616]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b98      	ldr	r3, [pc, #608]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b94      	ldr	r3, [pc, #592]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a93      	ldr	r2, [pc, #588]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b91      	ldr	r3, [pc, #580]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a8c      	ldr	r2, [pc, #560]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b8a      	ldr	r3, [pc, #552]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b86      	ldr	r3, [pc, #536]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a85      	ldr	r2, [pc, #532]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b83      	ldr	r3, [pc, #524]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a7e      	ldr	r2, [pc, #504]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb4 <MX_GPIO_Init+0x2a4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4879      	ldr	r0, [pc, #484]	@ (8000eb8 <MX_GPIO_Init+0x2a8>)
 8000cd4:	f001 fc34 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4877      	ldr	r0, [pc, #476]	@ (8000ebc <MX_GPIO_Init+0x2ac>)
 8000cde:	f001 fc2f 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ce8:	4875      	ldr	r0, [pc, #468]	@ (8000ec0 <MX_GPIO_Init+0x2b0>)
 8000cea:	f001 fc29 	bl	8002540 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	486d      	ldr	r0, [pc, #436]	@ (8000eb8 <MX_GPIO_Init+0x2a8>)
 8000d02:	f001 fa99 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d06:	2308      	movs	r3, #8
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4866      	ldr	r0, [pc, #408]	@ (8000eb8 <MX_GPIO_Init+0x2a8>)
 8000d1e:	f001 fa8b 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000d22:	2332      	movs	r3, #50	@ 0x32
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d26:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4860      	ldr	r0, [pc, #384]	@ (8000eb8 <MX_GPIO_Init+0x2a8>)
 8000d38:	f001 fa7e 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	485a      	ldr	r0, [pc, #360]	@ (8000ebc <MX_GPIO_Init+0x2ac>)
 8000d54:	f001 fa70 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4852      	ldr	r0, [pc, #328]	@ (8000ebc <MX_GPIO_Init+0x2ac>)
 8000d74:	f001 fa60 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	484d      	ldr	r0, [pc, #308]	@ (8000ec4 <MX_GPIO_Init+0x2b4>)
 8000d8e:	f001 fa53 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d92:	2310      	movs	r3, #16
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da2:	2306      	movs	r3, #6
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4845      	ldr	r0, [pc, #276]	@ (8000ec4 <MX_GPIO_Init+0x2b4>)
 8000dae:	f001 fa43 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000db2:	23e0      	movs	r3, #224	@ 0xe0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483d      	ldr	r0, [pc, #244]	@ (8000ec4 <MX_GPIO_Init+0x2b4>)
 8000dce:	f001 fa33 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000dd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de4:	2305      	movs	r3, #5
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4836      	ldr	r0, [pc, #216]	@ (8000ec8 <MX_GPIO_Init+0x2b8>)
 8000df0:	f001 fa22 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000df4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000df8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	482c      	ldr	r0, [pc, #176]	@ (8000ec0 <MX_GPIO_Init+0x2b0>)
 8000e0e:	f001 fa13 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e12:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e24:	2306      	movs	r3, #6
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4823      	ldr	r0, [pc, #140]	@ (8000ebc <MX_GPIO_Init+0x2ac>)
 8000e30:	f001 fa02 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <MX_GPIO_Init+0x2b4>)
 8000e4a:	f001 f9f5 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e60:	230a      	movs	r3, #10
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4816      	ldr	r0, [pc, #88]	@ (8000ec4 <MX_GPIO_Init+0x2b4>)
 8000e6c:	f001 f9e4 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e70:	2320      	movs	r3, #32
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <MX_GPIO_Init+0x2b0>)
 8000e84:	f001 f9d8 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e88:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <MX_GPIO_Init+0x2b8>)
 8000ea6:	f001 f9c7 	bl	8002238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400

08000ecc <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback(TimerHandle_t xTimer)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	show_time_date_itm();
 8000ed4:	f000 f88e 	bl	8000ff4 <show_time_date_itm>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f006 f9c9 	bl	8007280 <pvTimerGetTimerID>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60fb      	str	r3, [r7, #12]

	switch (id) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d816      	bhi.n	8000f28 <led_effect_callback+0x48>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <led_effect_callback+0x20>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f17 	.word	0x08000f17
 8000f08:	08000f1d 	.word	0x08000f1d
 8000f0c:	08000f23 	.word	0x08000f23
	case 1:
		LED_effect1();
 8000f10:	f7ff fc42 	bl	8000798 <LED_effect1>
		break;
 8000f14:	e008      	b.n	8000f28 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000f16:	f7ff fc55 	bl	80007c4 <LED_effect2>
		break;
 8000f1a:	e005      	b.n	8000f28 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000f1c:	f7ff fc68 	bl	80007f0 <LED_effect3>
		break;
 8000f20:	e002      	b.n	8000f28 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000f22:	f7ff fc7f 	bl	8000824 <LED_effect4>
		break;
 8000f26:	bf00      	nop

	}
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	BaseType_t q_status;
	q_status = xQueueIsQueueFullFromISR(q_data);
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x84>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fcc4 	bl	80058ca <xQueueIsQueueFullFromISR>
 8000f42:	60f8      	str	r0, [r7, #12]

	if(q_status == pdFALSE){
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d107      	bne.n	8000f5a <HAL_UART_RxCpltCallback+0x2a>
		/*Queue is not full */

		/*Enqueue data type */
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x84>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2200      	movs	r2, #0
 8000f52:	4919      	ldr	r1, [pc, #100]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x88>)
 8000f54:	f004 f958 	bl	8005208 <xQueueGenericSendFromISR>
 8000f58:	e013      	b.n	8000f82 <HAL_UART_RxCpltCallback+0x52>

	} else{
		/*Queue is full */

		if(user_data == '\n'){
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x88>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b0a      	cmp	r3, #10
 8000f62:	d10e      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x52>
			xQueueReceiveFromISR(q_data, (void*)&temp, NULL);
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x84>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f107 010b 	add.w	r1, r7, #11
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 fae2 	bl	8005538 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x84>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	490e      	ldr	r1, [pc, #56]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x88>)
 8000f7e:	f004 f943 	bl	8005208 <xQueueGenericSendFromISR>
		}
	}


	/*send notification to command handling task if user_data = '\n' */
	if(user_data == '\n'){
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x88>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b0a      	cmp	r3, #10
 8000f8a:	d10a      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x72>
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_UART_RxCpltCallback+0x8c>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f005 fca5 	bl	80068ec <xTaskGenericNotifyFromISR>
	}

	/*enable UART data byte reception again in IT mode*/
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4904      	ldr	r1, [pc, #16]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x88>)
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x90>)
 8000fa8:	f002 fef9 	bl	8003d9e <HAL_UART_Receive_IT>


}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000124 	.word	0x20000124
 8000fb8:	2000012c 	.word	0x2000012c
 8000fbc:	20000110 	.word	0x20000110
 8000fc0:	200000c8 	.word	0x200000c8

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd6:	f000 ff9b 	bl	8001f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <Error_Handler+0x8>

08000ff4 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2204      	movs	r2, #4
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f006 fec3 	bl	8007d8e <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2214      	movs	r2, #20
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 febd 	bl	8007d8e <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4815      	ldr	r0, [pc, #84]	@ (8001070 <show_time_date_itm+0x7c>)
 800101c:	f002 f981 	bl	8003322 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4811      	ldr	r0, [pc, #68]	@ (8001070 <show_time_date_itm+0x7c>)
 800102a:	f002 fa5c 	bl	80034e6 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <show_time_date_itm+0x44>
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <show_time_date_itm+0x80>)
 8001036:	e000      	b.n	800103a <show_time_date_itm+0x46>
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <show_time_date_itm+0x84>)
 800103a:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 800103c:	793b      	ldrb	r3, [r7, #4]
 800103e:	4619      	mov	r1, r3
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	461a      	mov	r2, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <show_time_date_itm+0x88>)
 8001050:	f006 fe28 	bl	8007ca4 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001054:	7e7b      	ldrb	r3, [r7, #25]
 8001056:	4619      	mov	r1, r3
 8001058:	7ebb      	ldrb	r3, [r7, #26]
 800105a:	461a      	mov	r2, r3
 800105c:	7efb      	ldrb	r3, [r7, #27]
 800105e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <show_time_date_itm+0x8c>)
 8001064:	f006 fe1e 	bl	8007ca4 <iprintf>

 }
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200000a8 	.word	0x200000a8
 8001074:	08008da0 	.word	0x08008da0
 8001078:	08008da4 	.word	0x08008da4
 800107c:	08008da8 	.word	0x08008da8
 8001080:	08008dbc 	.word	0x08008dbc

08001084 <show_time_date>:

void show_time_date(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2204      	movs	r2, #4
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fe7b 	bl	8007d8e <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2214      	movs	r2, #20
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fe75 	bl	8007d8e <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4821      	ldr	r0, [pc, #132]	@ (8001130 <show_time_date+0xac>)
 80010ac:	f002 f939 	bl	8003322 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	481d      	ldr	r0, [pc, #116]	@ (8001130 <show_time_date+0xac>)
 80010ba:	f002 fa14 	bl	80034e6 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <show_time_date+0x44>
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <show_time_date+0xb0>)
 80010c6:	e000      	b.n	80010ca <show_time_date+0x46>
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <show_time_date+0xb4>)
 80010ca:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	461a      	mov	r2, r3
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	4619      	mov	r1, r3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	9101      	str	r1, [sp, #4]
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a16      	ldr	r2, [pc, #88]	@ (800113c <show_time_date+0xb8>)
 80010e4:	4916      	ldr	r1, [pc, #88]	@ (8001140 <show_time_date+0xbc>)
 80010e6:	4817      	ldr	r0, [pc, #92]	@ (8001144 <show_time_date+0xc0>)
 80010e8:	f006 fdee 	bl	8007cc8 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <show_time_date+0xc4>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	4915      	ldr	r1, [pc, #84]	@ (800114c <show_time_date+0xc8>)
 80010f8:	f003 ff84 	bl	8005004 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010fc:	7e7b      	ldrb	r3, [r7, #25]
 80010fe:	461a      	mov	r2, r3
 8001100:	7ebb      	ldrb	r3, [r7, #26]
 8001102:	4619      	mov	r1, r3
 8001104:	7efb      	ldrb	r3, [r7, #27]
 8001106:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	4910      	ldr	r1, [pc, #64]	@ (8001150 <show_time_date+0xcc>)
 8001110:	4810      	ldr	r0, [pc, #64]	@ (8001154 <show_time_date+0xd0>)
 8001112:	f006 fdd9 	bl	8007cc8 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <show_time_date+0xc4>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	490d      	ldr	r1, [pc, #52]	@ (8001158 <show_time_date+0xd4>)
 8001122:	f003 ff6f 	bl	8005004 <xQueueGenericSend>
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000a8 	.word	0x200000a8
 8001134:	08008da0 	.word	0x08008da0
 8001138:	08008da4 	.word	0x08008da4
 800113c:	08008dcc 	.word	0x08008dcc
 8001140:	08008de0 	.word	0x08008de0
 8001144:	20000144 	.word	0x20000144
 8001148:	20000128 	.word	0x20000128
 800114c:	20000008 	.word	0x20000008
 8001150:	08008dbc 	.word	0x08008dbc
 8001154:	2000016c 	.word	0x2000016c
 8001158:	2000000c 	.word	0x2000000c

0800115c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT_12;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2240      	movs	r2, #64	@ 0x40
 8001168:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001176:	2200      	movs	r2, #0
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4803      	ldr	r0, [pc, #12]	@ (8001188 <rtc_configure_time+0x2c>)
 800117c:	f002 f837 	bl	80031ee <HAL_RTC_SetTime>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000a8 	.word	0x200000a8

0800118c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <rtc_configure_date+0x1c>)
 800119a:	f002 f920 	bl	80033de <HAL_RTC_SetDate>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000a8 	.word	0x200000a8

080011ac <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	if(time){
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00d      	beq.n	80011d8 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	d807      	bhi.n	80011d4 <validate_rtc_information+0x28>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80011ca:	d803      	bhi.n	80011d4 <validate_rtc_information+0x28>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80011d2:	d901      	bls.n	80011d8 <validate_rtc_information+0x2c>
			return 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e011      	b.n	80011fc <validate_rtc_information+0x50>
	}

	if(date){
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00d      	beq.n	80011fa <validate_rtc_information+0x4e>
		if( (date->Date > 31) || (date->Year > 99) || (date->Month > 12) )
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	2b1f      	cmp	r3, #31
 80011e4:	d807      	bhi.n	80011f6 <validate_rtc_information+0x4a>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	78db      	ldrb	r3, [r3, #3]
 80011ea:	2b63      	cmp	r3, #99	@ 0x63
 80011ec:	d803      	bhi.n	80011f6 <validate_rtc_information+0x4a>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	d901      	bls.n	80011fa <validate_rtc_information+0x4e>
			return 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <validate_rtc_information+0x50>
	}

	return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <HAL_RTC_MspInit+0x50>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d111      	bne.n	80012a0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800127c:	2302      	movs	r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001284:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fe3c 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001296:	f7ff fea7 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <HAL_RTC_MspInit+0x54>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40002800 	.word	0x40002800
 80012ac:	42470e3c 	.word	0x42470e3c

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001344 <HAL_UART_MspInit+0x94>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d133      	bne.n	800133a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_UART_MspInit+0x98>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a1b      	ldr	r2, [pc, #108]	@ (8001348 <HAL_UART_MspInit+0x98>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_UART_MspInit+0x98>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_UART_MspInit+0x98>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <HAL_UART_MspInit+0x98>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_UART_MspInit+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <HAL_UART_MspInit+0x9c>)
 8001326:	f000 ff87 	bl	8002238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2106      	movs	r1, #6
 800132e:	2026      	movs	r0, #38	@ 0x26
 8001330:	f000 fec6 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001334:	2026      	movs	r0, #38	@ 0x26
 8001336:	f000 fedf 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004400 	.word	0x40004400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	@ 0x38
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b33      	ldr	r3, [pc, #204]	@ (8001434 <HAL_InitTick+0xe4>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a32      	ldr	r2, [pc, #200]	@ (8001434 <HAL_InitTick+0xe4>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_InitTick+0xe4>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137c:	f107 0210 	add.w	r2, r7, #16
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fd8c 	bl	8002ea4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001396:	f001 fd5d 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 800139a:	6378      	str	r0, [r7, #52]	@ 0x34
 800139c:	e004      	b.n	80013a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800139e:	f001 fd59 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 80013a2:	4603      	mov	r3, r0
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <HAL_InitTick+0xe8>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	3b01      	subs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_InitTick+0xec>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <HAL_InitTick+0xf0>)
 80013ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <HAL_InitTick+0xec>)
 80013be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013c2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80013c4:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_InitTick+0xec>)
 80013c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_InitTick+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_InitTick+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_InitTick+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <HAL_InitTick+0xec>)
 80013de:	f002 f98f 	bl	8003700 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11b      	bne.n	8001428 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <HAL_InitTick+0xec>)
 80013f2:	f002 f9df 	bl	80037b4 <HAL_TIM_Base_Start_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001404:	2032      	movs	r0, #50	@ 0x32
 8001406:	f000 fe77 	bl	80020f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d808      	bhi.n	8001422 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2032      	movs	r0, #50	@ 0x32
 8001416:	f000 fe53 	bl	80020c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_InitTick+0xf4>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e002      	b.n	8001428 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	@ 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	431bde83 	.word	0x431bde83
 800143c:	20000194 	.word	0x20000194
 8001440:	40000c00 	.word	0x40000c00
 8001444:	20000018 	.word	0x20000018

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <USART2_IRQHandler+0x10>)
 8001486:	f002 fcaf 	bl	8003de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000c8 	.word	0x200000c8

08001494 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM5_IRQHandler+0x10>)
 800149a:	f002 f9ed 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000194 	.word	0x20000194

080014a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <ITM_SendChar+0x48>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <ITM_SendChar+0x48>)
 80014b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <ITM_SendChar+0x4c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <ITM_SendChar+0x4c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014ca:	bf00      	nop
 80014cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f8      	beq.n	80014cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014da:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000edfc 	.word	0xe000edfc
 80014f4:	e0000e00 	.word	0xe0000e00

080014f8 <_read>:
	_kill(status, -1);
	while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
	}

	return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
	{
		//    __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffab 	bl	80014a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
	}
	return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001592:	605a      	str	r2, [r3, #4]
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f006 fc12 	bl	8007e2c <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20020000 	.word	0x20020000
 8001634:	00000400 	.word	0x00000400
 8001638:	200001dc 	.word	0x200001dc
 800163c:	200130d8 	.word	0x200130d8

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <menu_task>:
void process_cmd(command_t *cmd);

const char* invalid_msg = "Invalid command, please enter again.\n";

void menu_task(void *param)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
	const char* msg_menu = "\n========================\n"
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <menu_task+0xd0>)
 800166e:	60fb      	str	r3, [r7, #12]

	command_t *cmd;

	uint32_t option;
	while(1){
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <menu_task+0xd4>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	f107 010c 	add.w	r1, r7, #12
 8001678:	2300      	movs	r3, #0
 800167a:	f04f 32ff 	mov.w	r2, #4294967295
 800167e:	f003 fcc1 	bl	8005004 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	f04f 32ff 	mov.w	r2, #4294967295
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2000      	movs	r0, #0
 8001692:	f004 ffc7 	bl	8006624 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	617b      	str	r3, [r7, #20]
		if(cmd->len == 1) {
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d13e      	bne.n	8001720 <menu_task+0xbc>
			option = cmd->payload[0] - 48;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	@ 0x30
 80016a8:	613b      	str	r3, [r7, #16]

			switch(option){
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d02c      	beq.n	800170a <menu_task+0xa6>
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d820      	bhi.n	80016f8 <menu_task+0x94>
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <menu_task+0x60>
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d00d      	beq.n	80016de <menu_task+0x7a>
 80016c2:	e019      	b.n	80016f8 <menu_task+0x94>
			case 0:
				curr_state = sLedEffect;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <menu_task+0xd8>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task, 0, eNoAction);
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <menu_task+0xdc>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	f005 f824 	bl	8006724 <xTaskGenericNotify>
				break;
 80016dc:	e016      	b.n	800170c <menu_task+0xa8>

			case 1:
				curr_state = sRtcMenu;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <menu_task+0xd8>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <menu_task+0xe0>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	f005 f817 	bl	8006724 <xTaskGenericNotify>
				break;
 80016f6:	e009      	b.n	800170c <menu_task+0xa8>
			case 2:

				break;

			default:
				xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <menu_task+0xd4>)
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	2300      	movs	r3, #0
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001702:	4911      	ldr	r1, [pc, #68]	@ (8001748 <menu_task+0xe4>)
 8001704:	f003 fc7e 	bl	8005004 <xQueueGenericSend>
				continue;
 8001708:	e012      	b.n	8001730 <menu_task+0xcc>
				break;
 800170a:	bf00      	nop
			}

			//wait to run again
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2000      	movs	r0, #0
 800171a:	f004 ff83 	bl	8006624 <xTaskGenericNotifyWait>
 800171e:	e7a7      	b.n	8001670 <menu_task+0xc>

		} else{
			xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <menu_task+0xd4>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	2300      	movs	r3, #0
 8001726:	f04f 32ff 	mov.w	r2, #4294967295
 800172a:	4907      	ldr	r1, [pc, #28]	@ (8001748 <menu_task+0xe4>)
 800172c:	f003 fc6a 	bl	8005004 <xQueueGenericSend>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001730:	e79e      	b.n	8001670 <menu_task+0xc>
 8001732:	bf00      	nop
 8001734:	08008e20 	.word	0x08008e20
 8001738:	20000128 	.word	0x20000128
 800173c:	2000012d 	.word	0x2000012d
 8001740:	2000011c 	.word	0x2000011c
 8001744:	20000120 	.word	0x20000120
 8001748:	20000014 	.word	0x20000014

0800174c <cmd_task>:
		}
	}
}

void cmd_task(void *param)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1){
		/*Implement notify wait*/
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2000      	movs	r0, #0
 8001762:	f004 ff5f 	bl	8006624 <xTaskGenericNotifyWait>
 8001766:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d1f2      	bne.n	8001754 <cmd_task+0x8>
			/*process the user data(cmd) stored in input data queue*/
			process_cmd(&cmd);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f802 	bl	800177c <process_cmd>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001778:	e7ec      	b.n	8001754 <cmd_task+0x8>
	...

0800177c <process_cmd>:

	}
}

void process_cmd(command_t *cmd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af02      	add	r7, sp, #8
 8001782:	6078      	str	r0, [r7, #4]
	extract_cmd(cmd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f85b 	bl	8001840 <extract_cmd>

	switch(curr_state){
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <process_cmd+0xb4>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d84a      	bhi.n	8001828 <process_cmd+0xac>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <process_cmd+0x1c>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	080017d9 	.word	0x080017d9
 80017a4:	080017ed 	.word	0x080017ed
 80017a8:	08001801 	.word	0x08001801
 80017ac:	08001815 	.word	0x08001815
	case sMainMenu:
		xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <process_cmd+0xb8>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2303      	movs	r3, #3
 80017bc:	2100      	movs	r1, #0
 80017be:	f004 ffb1 	bl	8006724 <xTaskGenericNotify>
		break;
 80017c2:	e031      	b.n	8001828 <process_cmd+0xac>

	case sLedEffect:
		xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <process_cmd+0xbc>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2303      	movs	r3, #3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f004 ffa7 	bl	8006724 <xTaskGenericNotify>
		break;
 80017d6:	e027      	b.n	8001828 <process_cmd+0xac>

	case sRtcMenu:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <process_cmd+0xc0>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2303      	movs	r3, #3
 80017e4:	2100      	movs	r1, #0
 80017e6:	f004 ff9d 	bl	8006724 <xTaskGenericNotify>
		break;
 80017ea:	e01d      	b.n	8001828 <process_cmd+0xac>

	case sRtcTimeConfig:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <process_cmd+0xc0>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2303      	movs	r3, #3
 80017f8:	2100      	movs	r1, #0
 80017fa:	f004 ff93 	bl	8006724 <xTaskGenericNotify>
		break;
 80017fe:	e013      	b.n	8001828 <process_cmd+0xac>

	case sRtcDateConfig:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <process_cmd+0xc0>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2303      	movs	r3, #3
 800180c:	2100      	movs	r1, #0
 800180e:	f004 ff89 	bl	8006724 <xTaskGenericNotify>
		break;
 8001812:	e009      	b.n	8001828 <process_cmd+0xac>

	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <process_cmd+0xc0>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	2300      	movs	r3, #0
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2303      	movs	r3, #3
 8001820:	2100      	movs	r1, #0
 8001822:	f004 ff7f 	bl	8006724 <xTaskGenericNotify>
		break;
 8001826:	bf00      	nop

	}
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000012d 	.word	0x2000012d
 8001834:	20000114 	.word	0x20000114
 8001838:	2000011c 	.word	0x2000011c
 800183c:	20000120 	.word	0x20000120

08001840 <extract_cmd>:

int32_t extract_cmd(command_t *cmd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <extract_cmd+0x70>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 ff0d 	bl	800566c <uxQueueMessagesWaiting>
 8001852:	4603      	mov	r3, r0
 8001854:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <extract_cmd+0x22>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e022      	b.n	80018a8 <extract_cmd+0x68>
	uint8_t i = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <extract_cmd+0x70>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f107 010f 	add.w	r1, r7, #15
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fd7f 	bl	8005374 <xQueueReceive>
 8001876:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d106      	bne.n	800188c <extract_cmd+0x4c>
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	75fa      	strb	r2, [r7, #23]
 8001884:	461a      	mov	r2, r3
 8001886:	7bf9      	ldrb	r1, [r7, #15]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	5499      	strb	r1, [r3, r2]

	} while(item != '\n');
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b0a      	cmp	r3, #10
 8001890:	d1e9      	bne.n	8001866 <extract_cmd+0x26>

	cmd->payload[i - 1] = '\0';
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	3b01      	subs	r3, #1
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	2100      	movs	r1, #0
 800189a:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	3b01      	subs	r3, #1
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60da      	str	r2, [r3, #12]

	return 0;
 80018a6:	2300      	movs	r3, #0

}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000124 	.word	0x20000124

080018b4 <print_task>:

void print_task(void *param)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <print_task+0x38>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f107 010c 	add.w	r1, r7, #12
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fd53 	bl	8005374 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 80018ce:	68fc      	ldr	r4, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc8e 	bl	80001f4 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	4621      	mov	r1, r4
 80018e2:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <print_task+0x3c>)
 80018e4:	f002 f9d0 	bl	8003c88 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80018e8:	bf00      	nop
 80018ea:	e7e7      	b.n	80018bc <print_task+0x8>
 80018ec:	20000128 	.word	0x20000128
 80018f0:	200000c8 	.word	0x200000c8

080018f4 <led_task>:
	}
}

void led_task(void *param)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80018fc:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <led_task+0x104>)
 80018fe:	60fb      	str	r3, [r7, #12]
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";

	while(1){
		/* Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f004 fe89 	bl	8006624 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8001912:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <led_task+0x108>)
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	f107 010c 	add.w	r1, r7, #12
 800191a:	2300      	movs	r3, #0
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	f003 fb70 	bl	8005004 <xQueueGenericSend>

		/* wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	9200      	str	r2, [sp, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2000      	movs	r0, #0
 8001934:	f004 fe76 	bl	8006624 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d843      	bhi.n	80019cc <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	492e      	ldr	r1, [pc, #184]	@ (8001a00 <led_task+0x10c>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc49 	bl	80001e0 <strcmp>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <led_task+0x66>
				led_effect_stop();
 8001954:	f7fe fe24 	bl	80005a0 <led_effect_stop>
 8001958:	e040      	b.n	80019dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4929      	ldr	r1, [pc, #164]	@ (8001a04 <led_task+0x110>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc3e 	bl	80001e0 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <led_task+0x7e>
				led_effect(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f7fe fe38 	bl	80005e0 <led_effect>
 8001970:	e034      	b.n	80019dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4924      	ldr	r1, [pc, #144]	@ (8001a08 <led_task+0x114>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fc32 	bl	80001e0 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <led_task+0x96>
				led_effect(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe fe2c 	bl	80005e0 <led_effect>
 8001988:	e028      	b.n	80019dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	491f      	ldr	r1, [pc, #124]	@ (8001a0c <led_task+0x118>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc26 	bl	80001e0 <strcmp>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <led_task+0xae>
				led_effect(3);
 800199a:	2003      	movs	r0, #3
 800199c:	f7fe fe20 	bl	80005e0 <led_effect>
 80019a0:	e01c      	b.n	80019dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	491a      	ldr	r1, [pc, #104]	@ (8001a10 <led_task+0x11c>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc1a 	bl	80001e0 <strcmp>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <led_task+0xc6>
				led_effect(4);
 80019b2:	2004      	movs	r0, #4
 80019b4:	f7fe fe14 	bl	80005e0 <led_effect>
 80019b8:	e010      	b.n	80019dc <led_task+0xe8>
			else
				/* print invalid message */
				xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <led_task+0x108>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	2300      	movs	r3, #0
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	4913      	ldr	r1, [pc, #76]	@ (8001a14 <led_task+0x120>)
 80019c6:	f003 fb1d 	bl	8005004 <xQueueGenericSend>
 80019ca:	e007      	b.n	80019dc <led_task+0xe8>
		}else
			/* print invalid message */
			xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <led_task+0x108>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	2300      	movs	r3, #0
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	490f      	ldr	r1, [pc, #60]	@ (8001a14 <led_task+0x120>)
 80019d8:	f003 fb14 	bl	8005004 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <led_task+0x124>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

		/* Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <led_task+0x128>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	2300      	movs	r3, #0
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	f004 fe98 	bl	8006724 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80019f4:	e784      	b.n	8001900 <led_task+0xc>
 80019f6:	bf00      	nop
 80019f8:	08008ec8 	.word	0x08008ec8
 80019fc:	20000128 	.word	0x20000128
 8001a00:	08008f40 	.word	0x08008f40
 8001a04:	08008f48 	.word	0x08008f48
 8001a08:	08008f4c 	.word	0x08008f4c
 8001a0c:	08008f50 	.word	0x08008f50
 8001a10:	08008f54 	.word	0x08008f54
 8001a14:	20000014 	.word	0x20000014
 8001a18:	2000012d 	.word	0x2000012d
 8001a1c:	20000114 	.word	0x20000114

08001a20 <cmd2number>:

	}
}

uint8_t cmd2number(command_t *cmd)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint8_t number;
	if(cmd->len > 1){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d90d      	bls.n	8001a4c <cmd2number+0x2c>
		number = ((cmd->payload[0] - 48) * 10) + (cmd->payload[1] - 48);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	4413      	add	r3, r2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b10      	subs	r3, #16
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e003      	b.n	8001a54 <cmd2number+0x34>
	} else{
		number = cmd->payload[0] - 48;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b30      	subs	r3, #48	@ 0x30
 8001a52:	73fb      	strb	r3, [r7, #15]
	}
	return number;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <rtc_task>:

void rtc_task(void *param)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b09b      	sub	sp, #108	@ 0x6c
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001a6c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d64 <rtc_task+0x300>)
 8001a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
			"|         RTC          |\n"
			"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001a70:	4bbd      	ldr	r3, [pc, #756]	@ (8001d68 <rtc_task+0x304>)
 8001a72:	647b      	str	r3, [r7, #68]	@ 0x44
			"Enable reporting          ----> 2\n"
			"Exit                      ----> 3\n"
			"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001a74:	4bbd      	ldr	r3, [pc, #756]	@ (8001d6c <rtc_task+0x308>)
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001a78:	4bbd      	ldr	r3, [pc, #756]	@ (8001d70 <rtc_task+0x30c>)
 8001a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001a7c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d74 <rtc_task+0x310>)
 8001a7e:	63bb      	str	r3, [r7, #56]	@ 0x38

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001a80:	4bbd      	ldr	r3, [pc, #756]	@ (8001d78 <rtc_task+0x314>)
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001a84:	4bbd      	ldr	r3, [pc, #756]	@ (8001d7c <rtc_task+0x318>)
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001a88:	4bbd      	ldr	r3, [pc, #756]	@ (8001d80 <rtc_task+0x31c>)
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001a8c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d84 <rtc_task+0x320>)
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001a90:	4bbd      	ldr	r3, [pc, #756]	@ (8001d88 <rtc_task+0x324>)
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
	rtc_config_t rtc_state;


	while(1){
		/* Notify wait (wait till someone notifies)		 */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f004 fdbf 	bl	8006624 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */
		show_time_date();
 8001aa6:	f7ff faed 	bl	8001084 <show_time_date>

		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 8001aaa:	4bb8      	ldr	r3, [pc, #736]	@ (8001d8c <rtc_task+0x328>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	f003 faa4 	bl	8005004 <xQueueGenericSend>

		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 8001abc:	4bb3      	ldr	r3, [pc, #716]	@ (8001d8c <rtc_task+0x328>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	f003 fa9b 	bl	8005004 <xQueueGenericSend>



		while(curr_state != sMainMenu){
 8001ace:	e1ba      	b.n	8001e46 <rtc_task+0x3e2>

			/* Wait for command notification (Notify wait) */
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f004 fda0 	bl	8006624 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	65bb      	str	r3, [r7, #88]	@ 0x58

			switch(curr_state)
 8001ae8:	4ba9      	ldr	r3, [pc, #676]	@ (8001d90 <rtc_task+0x32c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	f200 81a6 	bhi.w	8001e40 <rtc_task+0x3dc>
 8001af4:	a201      	add	r2, pc, #4	@ (adr r2, 8001afc <rtc_task+0x98>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001b0d 	.word	0x08001b0d
 8001b00:	08001bab 	.word	0x08001bab
 8001b04:	08001c8d 	.word	0x08001c8d
 8001b08:	08001d99 	.word	0x08001d99
			{
			case sRtcMenu:{

				/* process RTC menu commands */
				if(cmd->len == 1){
 8001b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 8197 	bne.w	8001e44 <rtc_task+0x3e0>
					option = cmd->payload[0] - 48;
 8001b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	3b30      	subs	r3, #48	@ 0x30
 8001b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
					if(option == 0){
 8001b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <rtc_task+0xe0>
						curr_state = sRtcTimeConfig;
 8001b24:	4b9a      	ldr	r3, [pc, #616]	@ (8001d90 <rtc_task+0x32c>)
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8001b2a:	4b98      	ldr	r3, [pc, #608]	@ (8001d8c <rtc_task+0x328>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b32:	2300      	movs	r3, #0
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	f003 fa64 	bl	8005004 <xQueueGenericSend>
						rtc_state = hh_Config;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					} else if(option == 3){
						curr_state = sMainMenu;
					} else
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
				}
				break;}
 8001b42:	e17f      	b.n	8001e44 <rtc_task+0x3e0>
					} else if(option == 1){
 8001b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10f      	bne.n	8001b6a <rtc_task+0x106>
						curr_state = sRtcDateConfig;
 8001b4a:	4b91      	ldr	r3, [pc, #580]	@ (8001d90 <rtc_task+0x32c>)
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001b50:	4b8e      	ldr	r3, [pc, #568]	@ (8001d8c <rtc_task+0x328>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	f003 fa51 	bl	8005004 <xQueueGenericSend>
						rtc_state = dd_Config;
 8001b62:	2304      	movs	r3, #4
 8001b64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				break;}
 8001b68:	e16c      	b.n	8001e44 <rtc_task+0x3e0>
					} else if(option == 2){
 8001b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d10c      	bne.n	8001b8a <rtc_task+0x126>
						curr_state = sRtcReport;
 8001b70:	4b87      	ldr	r3, [pc, #540]	@ (8001d90 <rtc_task+0x32c>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8001b76:	4b85      	ldr	r3, [pc, #532]	@ (8001d8c <rtc_task+0x328>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	f003 fa3e 	bl	8005004 <xQueueGenericSend>
				break;}
 8001b88:	e15c      	b.n	8001e44 <rtc_task+0x3e0>
					} else if(option == 3){
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d103      	bne.n	8001b98 <rtc_task+0x134>
						curr_state = sMainMenu;
 8001b90:	4b7f      	ldr	r3, [pc, #508]	@ (8001d90 <rtc_task+0x32c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				break;}
 8001b96:	e155      	b.n	8001e44 <rtc_task+0x3e0>
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001b98:	4b7c      	ldr	r3, [pc, #496]	@ (8001d8c <rtc_task+0x328>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba2:	497c      	ldr	r1, [pc, #496]	@ (8001d94 <rtc_task+0x330>)
 8001ba4:	f003 fa2e 	bl	8005004 <xQueueGenericSend>
				break;}
 8001ba8:	e14c      	b.n	8001e44 <rtc_task+0x3e0>

			case sRtcTimeConfig:{
				/*TODO : get hh, mm, ss infor and configure RTC */
				switch (rtc_state)
 8001baa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d032      	beq.n	8001c18 <rtc_task+0x1b4>
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	dc68      	bgt.n	8001c88 <rtc_task+0x224>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d002      	beq.n	8001bc0 <rtc_task+0x15c>
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d016      	beq.n	8001bec <rtc_task+0x188>
						curr_state = sMainMenu;
						rtc_state = df_Config;
					}
					break;
				default:
					break;
 8001bbe:	e063      	b.n	8001c88 <rtc_task+0x224>
					uint8_t hour = cmd2number(cmd);
 8001bc0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001bc2:	f7ff ff2d 	bl	8001a20 <cmd2number>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					time_set.Hours = hour;
 8001bcc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001bd0:	733b      	strb	r3, [r7, #12]
					xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d8c <rtc_task+0x328>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	f003 fa10 	bl	8005004 <xQueueGenericSend>
					rtc_state = mm_Config;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001bea:	e04e      	b.n	8001c8a <rtc_task+0x226>
					uint8_t minute = cmd2number(cmd);
 8001bec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001bee:	f7ff ff17 	bl	8001a20 <cmd2number>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
					time_set.Minutes = minute;
 8001bf8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001bfc:	737b      	strb	r3, [r7, #13]
					xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001bfe:	4b63      	ldr	r3, [pc, #396]	@ (8001d8c <rtc_task+0x328>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001c06:	2300      	movs	r3, #0
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	f003 f9fa 	bl	8005004 <xQueueGenericSend>
					rtc_state = ss_Config;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001c16:	e038      	b.n	8001c8a <rtc_task+0x226>
					uint8_t second = cmd2number(cmd);
 8001c18:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c1a:	f7ff ff01 	bl	8001a20 <cmd2number>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
					time_set.Seconds = second;
 8001c24:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001c28:	73bb      	strb	r3, [r7, #14]
					if(!validate_rtc_information(&time_set, NULL)){
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fabb 	bl	80011ac <validate_rtc_information>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d116      	bne.n	8001c6a <rtc_task+0x206>
						rtc_configure_time(&time_set);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fa8b 	bl	800115c <rtc_configure_time>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001c46:	4b51      	ldr	r3, [pc, #324]	@ (8001d8c <rtc_task+0x328>)
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	f003 f9d6 	bl	8005004 <xQueueGenericSend>
						show_time_date();
 8001c58:	f7ff fa14 	bl	8001084 <show_time_date>
						curr_state = sMainMenu;
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <rtc_task+0x32c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
						rtc_state = df_Config;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001c68:	e00f      	b.n	8001c8a <rtc_task+0x226>
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001c6a:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <rtc_task+0x328>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	4947      	ldr	r1, [pc, #284]	@ (8001d94 <rtc_task+0x330>)
 8001c76:	f003 f9c5 	bl	8005004 <xQueueGenericSend>
						curr_state = sMainMenu;
 8001c7a:	4b45      	ldr	r3, [pc, #276]	@ (8001d90 <rtc_task+0x32c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
						rtc_state = df_Config;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001c86:	e000      	b.n	8001c8a <rtc_task+0x226>
					break;
 8001c88:	bf00      	nop
				}
				break;}
 8001c8a:	e0dc      	b.n	8001e46 <rtc_task+0x3e2>

			case sRtcDateConfig:{

				switch (rtc_state)
 8001c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d032      	beq.n	8001cfa <rtc_task+0x296>
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	dc62      	bgt.n	8001d5e <rtc_task+0x2fa>
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d002      	beq.n	8001ca2 <rtc_task+0x23e>
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d016      	beq.n	8001cce <rtc_task+0x26a>
					}
					curr_state = sMainMenu;
					rtc_state = df_Config;
					break;
				default:
					break;
 8001ca0:	e05d      	b.n	8001d5e <rtc_task+0x2fa>
					uint8_t day = cmd2number(cmd);
 8001ca2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ca4:	f7ff febc 	bl	8001a20 <cmd2number>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					date_set.Date = day;
 8001cae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cb2:	72bb      	strb	r3, [r7, #10]
					xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001cb4:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <rtc_task+0x328>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	f003 f99f 	bl	8005004 <xQueueGenericSend>
					rtc_state = mo_Config;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001ccc:	e048      	b.n	8001d60 <rtc_task+0x2fc>
					uint8_t month = cmd2number(cmd);
 8001cce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cd0:	f7ff fea6 	bl	8001a20 <cmd2number>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
					date_set.Month = month;
 8001cda:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001cde:	727b      	strb	r3, [r7, #9]
					xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <rtc_task+0x328>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f04f 32ff 	mov.w	r2, #4294967295
 8001cee:	f003 f989 	bl	8005004 <xQueueGenericSend>
					rtc_state = yr_Config;
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001cf8:	e032      	b.n	8001d60 <rtc_task+0x2fc>
					uint8_t year = cmd2number(cmd);
 8001cfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cfc:	f7ff fe90 	bl	8001a20 <cmd2number>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					date_set.Year = year;
 8001d06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001d0a:	72fb      	strb	r3, [r7, #11]
					if(!validate_rtc_information(NULL, &date_set)){
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	4619      	mov	r1, r3
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff fa4a 	bl	80011ac <validate_rtc_information>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d110      	bne.n	8001d40 <rtc_task+0x2dc>
						rtc_configure_date(&date_set);
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa32 	bl	800118c <rtc_configure_date>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <rtc_task+0x328>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001d30:	2300      	movs	r3, #0
 8001d32:	f04f 32ff 	mov.w	r2, #4294967295
 8001d36:	f003 f965 	bl	8005004 <xQueueGenericSend>
						show_time_date();
 8001d3a:	f7ff f9a3 	bl	8001084 <show_time_date>
 8001d3e:	e007      	b.n	8001d50 <rtc_task+0x2ec>
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <rtc_task+0x328>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	2300      	movs	r3, #0
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	4912      	ldr	r1, [pc, #72]	@ (8001d94 <rtc_task+0x330>)
 8001d4c:	f003 f95a 	bl	8005004 <xQueueGenericSend>
					curr_state = sMainMenu;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <rtc_task+0x32c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
					rtc_state = df_Config;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					break;
 8001d5c:	e000      	b.n	8001d60 <rtc_task+0x2fc>
					break;
 8001d5e:	bf00      	nop
				}
				break;}
 8001d60:	e071      	b.n	8001e46 <rtc_task+0x3e2>
 8001d62:	bf00      	nop
 8001d64:	08008f58 	.word	0x08008f58
 8001d68:	08008fa4 	.word	0x08008fa4
 8001d6c:	08009048 	.word	0x08009048
 8001d70:	0800905c 	.word	0x0800905c
 8001d74:	08009074 	.word	0x08009074
 8001d78:	0800908c 	.word	0x0800908c
 8001d7c:	080090a0 	.word	0x080090a0
 8001d80:	080090b4 	.word	0x080090b4
 8001d84:	080090c8 	.word	0x080090c8
 8001d88:	080090e4 	.word	0x080090e4
 8001d8c:	20000128 	.word	0x20000128
 8001d90:	2000012d 	.word	0x2000012d
 8001d94:	20000014 	.word	0x20000014

			case sRtcReport:{
				if(cmd->len == 1){
 8001d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d143      	bne.n	8001e28 <rtc_task+0x3c4>
					if(cmd->payload[0] == 'y'){
 8001da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b79      	cmp	r3, #121	@ 0x79
 8001da6:	d11e      	bne.n	8001de6 <rtc_task+0x382>
						if(xTimerIsTimerActive(rtc_timer) == pdFALSE){
 8001da8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <rtc_task+0x400>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 fa3d 	bl	800722c <xTimerIsTimerActive>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d13f      	bne.n	8001e38 <rtc_task+0x3d4>
							xTimerStart(rtc_timer, portMAX_DELAY);
 8001db8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <rtc_task+0x400>)
 8001dba:	681c      	ldr	r4, [r3, #0]
 8001dbc:	f004 f874 	bl	8005ea8 <xTaskGetTickCount>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f004 ff87 	bl	8006ce0 <xTimerGenericCommand>
							xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <rtc_task+0x404>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	f003 f910 	bl	8005004 <xQueueGenericSend>
 8001de4:	e028      	b.n	8001e38 <rtc_task+0x3d4>
						}
					} else if(cmd->payload[0] == 'n'){
 8001de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b6e      	cmp	r3, #110	@ 0x6e
 8001dec:	d113      	bne.n	8001e16 <rtc_task+0x3b2>
						xTimerStop(rtc_timer, portMAX_DELAY);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <rtc_task+0x400>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	f004 ff6f 	bl	8006ce0 <xTimerGenericCommand>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <rtc_task+0x404>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	f003 f8f8 	bl	8005004 <xQueueGenericSend>
 8001e14:	e010      	b.n	8001e38 <rtc_task+0x3d4>
					} else
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <rtc_task+0x404>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	4912      	ldr	r1, [pc, #72]	@ (8001e6c <rtc_task+0x408>)
 8001e22:	f003 f8ef 	bl	8005004 <xQueueGenericSend>
 8001e26:	e007      	b.n	8001e38 <rtc_task+0x3d4>
				} else
					xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <rtc_task+0x404>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e32:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <rtc_task+0x408>)
 8001e34:	f003 f8e6 	bl	8005004 <xQueueGenericSend>
				curr_state = sMainMenu;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <rtc_task+0x40c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]

				break;}
 8001e3e:	e002      	b.n	8001e46 <rtc_task+0x3e2>
			default:
				break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <rtc_task+0x3e2>
				break;}
 8001e44:	bf00      	nop
		while(curr_state != sMainMenu){
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <rtc_task+0x40c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f ae40 	bne.w	8001ad0 <rtc_task+0x6c>
			}// switch end

		} //while end

		/* Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <rtc_task+0x410>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	f004 fc61 	bl	8006724 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001e62:	e617      	b.n	8001a94 <rtc_task+0x30>
 8001e64:	20000140 	.word	0x20000140
 8001e68:	20000128 	.word	0x20000128
 8001e6c:	20000014 	.word	0x20000014
 8001e70:	2000012d 	.word	0x2000012d
 8001e74:	20000114 	.word	0x20000114

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e7c:	f7ff fbe0 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e82:	490d      	ldr	r1, [pc, #52]	@ (8001eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e84:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f005 ffc7 	bl	8007e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7fe fcd5 	bl	8000858 <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001ebc:	0800917c 	.word	0x0800917c
  ldr r2, =_sbss
 8001ec0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ec4:	200130d4 	.word	0x200130d4

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f8d8 	bl	80020aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f7ff fa28 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff f982 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000001c 	.word	0x2000001c
 8001f34:	200001e0 	.word	0x200001e0

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200001e0 	.word	0x200001e0

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	@ (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff4c 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d2:	f7ff ff61 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	6978      	ldr	r0, [r7, #20]
 80020de:	f7ff ffb1 	bl	8002044 <NVIC_EncodePriority>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff80 	bl	8001ff0 <__NVIC_SetPriority>
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff54 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002122:	f7ff ff09 	bl	8001f38 <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	@ 0x80
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e052      	b.n	80021ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_Abort+0x62>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002196:	e013      	b.n	80021c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002198:	f7ff fece 	bl	8001f38 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d90c      	bls.n	80021c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e015      	b.n	80021ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e4      	bne.n	8002198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	223f      	movs	r2, #63	@ 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e159      	b.n	8002508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8148 	bne.w	8002502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a2 	beq.w	8002502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b57      	ldr	r3, [pc, #348]	@ (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a56      	ldr	r2, [pc, #344]	@ (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b54      	ldr	r3, [pc, #336]	@ (8002520 <HAL_GPIO_Init+0x2e8>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a52      	ldr	r2, [pc, #328]	@ (8002524 <HAL_GPIO_Init+0x2ec>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a49      	ldr	r2, [pc, #292]	@ (8002528 <HAL_GPIO_Init+0x2f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x202>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a48      	ldr	r2, [pc, #288]	@ (800252c <HAL_GPIO_Init+0x2f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x1fe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a47      	ldr	r2, [pc, #284]	@ (8002530 <HAL_GPIO_Init+0x2f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1fa>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a46      	ldr	r2, [pc, #280]	@ (8002534 <HAL_GPIO_Init+0x2fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1f6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	@ (8002538 <HAL_GPIO_Init+0x300>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1f2>
 8002426:	2304      	movs	r3, #4
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242a:	2307      	movs	r3, #7
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x204>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	@ (8002524 <HAL_GPIO_Init+0x2ec>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b38      	ldr	r3, [pc, #224]	@ (800253c <HAL_GPIO_Init+0x304>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a2f      	ldr	r2, [pc, #188]	@ (800253c <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_GPIO_Init+0x304>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a24      	ldr	r2, [pc, #144]	@ (800253c <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b23      	ldr	r3, [pc, #140]	@ (800253c <HAL_GPIO_Init+0x304>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b18      	ldr	r3, [pc, #96]	@ (800253c <HAL_GPIO_Init+0x304>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f aea2 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	@ 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e267      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d075      	beq.n	800267e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002592:	4b88      	ldr	r3, [pc, #544]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d00c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b85      	ldr	r3, [pc, #532]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b82      	ldr	r3, [pc, #520]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	4b7e      	ldr	r3, [pc, #504]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d05b      	beq.n	800267c <HAL_RCC_OscConfig+0x108>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d157      	bne.n	800267c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e242      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d8:	d106      	bne.n	80025e8 <HAL_RCC_OscConfig+0x74>
 80025da:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01d      	b.n	8002624 <HAL_RCC_OscConfig+0xb0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x98>
 80025f2:	4b70      	ldr	r3, [pc, #448]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6f      	ldr	r2, [pc, #444]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6c      	ldr	r2, [pc, #432]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0xb0>
 800260c:	4b69      	ldr	r3, [pc, #420]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a68      	ldr	r2, [pc, #416]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b66      	ldr	r3, [pc, #408]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a65      	ldr	r2, [pc, #404]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fc84 	bl	8001f38 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff fc80 	bl	8001f38 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e207      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0xc0>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff fc70 	bl	8001f38 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff fc6c 	bl	8001f38 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1f3      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	4b51      	ldr	r3, [pc, #324]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0xe8>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d063      	beq.n	8002752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268a:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d11c      	bne.n	80026dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a2:	4b44      	ldr	r3, [pc, #272]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_RCC_OscConfig+0x152>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e1c7      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4937      	ldr	r1, [pc, #220]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	e03a      	b.n	8002752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e4:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <HAL_RCC_OscConfig+0x244>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff fc25 	bl	8001f38 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff fc21 	bl	8001f38 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1a8      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4925      	ldr	r1, [pc, #148]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
 8002724:	e015      	b.n	8002752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCC_OscConfig+0x244>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff fc04 	bl	8001f38 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002734:	f7ff fc00 	bl	8001f38 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e187      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <HAL_RCC_OscConfig+0x248>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff fbe4 	bl	8001f38 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002774:	f7ff fbe0 	bl	8001f38 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e167      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_OscConfig+0x240>)
 8002788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x200>
 8002792:	e01b      	b.n	80027cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002794:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <HAL_RCC_OscConfig+0x248>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7ff fbcd 	bl	8001f38 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	e00e      	b.n	80027c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a2:	f7ff fbc9 	bl	8001f38 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d907      	bls.n	80027c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e150      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470000 	.word	0x42470000
 80027bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ea      	bne.n	80027a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8097 	beq.w	8002908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b81      	ldr	r3, [pc, #516]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b7d      	ldr	r3, [pc, #500]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	4a7c      	ldr	r2, [pc, #496]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fa:	4b7a      	ldr	r3, [pc, #488]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b77      	ldr	r3, [pc, #476]	@ (80029e8 <HAL_RCC_OscConfig+0x474>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b74      	ldr	r3, [pc, #464]	@ (80029e8 <HAL_RCC_OscConfig+0x474>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a73      	ldr	r2, [pc, #460]	@ (80029e8 <HAL_RCC_OscConfig+0x474>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7ff fb89 	bl	8001f38 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7ff fb85 	bl	8001f38 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e10c      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b6a      	ldr	r3, [pc, #424]	@ (80029e8 <HAL_RCC_OscConfig+0x474>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x2ea>
 8002850:	4b64      	ldr	r3, [pc, #400]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	4a63      	ldr	r2, [pc, #396]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	@ 0x70
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x324>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x30c>
 8002866:	4b5f      	ldr	r3, [pc, #380]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a5e      	ldr	r2, [pc, #376]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	4b5c      	ldr	r3, [pc, #368]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	4a5b      	ldr	r2, [pc, #364]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6713      	str	r3, [r2, #112]	@ 0x70
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0x324>
 8002880:	4b58      	ldr	r3, [pc, #352]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a57      	ldr	r2, [pc, #348]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	4b55      	ldr	r3, [pc, #340]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a54      	ldr	r2, [pc, #336]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002892:	f023 0304 	bic.w	r3, r3, #4
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff fb4a 	bl	8001f38 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff fb46 	bl	8001f38 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0cb      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ee      	beq.n	80028a8 <HAL_RCC_OscConfig+0x334>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7ff fb34 	bl	8001f38 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7ff fb30 	bl	8001f38 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0b5      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	4b3e      	ldr	r3, [pc, #248]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ee      	bne.n	80028d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a1 	beq.w	8002a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002912:	4b34      	ldr	r3, [pc, #208]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d05c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d141      	bne.n	80029aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_RCC_OscConfig+0x478>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fb04 	bl	8001f38 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff fb00 	bl	8001f38 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e087      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	491b      	ldr	r1, [pc, #108]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCC_OscConfig+0x478>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fad9 	bl	8001f38 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff fad5 	bl	8001f38 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e05c      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x416>
 80029a8:	e054      	b.n	8002a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fac2 	bl	8001f38 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff fabe 	bl	8001f38 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e045      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x444>
 80029d6:	e03d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e038      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000
 80029ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x4ec>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d028      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d121      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d11a      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800

08002a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0cc      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b68      	ldr	r3, [pc, #416]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d90c      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b65      	ldr	r3, [pc, #404]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a58      	ldr	r2, [pc, #352]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d044      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d119      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	4b3f      	ldr	r3, [pc, #252]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e06f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e067      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b37      	ldr	r3, [pc, #220]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4934      	ldr	r1, [pc, #208]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b54:	f7ff f9f0 	bl	8001f38 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7ff f9ec 	bl	8001f38 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e04f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b84:	4b25      	ldr	r3, [pc, #148]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d20c      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	@ (8002c1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fba0 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08009120 	.word	0x08009120
 8002c28:	20000010 	.word	0x20000010
 8002c2c:	20000018 	.word	0x20000018

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b094      	sub	sp, #80	@ 0x50
 8002c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c48:	4b79      	ldr	r3, [pc, #484]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x40>
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f200 80e1 	bhi.w	8002e1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c62:	e0db      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c66:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c68:	e0db      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6a:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6e:	e0d8      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4621      	mov	r1, r4
 8002cbc:	1a51      	subs	r1, r2, r1
 8002cbe:	6139      	str	r1, [r7, #16]
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	018b      	lsls	r3, r1, #6
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cde:	4651      	mov	r1, sl
 8002ce0:	018a      	lsls	r2, r1, #6
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce8:	4659      	mov	r1, fp
 8002cea:	eb63 0901 	sbc.w	r9, r3, r1
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d02:	4690      	mov	r8, r2
 8002d04:	4699      	mov	r9, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	eb18 0303 	adds.w	r3, r8, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	462b      	mov	r3, r5
 8002d10:	eb49 0303 	adc.w	r3, r9, r3
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d22:	4629      	mov	r1, r5
 8002d24:	024b      	lsls	r3, r1, #9
 8002d26:	4621      	mov	r1, r4
 8002d28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	024a      	lsls	r2, r1, #9
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d36:	2200      	movs	r2, #0
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d40:	f7fd fab6 	bl	80002b0 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e058      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	4611      	mov	r1, r2
 8002d5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d68:	4642      	mov	r2, r8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	0159      	lsls	r1, r3, #5
 8002d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7a:	0150      	lsls	r0, r2, #5
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4641      	mov	r1, r8
 8002d82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d86:	4649      	mov	r1, r9
 8002d88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002da0:	ebb2 040a 	subs.w	r4, r2, sl
 8002da4:	eb63 050b 	sbc.w	r5, r3, fp
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	00eb      	lsls	r3, r5, #3
 8002db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db6:	00e2      	lsls	r2, r4, #3
 8002db8:	4614      	mov	r4, r2
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4643      	mov	r3, r8
 8002dbe:	18e3      	adds	r3, r4, r3
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	eb45 0303 	adc.w	r3, r5, r3
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	028b      	lsls	r3, r1, #10
 8002dda:	4621      	mov	r1, r4
 8002ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de0:	4621      	mov	r1, r4
 8002de2:	028a      	lsls	r2, r1, #10
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dea:	2200      	movs	r2, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	61fa      	str	r2, [r7, #28]
 8002df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df4:	f7fd fa5c 	bl	80002b0 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1a:	e002      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3750      	adds	r7, #80	@ 0x50
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200

08002e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000010 	.word	0x20000010

08002e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e58:	f7ff fff0 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0a9b      	lsrs	r3, r3, #10
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08009130 	.word	0x08009130

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e80:	f7ff ffdc 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08009130 	.word	0x08009130

08002ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb4:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0203 	and.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <HAL_RCC_GetClockConfig+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40023c00 	.word	0x40023c00

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d038      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f30:	4b68      	ldr	r3, [pc, #416]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f36:	f7fe ffff 	bl	8001f38 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f3e:	f7fe fffb 	bl	8001f38 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0bd      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f50:	4b61      	ldr	r3, [pc, #388]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	495a      	ldr	r1, [pc, #360]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f76:	4b57      	ldr	r3, [pc, #348]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe ffdc 	bl	8001f38 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f84:	f7fe ffd8 	bl	8001f38 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e09a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f96:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8083 	beq.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b48      	ldr	r3, [pc, #288]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a47      	ldr	r2, [pc, #284]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc0:	4b45      	ldr	r3, [pc, #276]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fcc:	4b43      	ldr	r3, [pc, #268]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a42      	ldr	r2, [pc, #264]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe ffae 	bl	8001f38 <HAL_GetTick>
 8002fdc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe ffaa 	bl	8001f38 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e06c      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffe:	4b36      	ldr	r3, [pc, #216]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d02f      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	429a      	cmp	r2, r3
 800301a:	d028      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301c:	4b2e      	ldr	r3, [pc, #184]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003024:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003026:	4b2e      	ldr	r3, [pc, #184]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800302c:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003032:	4a29      	ldr	r2, [pc, #164]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d114      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe ff78 	bl	8001f38 <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe ff74 	bl	8001f38 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e034      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800307a:	d10d      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800307c:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800308c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003090:	4911      	ldr	r1, [pc, #68]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
 8003096:	e005      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003098:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a0e      	ldr	r2, [pc, #56]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030a2:	6093      	str	r3, [r2, #8]
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	4909      	ldr	r1, [pc, #36]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7d1a      	ldrb	r2, [r3, #20]
 80030c6:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80030c8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	42470068 	.word	0x42470068
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42470e40 	.word	0x42470e40
 80030e4:	424711e0 	.word	0x424711e0

080030e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e073      	b.n	80031e6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7f5b      	ldrb	r3, [r3, #29]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f8a2 	bl	8001258 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d055      	beq.n	80031d4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	22ca      	movs	r2, #202	@ 0xca
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2253      	movs	r2, #83	@ 0x53
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa49 	bl	80035d0 <RTC_EnterInitMode>
 800313e:	4603      	mov	r3, r0
 8003140:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d12c      	bne.n	80031a2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800315a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	041a      	lsls	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fa50 	bl	800363e <RTC_ExitInitMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d110      	bne.n	80031ca <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	22ff      	movs	r2, #255	@ 0xff
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80031d2:	e001      	b.n	80031d8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031ee:	b590      	push	{r4, r7, lr}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	7f1b      	ldrb	r3, [r3, #28]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_RTC_SetTime+0x1c>
 8003206:	2302      	movs	r3, #2
 8003208:	e087      	b.n	800331a <HAL_RTC_SetTime+0x12c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2202      	movs	r2, #2
 8003214:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d126      	bne.n	800326a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa27 	bl	8003688 <RTC_ByteToBcd2>
 800323a:	4603      	mov	r3, r0
 800323c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa20 	bl	8003688 <RTC_ByteToBcd2>
 8003248:	4603      	mov	r3, r0
 800324a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800324c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	789b      	ldrb	r3, [r3, #2]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fa18 	bl	8003688 <RTC_ByteToBcd2>
 8003258:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800325a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e018      	b.n	800329c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800328a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003290:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	78db      	ldrb	r3, [r3, #3]
 8003296:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	22ca      	movs	r2, #202	@ 0xca
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2253      	movs	r2, #83	@ 0x53
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f98f 	bl	80035d0 <RTC_EnterInitMode>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d120      	bne.n	80032fe <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032c6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6899      	ldr	r1, [r3, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f9a2 	bl	800363e <RTC_ExitInitMode>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	22ff      	movs	r2, #255	@ 0xff
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]

  return status;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
}
 800331a:	4618      	mov	r0, r3
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}

08003322 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003354:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003358:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0d9b      	lsrs	r3, r3, #22
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11a      	bne.n	80033d4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f98e 	bl	80036c4 <RTC_Bcd2ToByte>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f985 	bl	80036c4 <RTC_Bcd2ToByte>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	789b      	ldrb	r3, [r3, #2]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f97c 	bl	80036c4 <RTC_Bcd2ToByte>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033de:	b590      	push	{r4, r7, lr}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	7f1b      	ldrb	r3, [r3, #28]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_RTC_SetDate+0x1c>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e071      	b.n	80034de <HAL_RTC_SetDate+0x100>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <HAL_RTC_SetDate+0x4c>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	f023 0310 	bic.w	r3, r3, #16
 8003420:	b2db      	uxtb	r3, r3
 8003422:	330a      	adds	r3, #10
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11c      	bne.n	800346a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	78db      	ldrb	r3, [r3, #3]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f927 	bl	8003688 <RTC_ByteToBcd2>
 800343a:	4603      	mov	r3, r0
 800343c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f920 	bl	8003688 <RTC_ByteToBcd2>
 8003448:	4603      	mov	r3, r0
 800344a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800344c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	789b      	ldrb	r3, [r3, #2]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f918 	bl	8003688 <RTC_ByteToBcd2>
 8003458:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800345a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e00e      	b.n	8003488 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	78db      	ldrb	r3, [r3, #3]
 800346e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003476:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800347c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22ca      	movs	r2, #202	@ 0xca
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2253      	movs	r2, #83	@ 0x53
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f899 	bl	80035d0 <RTC_EnterInitMode>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034b6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f8c0 	bl	800363e <RTC_ExitInitMode>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	22ff      	movs	r2, #255	@ 0xff
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]

  return status;
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}

080034e6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003500:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003504:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	0b5b      	lsrs	r3, r3, #13
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d11a      	bne.n	800357a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	78db      	ldrb	r3, [r3, #3]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f8bb 	bl	80036c4 <RTC_Bcd2ToByte>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f8b2 	bl	80036c4 <RTC_Bcd2ToByte>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f8a9 	bl	80036c4 <RTC_Bcd2ToByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0d      	ldr	r2, [pc, #52]	@ (80035cc <HAL_RTC_WaitForSynchro+0x48>)
 8003596:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7fe fcce 	bl	8001f38 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800359e:	e009      	b.n	80035b4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035a0:	f7fe fcca 	bl	8001f38 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035ae:	d901      	bls.n	80035b4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e007      	b.n	80035c4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ee      	beq.n	80035a0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	00013f5f 	.word	0x00013f5f

080035d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d122      	bne.n	8003634 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035fe:	f7fe fc9b 	bl	8001f38 <HAL_GetTick>
 8003602:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003604:	e00c      	b.n	8003620 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003606:	f7fe fc97 	bl	8001f38 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003614:	d904      	bls.n	8003620 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2204      	movs	r2, #4
 800361a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <RTC_EnterInitMode+0x64>
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d1e8      	bne.n	8003606 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003658:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff8b 	bl	8003584 <HAL_RTC_WaitForSynchro>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2204      	movs	r2, #4
 8003678:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003696:	e005      	b.n	80036a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	3b0a      	subs	r3, #10
 80036a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	d8f6      	bhi.n	8003698 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b2db      	uxtb	r3, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	b2db      	uxtb	r3, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 f9b2 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e044      	b.n	8003856 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <HAL_TIM_Base_Start_IT+0xb0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f6:	d013      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003868 <HAL_TIM_Base_Start_IT+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_TIM_Base_Start_IT+0xb8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <HAL_TIM_Base_Start_IT+0xbc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	@ (8003874 <HAL_TIM_Base_Start_IT+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d010      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	e007      	b.n	8003854 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40014000 	.word	0x40014000

08003878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8d2 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8c4 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8d5 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0204 	mvn.w	r2, #4
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8ac 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f89e 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8af 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0208 	mvn.w	r2, #8
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f886 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f878 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f889 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0210 	mvn.w	r2, #16
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2208      	movs	r2, #8
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f860 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f852 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f863 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0201 	mvn.w	r2, #1
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd faf0 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8e6 	bl	8003bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f834 	bl	8003a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0220 	mvn.w	r2, #32
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8b8 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <TIM_Base_SetConfig+0x100>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a36      	ldr	r2, [pc, #216]	@ (8003bac <TIM_Base_SetConfig+0x104>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a35      	ldr	r2, [pc, #212]	@ (8003bb0 <TIM_Base_SetConfig+0x108>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d017      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <TIM_Base_SetConfig+0x100>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <TIM_Base_SetConfig+0x104>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <TIM_Base_SetConfig+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <TIM_Base_SetConfig+0x10c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a24      	ldr	r2, [pc, #144]	@ (8003bb8 <TIM_Base_SetConfig+0x110>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	@ (8003bbc <TIM_Base_SetConfig+0x114>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]
  }
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fb4e 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	@ 0x24
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fdbd 	bl	80047ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	@ 0x28
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d175      	bne.n	8003d94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_Transmit+0x2c>
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e06e      	b.n	8003d96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	@ 0x21
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe f937 	bl	8001f38 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x6c>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cfc:	e02e      	b.n	8003d5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	2180      	movs	r1, #128	@ 0x80
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fb1f 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e03a      	b.n	8003d96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cb      	bne.n	8003cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	@ 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 faeb 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e006      	b.n	8003d96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d112      	bne.n	8003dde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_UART_Receive_IT+0x26>
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e00b      	b.n	8003de0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fb12 	bl	80043fe <UART_Start_Receive_IT>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b0ba      	sub	sp, #232	@ 0xe8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_UART_IRQHandler+0x66>
 8003e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fbf2 	bl	8004630 <UART_Receive_IT>
      return;
 8003e4c:	e25b      	b.n	8004306 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80de 	beq.w	8004014 <HAL_UART_IRQHandler+0x22c>
 8003e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80d1 	beq.w	8004014 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_UART_IRQHandler+0xae>
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_UART_IRQHandler+0xd2>
 8003ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_UART_IRQHandler+0xf6>
 8003ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f043 0204 	orr.w	r2, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d011      	beq.n	8003f0e <HAL_UART_IRQHandler+0x126>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f043 0208 	orr.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 81f2 	beq.w	80042fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_UART_IRQHandler+0x14e>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fb7d 	bl	8004630 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <HAL_UART_IRQHandler+0x17a>
 8003f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d04f      	beq.n	8004002 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa85 	bl	8004472 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d141      	bne.n	8003ffa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1d9      	bne.n	8003f76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d013      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fce:	4a7e      	ldr	r2, [pc, #504]	@ (80041c8 <HAL_UART_IRQHandler+0x3e0>)
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe f90c 	bl	80021f4 <HAL_DMA_Abort_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fec:	4610      	mov	r0, r2
 8003fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	e00e      	b.n	8004010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f994 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	e00a      	b.n	8004010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f990 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e006      	b.n	8004010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f98c 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800400e:	e175      	b.n	80042fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	bf00      	nop
    return;
 8004012:	e173      	b.n	80042fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	2b01      	cmp	r3, #1
 800401a:	f040 814f 	bne.w	80042bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8148 	beq.w	80042bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8141 	beq.w	80042bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	f040 80b6 	bne.w	80041cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800406c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8145 	beq.w	8004300 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800407a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800407e:	429a      	cmp	r2, r3
 8004080:	f080 813e 	bcs.w	8004300 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800408a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	f000 8088 	beq.w	80041aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1d9      	bne.n	800409a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800410a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800410e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800411c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e1      	bne.n	80040e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800414c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e3      	bne.n	8004122 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800418c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800418e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004192:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800419a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e3      	bne.n	8004168 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd ffb5 	bl	8002114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8b7 	bl	8004334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041c6:	e09b      	b.n	8004300 <HAL_UART_IRQHandler+0x518>
 80041c8:	08004539 	.word	0x08004539
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 808e 	beq.w	8004304 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8089 	beq.w	8004304 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004216:	647a      	str	r2, [r7, #68]	@ 0x44
 8004218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800421c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e3      	bne.n	80041f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	623b      	str	r3, [r7, #32]
   return(result);
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800424e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e3      	bne.n	800422a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004294:	61fa      	str	r2, [r7, #28]
 8004296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	617b      	str	r3, [r7, #20]
   return(result);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e3      	bne.n	8004270 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f83d 	bl	8004334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ba:	e023      	b.n	8004304 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_UART_IRQHandler+0x4f4>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f943 	bl	8004560 <UART_Transmit_IT>
    return;
 80042da:	e014      	b.n	8004306 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <HAL_UART_IRQHandler+0x51e>
 80042e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f983 	bl	8004600 <UART_EndTransmit_IT>
    return;
 80042fa:	e004      	b.n	8004306 <HAL_UART_IRQHandler+0x51e>
    return;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <HAL_UART_IRQHandler+0x51e>
      return;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_UART_IRQHandler+0x51e>
      return;
 8004304:	bf00      	nop
  }
}
 8004306:	37e8      	adds	r7, #232	@ 0xe8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	e03b      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d037      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fd fde7 	bl	8001f38 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <UART_WaitOnFlagUntilTimeout+0x30>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e03a      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d023      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b80      	cmp	r3, #128	@ 0x80
 8004392:	d020      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	d01d      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d116      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f857 	bl	8004472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2208      	movs	r2, #8
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d0b4      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2222      	movs	r2, #34	@ 0x22
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004442:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0220 	orr.w	r2, r2, #32
 8004462:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004472:	b480      	push	{r7}
 8004474:	b095      	sub	sp, #84	@ 0x54
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800449a:	643a      	str	r2, [r7, #64]	@ 0x40
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d119      	bne.n	800451e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f023 0310 	bic.w	r3, r3, #16
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450a:	61ba      	str	r2, [r7, #24]
 800450c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	613b      	str	r3, [r7, #16]
   return(result);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800452c:	bf00      	nop
 800452e:	3754      	adds	r7, #84	@ 0x54
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fee4 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b21      	cmp	r3, #33	@ 0x21
 8004572:	d13e      	bne.n	80045f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457c:	d114      	bne.n	80045a8 <UART_Transmit_IT+0x48>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d110      	bne.n	80045a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	621a      	str	r2, [r3, #32]
 80045a6:	e008      	b.n	80045ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6211      	str	r1, [r2, #32]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4619      	mov	r1, r3
 80045c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004616:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff fe73 	bl	800430c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	@ 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b22      	cmp	r3, #34	@ 0x22
 8004642:	f040 80ae 	bne.w	80047a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	d117      	bne.n	8004680 <UART_Receive_IT+0x50>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	b29a      	uxth	r2, r3
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28
 800467e:	e026      	b.n	80046ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	d007      	beq.n	80046a4 <UART_Receive_IT+0x74>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <UART_Receive_IT+0x82>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e008      	b.n	80046c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4619      	mov	r1, r3
 80046dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d15d      	bne.n	800479e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0220 	bic.w	r2, r2, #32
 80046f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	2b01      	cmp	r3, #1
 8004726:	d135      	bne.n	8004794 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	613b      	str	r3, [r7, #16]
   return(result);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 0310 	bic.w	r3, r3, #16
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	623a      	str	r2, [r7, #32]
 8004750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	69f9      	ldr	r1, [r7, #28]
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	61bb      	str	r3, [r7, #24]
   return(result);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e5      	bne.n	800472e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b10      	cmp	r3, #16
 800476e:	d10a      	bne.n	8004786 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fdd1 	bl	8004334 <HAL_UARTEx_RxEventCallback>
 8004792:	e002      	b.n	800479a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fc fbcb 	bl	8000f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e002      	b.n	80047a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3730      	adds	r7, #48	@ 0x30
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b0c0      	sub	sp, #256	@ 0x100
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	ea40 0301 	orr.w	r3, r0, r1
 80047d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004804:	f021 010c 	bic.w	r1, r1, #12
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004812:	430b      	orrs	r3, r1
 8004814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	6999      	ldr	r1, [r3, #24]
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	ea40 0301 	orr.w	r3, r0, r1
 8004832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a78 <UART_SetConfig+0x2cc>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d005      	beq.n	800484c <UART_SetConfig+0xa0>
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8d      	ldr	r3, [pc, #564]	@ (8004a7c <UART_SetConfig+0x2d0>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d104      	bne.n	8004856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fb16 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8004850:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004854:	e003      	b.n	800485e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004856:	f7fe fafd 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 800485a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004868:	f040 810c 	bne.w	8004a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800486c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004876:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800487a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	1891      	adds	r1, r2, r2
 8004884:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004886:	415b      	adcs	r3, r3
 8004888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800488a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800488e:	4621      	mov	r1, r4
 8004890:	eb12 0801 	adds.w	r8, r2, r1
 8004894:	4629      	mov	r1, r5
 8004896:	eb43 0901 	adc.w	r9, r3, r1
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	eb18 0303 	adds.w	r3, r8, r3
 80048b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048bc:	462b      	mov	r3, r5
 80048be:	eb49 0303 	adc.w	r3, r9, r3
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048da:	460b      	mov	r3, r1
 80048dc:	18db      	adds	r3, r3, r3
 80048de:	653b      	str	r3, [r7, #80]	@ 0x50
 80048e0:	4613      	mov	r3, r2
 80048e2:	eb42 0303 	adc.w	r3, r2, r3
 80048e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048f0:	f7fb fcde 	bl	80002b0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <UART_SetConfig+0x2d4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800490c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800491c:	415b      	adcs	r3, r3
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004924:	4641      	mov	r1, r8
 8004926:	eb12 0a01 	adds.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb43 0b01 	adc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800493c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004944:	4692      	mov	sl, r2
 8004946:	469b      	mov	fp, r3
 8004948:	4643      	mov	r3, r8
 800494a:	eb1a 0303 	adds.w	r3, sl, r3
 800494e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004952:	464b      	mov	r3, r9
 8004954:	eb4b 0303 	adc.w	r3, fp, r3
 8004958:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004968:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800496c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004970:	460b      	mov	r3, r1
 8004972:	18db      	adds	r3, r3, r3
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
 8004976:	4613      	mov	r3, r2
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	647b      	str	r3, [r7, #68]	@ 0x44
 800497e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004986:	f7fb fc93 	bl	80002b0 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4611      	mov	r1, r2
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <UART_SetConfig+0x2d4>)
 8004992:	fba3 2301 	umull	r2, r3, r3, r1
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2264      	movs	r2, #100	@ 0x64
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	1acb      	subs	r3, r1, r3
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049a6:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <UART_SetConfig+0x2d4>)
 80049a8:	fba3 2302 	umull	r2, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049b4:	441c      	add	r4, r3
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049d0:	415b      	adcs	r3, r3
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	460a      	mov	r2, r1
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	18db      	adds	r3, r3, r3
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a32:	4613      	mov	r3, r2
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a42:	f7fb fc35 	bl	80002b0 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <UART_SetConfig+0x2d4>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	@ 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	@ 0x32
 8004a5e:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <UART_SetConfig+0x2d4>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4422      	add	r2, r4
 8004a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a74:	e106      	b.n	8004c84 <UART_SetConfig+0x4d8>
 8004a76:	bf00      	nop
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a96:	4642      	mov	r2, r8
 8004a98:	464b      	mov	r3, r9
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	6239      	str	r1, [r7, #32]
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	1854      	adds	r4, r2, r1
 8004aaa:	4649      	mov	r1, r9
 8004aac:	eb43 0501 	adc.w	r5, r3, r1
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004acc:	464b      	mov	r3, r9
 8004ace:	eb45 0303 	adc.w	r3, r5, r3
 8004ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004af2:	4629      	mov	r1, r5
 8004af4:	008b      	lsls	r3, r1, #2
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afc:	4621      	mov	r1, r4
 8004afe:	008a      	lsls	r2, r1, #2
 8004b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b04:	f7fb fbd4 	bl	80002b0 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b60      	ldr	r3, [pc, #384]	@ (8004c90 <UART_SetConfig+0x4e4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011c      	lsls	r4, r3, #4
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	61b9      	str	r1, [r7, #24]
 8004b30:	415b      	adcs	r3, r3
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6139      	str	r1, [r7, #16]
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b90:	4649      	mov	r1, r9
 8004b92:	008b      	lsls	r3, r1, #2
 8004b94:	4641      	mov	r1, r8
 8004b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	008a      	lsls	r2, r1, #2
 8004b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ba2:	f7fb fb85 	bl	80002b0 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	4b38      	ldr	r3, [pc, #224]	@ (8004c90 <UART_SetConfig+0x4e4>)
 8004bae:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2264      	movs	r2, #100	@ 0x64
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	1acb      	subs	r3, r1, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	3332      	adds	r3, #50	@ 0x32
 8004bc0:	4a33      	ldr	r2, [pc, #204]	@ (8004c90 <UART_SetConfig+0x4e4>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	415b      	adcs	r3, r3
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bec:	4641      	mov	r1, r8
 8004bee:	1851      	adds	r1, r2, r1
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c04:	4659      	mov	r1, fp
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4651      	mov	r1, sl
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c1e:	464b      	mov	r3, r9
 8004c20:	460a      	mov	r2, r1
 8004c22:	eb42 0303 	adc.w	r3, r2, r3
 8004c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c40:	4649      	mov	r1, r9
 8004c42:	008b      	lsls	r3, r1, #2
 8004c44:	4641      	mov	r1, r8
 8004c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	008a      	lsls	r2, r1, #2
 8004c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c52:	f7fb fb2d 	bl	80002b0 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <UART_SetConfig+0x4e4>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	@ 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	3332      	adds	r3, #50	@ 0x32
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <UART_SetConfig+0x4e4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4422      	add	r2, r4
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c90:	51eb851f 	.word	0x51eb851f

08004c94 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f103 0208 	add.w	r2, r3, #8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0208 	add.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d103      	bne.n	8004d56 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e00c      	b.n	8004d70 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <vListInsert+0x2e>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d2f6      	bcs.n	8004d5e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6892      	ldr	r2, [r2, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6852      	ldr	r2, [r2, #4]
 8004dc8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d103      	bne.n	8004ddc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1e5a      	subs	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <xQueueGenericReset+0x30>
        __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
    }
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d05d      	beq.n	8004eee <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d059      	beq.n	8004eee <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	2100      	movs	r1, #0
 8004e44:	fba3 2302 	umull	r2, r3, r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d000      	beq.n	8004e4e <xQueueGenericReset+0x52>
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d14c      	bne.n	8004eee <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004e54:	f002 fb6a 	bl	800752c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	441a      	add	r2, r3
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2200      	movs	r2, #0
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	3b01      	subs	r3, #1
 8004e86:	6939      	ldr	r1, [r7, #16]
 8004e88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	441a      	add	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	22ff      	movs	r2, #255	@ 0xff
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	22ff      	movs	r2, #255	@ 0xff
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d114      	bne.n	8004ed4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01a      	beq.n	8004ee8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 f97a 	bl	80061b0 <xTaskRemoveFromEventList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004ec2:	4b16      	ldr	r3, [pc, #88]	@ (8004f1c <xQueueGenericReset+0x120>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	e009      	b.n	8004ee8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fedb 	bl	8004c94 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3324      	adds	r3, #36	@ 0x24
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fed6 	bl	8004c94 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004ee8:	f002 fb52 	bl	8007590 <vPortExitCritical>
 8004eec:	e001      	b.n	8004ef2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <xQueueGenericReset+0x114>
        __asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60bb      	str	r3, [r7, #8]
    }
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	@ 0x28
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02e      	beq.n	8004f96 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f38:	2100      	movs	r1, #0
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d000      	beq.n	8004f48 <xQueueGenericCreate+0x28>
 8004f46:	2101      	movs	r1, #1
 8004f48:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d123      	bne.n	8004f96 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f56:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004f5a:	d81c      	bhi.n	8004f96 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3350      	adds	r3, #80	@ 0x50
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fc08 	bl	8007780 <pvPortMalloc>
 8004f70:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01d      	beq.n	8004fb4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3350      	adds	r3, #80	@ 0x50
 8004f80:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f82:	79fa      	ldrb	r2, [r7, #7]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f815 	bl	8004fbe <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004f94:	e00e      	b.n	8004fb4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <xQueueGenericCreate+0x94>
        __asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	613b      	str	r3, [r7, #16]
    }
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
    }
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fec:	2101      	movs	r1, #1
 8004fee:	69b8      	ldr	r0, [r7, #24]
 8004ff0:	f7ff ff04 	bl	8004dfc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueGenericSend+0x34>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x42>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueGenericSend+0x46>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericSend+0x48>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericSend+0x64>
        __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x72>
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <xQueueGenericSend+0x76>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueGenericSend+0x78>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericSend+0x94>
        __asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
    }
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005098:	f001 fa2a 	bl	80064f0 <xTaskGetSchedulerState>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <xQueueGenericSend+0xa4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <xQueueGenericSend+0xa8>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <xQueueGenericSend+0xaa>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <xQueueGenericSend+0xc6>
        __asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	61fb      	str	r3, [r7, #28]
    }
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80050ca:	f002 fa2f 	bl	800752c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <xQueueGenericSend+0xdc>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d129      	bne.n	8005134 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e6:	f000 fae0 	bl	80056aa <prvCopyDataToQueue>
 80050ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	3324      	adds	r3, #36	@ 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f859 	bl	80061b0 <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b3f      	ldr	r3, [pc, #252]	@ (8005204 <xQueueGenericSend+0x200>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e00a      	b.n	800512c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800511c:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <xQueueGenericSend+0x200>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800512c:	f002 fa30 	bl	8007590 <vPortExitCritical>
                return pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	e063      	b.n	80051fc <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800513a:	f002 fa29 	bl	8007590 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800513e:	2300      	movs	r3, #0
 8005140:	e05c      	b.n	80051fc <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4618      	mov	r0, r3
 800514e:	f001 f893 	bl	8006278 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005156:	f002 fa1b 	bl	8007590 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800515a:	f000 fdf9 	bl	8005d50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800515e:	f002 f9e5 	bl	800752c <vPortEnterCritical>
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005168:	b25b      	sxtb	r3, r3
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d103      	bne.n	8005178 <xQueueGenericSend+0x174>
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d103      	bne.n	800518e <xQueueGenericSend+0x18a>
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800518e:	f002 f9ff 	bl	8007590 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005192:	1d3a      	adds	r2, r7, #4
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f882 	bl	80062a4 <xTaskCheckForTimeOut>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d124      	bne.n	80051f0 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a8:	f000 fb77 	bl	800589a <prvIsQueueFull>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	3310      	adds	r3, #16
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ffa6 	bl	800610c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c2:	f000 fb02 	bl	80057ca <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80051c6:	f000 fdd1 	bl	8005d6c <xTaskResumeAll>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f af7c 	bne.w	80050ca <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80051d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <xQueueGenericSend+0x200>)
 80051d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	e772      	b.n	80050ca <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80051e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051e6:	f000 faf0 	bl	80057ca <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051ea:	f000 fdbf 	bl	8005d6c <xTaskResumeAll>
 80051ee:	e76c      	b.n	80050ca <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80051f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f2:	f000 faea 	bl	80057ca <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051f6:	f000 fdb9 	bl	8005d6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80051fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3738      	adds	r7, #56	@ 0x38
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b092      	sub	sp, #72	@ 0x48
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800521a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <xQueueGenericSendFromISR+0x3e>
 800523e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x42>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericSendFromISR+0x44>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <xQueueGenericSendFromISR+0x6e>
 800526e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <xQueueGenericSendFromISR+0x72>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericSendFromISR+0x74>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005298:	f002 fa30 	bl	80076fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800529c:	f3ef 8211 	mrs	r2, BASEPRI
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	623a      	str	r2, [r7, #32]
 80052b2:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <xQueueGenericSendFromISR+0xc2>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d147      	bne.n	800535a <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80052ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80052e0:	f000 f9e3 	bl	80056aa <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80052e4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d112      	bne.n	8005314 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02e      	beq.n	8005354 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f8:	3324      	adds	r3, #36	@ 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ff58 	bl	80061b0 <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d026      	beq.n	8005354 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e01f      	b.n	8005354 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005314:	f000 fdd8 	bl	8005ec8 <uxTaskGetNumberOfTasks>
 8005318:	6338      	str	r0, [r7, #48]	@ 0x30
 800531a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800531e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005320:	429a      	cmp	r2, r3
 8005322:	d917      	bls.n	8005354 <xQueueGenericSendFromISR+0x14c>
 8005324:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005328:	2b7f      	cmp	r3, #127	@ 0x7f
 800532a:	d10b      	bne.n	8005344 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61bb      	str	r3, [r7, #24]
    }
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xQueueGenericSendFromISR+0x138>
 8005344:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005348:	3301      	adds	r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	b25a      	sxtb	r2, r3
 800534e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005358:	e001      	b.n	800535e <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800535a:	2300      	movs	r3, #0
 800535c:	647b      	str	r3, [r7, #68]	@ 0x44
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005368:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800536c:	4618      	mov	r0, r3
 800536e:	3748      	adds	r7, #72	@ 0x48
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	@ 0x30
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xQueueReceive+0x32>
        __asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	623b      	str	r3, [r7, #32]
    }
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <xQueueReceive+0x40>
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <xQueueReceive+0x44>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <xQueueReceive+0x46>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <xQueueReceive+0x62>
        __asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fb      	str	r3, [r7, #28]
    }
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d6:	f001 f88b 	bl	80064f0 <xTaskGetSchedulerState>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <xQueueReceive+0x72>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <xQueueReceive+0x76>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <xQueueReceive+0x78>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <xQueueReceive+0x94>
        __asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	61bb      	str	r3, [r7, #24]
    }
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005408:	f002 f890 	bl	800752c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01f      	beq.n	8005458 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800541c:	f000 f9af 	bl	800577e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	1e5a      	subs	r2, r3, #1
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00f      	beq.n	8005450 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	3310      	adds	r3, #16
 8005434:	4618      	mov	r0, r3
 8005436:	f000 febb 	bl	80061b0 <xTaskRemoveFromEventList>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005440:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <xQueueReceive+0x1c0>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005450:	f002 f89e 	bl	8007590 <vPortExitCritical>
                return pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	e069      	b.n	800552c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800545e:	f002 f897 	bl	8007590 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005462:	2300      	movs	r3, #0
 8005464:	e062      	b.n	800552c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800546c:	f107 0310 	add.w	r3, r7, #16
 8005470:	4618      	mov	r0, r3
 8005472:	f000 ff01 	bl	8006278 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800547a:	f002 f889 	bl	8007590 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800547e:	f000 fc67 	bl	8005d50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005482:	f002 f853 	bl	800752c <vPortEnterCritical>
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800548c:	b25b      	sxtb	r3, r3
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d103      	bne.n	800549c <xQueueReceive+0x128>
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d103      	bne.n	80054b2 <xQueueReceive+0x13e>
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054b2:	f002 f86d 	bl	8007590 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fef0 	bl	80062a4 <xTaskCheckForTimeOut>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d123      	bne.n	8005512 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054cc:	f000 f9cf 	bl	800586e <prvIsQueueEmpty>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d017      	beq.n	8005506 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	3324      	adds	r3, #36	@ 0x24
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fe14 	bl	800610c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80054e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e6:	f000 f970 	bl	80057ca <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80054ea:	f000 fc3f 	bl	8005d6c <xTaskResumeAll>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d189      	bne.n	8005408 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80054f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <xQueueReceive+0x1c0>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	e780      	b.n	8005408 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005508:	f000 f95f 	bl	80057ca <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800550c:	f000 fc2e 	bl	8005d6c <xTaskResumeAll>
 8005510:	e77a      	b.n	8005408 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005514:	f000 f959 	bl	80057ca <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005518:	f000 fc28 	bl	8005d6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800551c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800551e:	f000 f9a6 	bl	800586e <prvIsQueueEmpty>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f43f af6f 	beq.w	8005408 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800552a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800552c:	4618      	mov	r0, r3
 800552e:	3730      	adds	r7, #48	@ 0x30
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b090      	sub	sp, #64	@ 0x40
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <xQueueReceiveFromISR+0x3c>
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <xQueueReceiveFromISR+0x40>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <xQueueReceiveFromISR+0x42>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	623b      	str	r3, [r7, #32]
    }
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005596:	f002 f8b1 	bl	80076fc <vPortValidateInterruptPriority>
        __asm volatile
 800559a:	f3ef 8211 	mrs	r2, BASEPRI
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80055b2:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d047      	beq.n	8005652 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055d0:	f000 f8d5 	bl	800577e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	1e5a      	subs	r2, r3, #1
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80055dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d112      	bne.n	800560c <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02e      	beq.n	800564c <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	3310      	adds	r3, #16
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fddc 	bl	80061b0 <xTaskRemoveFromEventList>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d026      	beq.n	800564c <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d023      	beq.n	800564c <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e01f      	b.n	800564c <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800560c:	f000 fc5c 	bl	8005ec8 <uxTaskGetNumberOfTasks>
 8005610:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005612:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005618:	429a      	cmp	r2, r3
 800561a:	d917      	bls.n	800564c <xQueueReceiveFromISR+0x114>
 800561c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005620:	2b7f      	cmp	r3, #127	@ 0x7f
 8005622:	d10b      	bne.n	800563c <xQueueReceiveFromISR+0x104>
        __asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	617b      	str	r3, [r7, #20]
    }
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xQueueReceiveFromISR+0x100>
 800563c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005640:	3301      	adds	r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	b25a      	sxtb	r2, r3
 8005646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005650:	e001      	b.n	8005656 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8005652:	2300      	movs	r3, #0
 8005654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	613b      	str	r3, [r7, #16]
        __asm volatile
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f383 8811 	msr	BASEPRI, r3
    }
 8005660:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005664:	4618      	mov	r0, r3
 8005666:	3740      	adds	r7, #64	@ 0x40
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	60bb      	str	r3, [r7, #8]
    }
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005692:	f001 ff4b 	bl	800752c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800569c:	f001 ff78 	bl	8007590 <vPortExitCritical>

    return uxReturn;
 80056a0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10d      	bne.n	80056e4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d14d      	bne.n	800576c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 ff29 	bl	800652c <xTaskPriorityDisinherit>
 80056da:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	e043      	b.n	800576c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d119      	bne.n	800571e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6858      	ldr	r0, [r3, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	461a      	mov	r2, r3
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	f002 fbc6 	bl	8007e86 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	d32b      	bcc.n	800576c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	e026      	b.n	800576c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68d8      	ldr	r0, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	461a      	mov	r2, r3
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	f002 fbac 	bl	8007e86 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	425b      	negs	r3, r3
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d207      	bcs.n	800575a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	425b      	negs	r3, r3
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d105      	bne.n	800576c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3b01      	subs	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005774:	697b      	ldr	r3, [r7, #20]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d018      	beq.n	80057c2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d303      	bcc.n	80057b2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	461a      	mov	r2, r3
 80057bc:	6838      	ldr	r0, [r7, #0]
 80057be:	f002 fb62 	bl	8007e86 <memcpy>
    }
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80057d2:	f001 feab 	bl	800752c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057dc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057de:	e011      	b.n	8005804 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d012      	beq.n	800580e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3324      	adds	r3, #36	@ 0x24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fcdf 	bl	80061b0 <xTaskRemoveFromEventList>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80057f8:	f000 fdbc 	bl	8006374 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3b01      	subs	r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dce9      	bgt.n	80057e0 <prvUnlockQueue+0x16>
 800580c:	e000      	b.n	8005810 <prvUnlockQueue+0x46>
                    break;
 800580e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	22ff      	movs	r2, #255	@ 0xff
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005818:	f001 feba 	bl	8007590 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800581c:	f001 fe86 	bl	800752c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005826:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005828:	e011      	b.n	800584e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d012      	beq.n	8005858 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3310      	adds	r3, #16
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fcba 	bl	80061b0 <xTaskRemoveFromEventList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005842:	f000 fd97 	bl	8006374 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	3b01      	subs	r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800584e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005852:	2b00      	cmp	r3, #0
 8005854:	dce9      	bgt.n	800582a <prvUnlockQueue+0x60>
 8005856:	e000      	b.n	800585a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005858:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	22ff      	movs	r2, #255	@ 0xff
 800585e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005862:	f001 fe95 	bl	8007590 <vPortExitCritical>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005876:	f001 fe59 	bl	800752c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e001      	b.n	800588c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800588c:	f001 fe80 	bl	8007590 <vPortExitCritical>

    return xReturn;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80058a2:	f001 fe43 	bl	800752c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d102      	bne.n	80058b8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e001      	b.n	80058bc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80058bc:	f001 fe68 	bl	8007590 <vPortExitCritical>

    return xReturn;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
    }
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d102      	bne.n	8005906 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e001      	b.n	800590a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800590a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800590c:	4618      	mov	r0, r3
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
    }
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d024      	beq.n	8005994 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e01e      	b.n	800598e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005950:	4a18      	ldr	r2, [pc, #96]	@ (80059b4 <vQueueAddToRegistry+0x9c>)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d105      	bne.n	800596c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <vQueueAddToRegistry+0x9c>)
 8005966:	4413      	add	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
                    break;
 800596a:	e013      	b.n	8005994 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <vQueueAddToRegistry+0x70>
 8005972:	4a10      	ldr	r2, [pc, #64]	@ (80059b4 <vQueueAddToRegistry+0x9c>)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4a0c      	ldr	r2, [pc, #48]	@ (80059b4 <vQueueAddToRegistry+0x9c>)
 8005984:	4413      	add	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3301      	adds	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b07      	cmp	r3, #7
 8005992:	d9dd      	bls.n	8005950 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	200001e4 	.word	0x200001e4

080059b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80059c8:	f001 fdb0 	bl	800752c <vPortEnterCritical>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059d2:	b25b      	sxtb	r3, r3
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d103      	bne.n	80059e2 <vQueueWaitForMessageRestricted+0x2a>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d103      	bne.n	80059f8 <vQueueWaitForMessageRestricted+0x40>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059f8:	f001 fdca 	bl	8007590 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3324      	adds	r3, #36	@ 0x24
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fba3 	bl	8006158 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff fed9 	bl	80057ca <prvUnlockQueue>
    }
 8005a18:	bf00      	nop
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08c      	sub	sp, #48	@ 0x30
 8005a24:	af04      	add	r7, sp, #16
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 fea3 	bl	8007780 <pvPortMalloc>
 8005a3a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a42:	2058      	movs	r0, #88	@ 0x58
 8005a44:	f001 fe9c 	bl	8007780 <pvPortMalloc>
 8005a48:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a56:	e005      	b.n	8005a64 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005a58:	6978      	ldr	r0, [r7, #20]
 8005a5a:	f001 ff4d 	bl	80078f8 <vPortFree>
 8005a5e:	e001      	b.n	8005a64 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d013      	beq.n	8005a92 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f80e 	bl	8005aa2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005a86:	69f8      	ldr	r0, [r7, #28]
 8005a88:	f000 f8a2 	bl	8005bd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e002      	b.n	8005a98 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005a98:	69bb      	ldr	r3, [r7, #24]
    }
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b088      	sub	sp, #32
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	21a5      	movs	r1, #165	@ 0xa5
 8005abc:	f002 f967 	bl	8007d8e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aca:	3b01      	subs	r3, #1
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	f023 0307 	bic.w	r3, r3, #7
 8005ad8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	617b      	str	r3, [r7, #20]
    }
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01f      	beq.n	8005b42 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e012      	b.n	8005b2e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	3334      	adds	r3, #52	@ 0x34
 8005b18:	460a      	mov	r2, r1
 8005b1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d9e9      	bls.n	8005b08 <prvInitialiseNewTask+0x66>
 8005b34:	e000      	b.n	8005b38 <prvInitialiseNewTask+0x96>
            {
                break;
 8005b36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b40:	e003      	b.n	8005b4a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d901      	bls.n	8005b54 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b50:	2304      	movs	r3, #4
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b5e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	2200      	movs	r2, #0
 8005b64:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f8b2 	bl	8004cd4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	3318      	adds	r3, #24
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff f8ad 	bl	8004cd4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	f1c3 0205 	rsb	r2, r3, #5
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	3350      	adds	r3, #80	@ 0x50
 8005b94:	2204      	movs	r2, #4
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f002 f8f8 	bl	8007d8e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	3354      	adds	r3, #84	@ 0x54
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 f8f1 	bl	8007d8e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	69b8      	ldr	r0, [r7, #24]
 8005bb2:	f001 fb87 	bl	80072c4 <pxPortInitialiseStack>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bc8:	bf00      	nop
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005bd8:	f001 fca8 	bl	800752c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005c90 <prvAddNewTaskToReadyList+0xc0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c90 <prvAddNewTaskToReadyList+0xc0>)
 8005be4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005be6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005bee:	4a29      	ldr	r2, [pc, #164]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bf4:	4b26      	ldr	r3, [pc, #152]	@ (8005c90 <prvAddNewTaskToReadyList+0xc0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d110      	bne.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005bfc:	f000 fbde 	bl	80063bc <prvInitialiseTaskLists>
 8005c00:	e00d      	b.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005c02:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c0a:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d802      	bhi.n	8005c1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005c18:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c9c <prvAddNewTaskToReadyList+0xcc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a1d      	ldr	r2, [pc, #116]	@ (8005c9c <prvAddNewTaskToReadyList+0xcc>)
 8005c26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c28:	4b1c      	ldr	r3, [pc, #112]	@ (8005c9c <prvAddNewTaskToReadyList+0xcc>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	2201      	movs	r2, #1
 8005c36:	409a      	lsls	r2, r3
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <prvAddNewTaskToReadyList+0xd0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ca0 <prvAddNewTaskToReadyList+0xd0>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <prvAddNewTaskToReadyList+0xd4>)
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7ff f848 	bl	8004cee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005c5e:	f001 fc97 	bl	8007590 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <prvAddNewTaskToReadyList+0xc8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <prvAddNewTaskToReadyList+0xc4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d207      	bcs.n	8005c88 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <prvAddNewTaskToReadyList+0xd8>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200002fc 	.word	0x200002fc
 8005c94:	20000224 	.word	0x20000224
 8005c98:	20000308 	.word	0x20000308
 8005c9c:	20000318 	.word	0x20000318
 8005ca0:	20000304 	.word	0x20000304
 8005ca4:	20000228 	.word	0x20000228
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005cb2:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <vTaskStartScheduler+0x88>)
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2282      	movs	r2, #130	@ 0x82
 8005cbe:	491e      	ldr	r1, [pc, #120]	@ (8005d38 <vTaskStartScheduler+0x8c>)
 8005cc0:	481e      	ldr	r0, [pc, #120]	@ (8005d3c <vTaskStartScheduler+0x90>)
 8005cc2:	f7ff fead 	bl	8005a20 <xTaskCreate>
 8005cc6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005cce:	f000 ff79 	bl	8006bc4 <xTimerCreateTimerTask>
 8005cd2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d116      	bne.n	8005d08 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	60bb      	str	r3, [r7, #8]
    }
 8005cec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005cee:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <vTaskStartScheduler+0x94>)
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005cf6:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <vTaskStartScheduler+0x98>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <vTaskStartScheduler+0x9c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005d02:	f001 fb6f 	bl	80073e4 <xPortStartScheduler>
 8005d06:	e00f      	b.n	8005d28 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d10b      	bne.n	8005d28 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	607b      	str	r3, [r7, #4]
    }
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005d28:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <vTaskStartScheduler+0xa0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000320 	.word	0x20000320
 8005d38:	08009108 	.word	0x08009108
 8005d3c:	0800638d 	.word	0x0800638d
 8005d40:	2000031c 	.word	0x2000031c
 8005d44:	20000308 	.word	0x20000308
 8005d48:	20000300 	.word	0x20000300
 8005d4c:	20000020 	.word	0x20000020

08005d50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005d54:	4b04      	ldr	r3, [pc, #16]	@ (8005d68 <vTaskSuspendAll+0x18>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a03      	ldr	r2, [pc, #12]	@ (8005d68 <vTaskSuspendAll+0x18>)
 8005d5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000324 	.word	0x20000324

08005d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005d7a:	4b42      	ldr	r3, [pc, #264]	@ (8005e84 <xTaskResumeAll+0x118>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <xTaskResumeAll+0x2e>
        __asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	603b      	str	r3, [r7, #0]
    }
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005d9a:	f001 fbc7 	bl	800752c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005d9e:	4b39      	ldr	r3, [pc, #228]	@ (8005e84 <xTaskResumeAll+0x118>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	4a37      	ldr	r2, [pc, #220]	@ (8005e84 <xTaskResumeAll+0x118>)
 8005da6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da8:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <xTaskResumeAll+0x118>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d161      	bne.n	8005e74 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005db0:	4b35      	ldr	r3, [pc, #212]	@ (8005e88 <xTaskResumeAll+0x11c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05d      	beq.n	8005e74 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db8:	e02e      	b.n	8005e18 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dba:	4b34      	ldr	r3, [pc, #208]	@ (8005e8c <xTaskResumeAll+0x120>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe ffee 	bl	8004da8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe ffe9 	bl	8004da8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	2201      	movs	r2, #1
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	4b2c      	ldr	r3, [pc, #176]	@ (8005e90 <xTaskResumeAll+0x124>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e90 <xTaskResumeAll+0x124>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a27      	ldr	r2, [pc, #156]	@ (8005e94 <xTaskResumeAll+0x128>)
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7fe ff75 	bl	8004cee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	4b23      	ldr	r3, [pc, #140]	@ (8005e98 <xTaskResumeAll+0x12c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8005e12:	4b22      	ldr	r3, [pc, #136]	@ (8005e9c <xTaskResumeAll+0x130>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e18:	4b1c      	ldr	r3, [pc, #112]	@ (8005e8c <xTaskResumeAll+0x120>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1cc      	bne.n	8005dba <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005e26:	f000 fb47 	bl	80064b8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <xTaskResumeAll+0x134>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005e36:	f000 f853 	bl	8005ee0 <xTaskIncrementTick>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8005e40:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <xTaskResumeAll+0x130>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f1      	bne.n	8005e36 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8005e52:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <xTaskResumeAll+0x134>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005e58:	4b10      	ldr	r3, [pc, #64]	@ (8005e9c <xTaskResumeAll+0x130>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005e60:	2301      	movs	r3, #1
 8005e62:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005e64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <xTaskResumeAll+0x138>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005e74:	f001 fb8c 	bl	8007590 <vPortExitCritical>

    return xAlreadyYielded;
 8005e78:	68bb      	ldr	r3, [r7, #8]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000324 	.word	0x20000324
 8005e88:	200002fc 	.word	0x200002fc
 8005e8c:	200002bc 	.word	0x200002bc
 8005e90:	20000304 	.word	0x20000304
 8005e94:	20000228 	.word	0x20000228
 8005e98:	20000224 	.word	0x20000224
 8005e9c:	20000310 	.word	0x20000310
 8005ea0:	2000030c 	.word	0x2000030c
 8005ea4:	e000ed04 	.word	0xe000ed04

08005ea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005eae:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <xTaskGetTickCount+0x1c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005eb4:	687b      	ldr	r3, [r7, #4]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000300 	.word	0x20000300

08005ec8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005ecc:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <uxTaskGetNumberOfTasks+0x14>)
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	200002fc 	.word	0x200002fc

08005ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eea:	4b4f      	ldr	r3, [pc, #316]	@ (8006028 <xTaskIncrementTick+0x148>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 808f 	bne.w	8006012 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800602c <xTaskIncrementTick+0x14c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005efc:	4a4b      	ldr	r2, [pc, #300]	@ (800602c <xTaskIncrementTick+0x14c>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d121      	bne.n	8005f4c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005f08:	4b49      	ldr	r3, [pc, #292]	@ (8006030 <xTaskIncrementTick+0x150>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <xTaskIncrementTick+0x4a>
        __asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	603b      	str	r3, [r7, #0]
    }
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <xTaskIncrementTick+0x46>
 8005f2a:	4b41      	ldr	r3, [pc, #260]	@ (8006030 <xTaskIncrementTick+0x150>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	4b40      	ldr	r3, [pc, #256]	@ (8006034 <xTaskIncrementTick+0x154>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a3e      	ldr	r2, [pc, #248]	@ (8006030 <xTaskIncrementTick+0x150>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4a3e      	ldr	r2, [pc, #248]	@ (8006034 <xTaskIncrementTick+0x154>)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006038 <xTaskIncrementTick+0x158>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a3c      	ldr	r2, [pc, #240]	@ (8006038 <xTaskIncrementTick+0x158>)
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	f000 fab6 	bl	80064b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <xTaskIncrementTick+0x15c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d348      	bcc.n	8005fe8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f56:	4b36      	ldr	r3, [pc, #216]	@ (8006030 <xTaskIncrementTick+0x150>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f60:	4b36      	ldr	r3, [pc, #216]	@ (800603c <xTaskIncrementTick+0x15c>)
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295
 8005f66:	601a      	str	r2, [r3, #0]
                    break;
 8005f68:	e03e      	b.n	8005fe8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b31      	ldr	r3, [pc, #196]	@ (8006030 <xTaskIncrementTick+0x150>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d203      	bcs.n	8005f8a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005f82:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <xTaskIncrementTick+0x15c>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f88:	e02e      	b.n	8005fe8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe ff0a 	bl	8004da8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	3318      	adds	r3, #24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe ff01 	bl	8004da8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	2201      	movs	r2, #1
 8005fac:	409a      	lsls	r2, r3
 8005fae:	4b24      	ldr	r3, [pc, #144]	@ (8006040 <xTaskIncrementTick+0x160>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	4a22      	ldr	r2, [pc, #136]	@ (8006040 <xTaskIncrementTick+0x160>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8006044 <xTaskIncrementTick+0x164>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe fe8d 	bl	8004cee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <xTaskIncrementTick+0x168>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d3b9      	bcc.n	8005f56 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe6:	e7b6      	b.n	8005f56 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fe8:	4b17      	ldr	r3, [pc, #92]	@ (8006048 <xTaskIncrementTick+0x168>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fee:	4915      	ldr	r1, [pc, #84]	@ (8006044 <xTaskIncrementTick+0x164>)
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d901      	bls.n	8006004 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006004:	4b11      	ldr	r3, [pc, #68]	@ (800604c <xTaskIncrementTick+0x16c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e004      	b.n	800601c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006012:	4b0f      	ldr	r3, [pc, #60]	@ (8006050 <xTaskIncrementTick+0x170>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	4a0d      	ldr	r2, [pc, #52]	@ (8006050 <xTaskIncrementTick+0x170>)
 800601a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800601c:	697b      	ldr	r3, [r7, #20]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000324 	.word	0x20000324
 800602c:	20000300 	.word	0x20000300
 8006030:	200002b4 	.word	0x200002b4
 8006034:	200002b8 	.word	0x200002b8
 8006038:	20000314 	.word	0x20000314
 800603c:	2000031c 	.word	0x2000031c
 8006040:	20000304 	.word	0x20000304
 8006044:	20000228 	.word	0x20000228
 8006048:	20000224 	.word	0x20000224
 800604c:	20000310 	.word	0x20000310
 8006050:	2000030c 	.word	0x2000030c

08006054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800605a:	4b27      	ldr	r3, [pc, #156]	@ (80060f8 <vTaskSwitchContext+0xa4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006062:	4b26      	ldr	r3, [pc, #152]	@ (80060fc <vTaskSwitchContext+0xa8>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006068:	e040      	b.n	80060ec <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800606a:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <vTaskSwitchContext+0xa8>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006070:	4b23      	ldr	r3, [pc, #140]	@ (8006100 <vTaskSwitchContext+0xac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	fab3 f383 	clz	r3, r3
 800607c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f1c3 031f 	rsb	r3, r3, #31
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	491f      	ldr	r1, [pc, #124]	@ (8006104 <vTaskSwitchContext+0xb0>)
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	607b      	str	r3, [r7, #4]
    }
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <vTaskSwitchContext+0x5a>
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a11      	ldr	r2, [pc, #68]	@ (8006104 <vTaskSwitchContext+0xb0>)
 80060be:	4413      	add	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3308      	adds	r3, #8
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d104      	bne.n	80060e2 <vTaskSwitchContext+0x8e>
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a07      	ldr	r2, [pc, #28]	@ (8006108 <vTaskSwitchContext+0xb4>)
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	20000324 	.word	0x20000324
 80060fc:	20000310 	.word	0x20000310
 8006100:	20000304 	.word	0x20000304
 8006104:	20000228 	.word	0x20000228
 8006108:	20000224 	.word	0x20000224

0800610c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60fb      	str	r3, [r7, #12]
    }
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006134:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <vTaskPlaceOnEventList+0x48>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3318      	adds	r3, #24
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fe fdfa 	bl	8004d36 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006142:	2101      	movs	r1, #1
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f000 fcd7 	bl	8006af8 <prvAddCurrentTaskToDelayedList>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000224 	.word	0x20000224

08006158 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	617b      	str	r3, [r7, #20]
    }
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3318      	adds	r3, #24
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7fe fdaf 	bl	8004cee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f000 fcaa 	bl	8006af8 <prvAddCurrentTaskToDelayedList>
    }
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000224 	.word	0x20000224

080061b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
    }
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3318      	adds	r3, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fde0 	bl	8004da8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <xTaskRemoveFromEventList+0xb0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11c      	bne.n	800622a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe fdd7 	bl	8004da8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	2201      	movs	r2, #1
 8006200:	409a      	lsls	r2, r3
 8006202:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <xTaskRemoveFromEventList+0xb4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <xTaskRemoveFromEventList+0xb4>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a13      	ldr	r2, [pc, #76]	@ (8006268 <xTaskRemoveFromEventList+0xb8>)
 800621a:	441a      	add	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe fd63 	bl	8004cee <vListInsertEnd>
 8006228:	e005      	b.n	8006236 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3318      	adds	r3, #24
 800622e:	4619      	mov	r1, r3
 8006230:	480e      	ldr	r0, [pc, #56]	@ (800626c <xTaskRemoveFromEventList+0xbc>)
 8006232:	f7fe fd5c 	bl	8004cee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <xTaskRemoveFromEventList+0xc0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d905      	bls.n	8006250 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006248:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <xTaskRemoveFromEventList+0xc4>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e001      	b.n	8006254 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000324 	.word	0x20000324
 8006264:	20000304 	.word	0x20000304
 8006268:	20000228 	.word	0x20000228
 800626c:	200002bc 	.word	0x200002bc
 8006270:	20000224 	.word	0x20000224
 8006274:	20000310 	.word	0x20000310

08006278 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <vTaskInternalSetTimeOutState+0x24>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006288:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <vTaskInternalSetTimeOutState+0x28>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000314 	.word	0x20000314
 80062a0:	20000300 	.word	0x20000300

080062a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
    }
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
    }
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80062ea:	f001 f91f 	bl	800752c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80062ee:	4b1f      	ldr	r3, [pc, #124]	@ (800636c <xTaskCheckForTimeOut+0xc8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d102      	bne.n	800630e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e026      	b.n	800635c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <xTaskCheckForTimeOut+0xcc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d00a      	beq.n	8006330 <xTaskCheckForTimeOut+0x8c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	429a      	cmp	r2, r3
 8006322:	d305      	bcc.n	8006330 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006324:	2301      	movs	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e015      	b.n	800635c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	429a      	cmp	r2, r3
 8006338:	d20b      	bcs.n	8006352 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	1ad2      	subs	r2, r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ff96 	bl	8006278 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e004      	b.n	800635c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800635c:	f001 f918 	bl	8007590 <vPortExitCritical>

    return xReturn;
 8006360:	69fb      	ldr	r3, [r7, #28]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000300 	.word	0x20000300
 8006370:	20000314 	.word	0x20000314

08006374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006378:	4b03      	ldr	r3, [pc, #12]	@ (8006388 <vTaskMissedYield+0x14>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
}
 800637e:	bf00      	nop
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	20000310 	.word	0x20000310

0800638c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006394:	f000 f852 	bl	800643c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <prvIdleTask+0x28>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d9f9      	bls.n	8006394 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80063a0:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <prvIdleTask+0x2c>)
 80063a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80063b0:	e7f0      	b.n	8006394 <prvIdleTask+0x8>
 80063b2:	bf00      	nop
 80063b4:	20000228 	.word	0x20000228
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	e00c      	b.n	80063e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a12      	ldr	r2, [pc, #72]	@ (800641c <prvInitialiseTaskLists+0x60>)
 80063d4:	4413      	add	r3, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fc5c 	bl	8004c94 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3301      	adds	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d9ef      	bls.n	80063c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80063e8:	480d      	ldr	r0, [pc, #52]	@ (8006420 <prvInitialiseTaskLists+0x64>)
 80063ea:	f7fe fc53 	bl	8004c94 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80063ee:	480d      	ldr	r0, [pc, #52]	@ (8006424 <prvInitialiseTaskLists+0x68>)
 80063f0:	f7fe fc50 	bl	8004c94 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80063f4:	480c      	ldr	r0, [pc, #48]	@ (8006428 <prvInitialiseTaskLists+0x6c>)
 80063f6:	f7fe fc4d 	bl	8004c94 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80063fa:	480c      	ldr	r0, [pc, #48]	@ (800642c <prvInitialiseTaskLists+0x70>)
 80063fc:	f7fe fc4a 	bl	8004c94 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006400:	480b      	ldr	r0, [pc, #44]	@ (8006430 <prvInitialiseTaskLists+0x74>)
 8006402:	f7fe fc47 	bl	8004c94 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006406:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <prvInitialiseTaskLists+0x78>)
 8006408:	4a05      	ldr	r2, [pc, #20]	@ (8006420 <prvInitialiseTaskLists+0x64>)
 800640a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800640c:	4b0a      	ldr	r3, [pc, #40]	@ (8006438 <prvInitialiseTaskLists+0x7c>)
 800640e:	4a05      	ldr	r2, [pc, #20]	@ (8006424 <prvInitialiseTaskLists+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000228 	.word	0x20000228
 8006420:	2000028c 	.word	0x2000028c
 8006424:	200002a0 	.word	0x200002a0
 8006428:	200002bc 	.word	0x200002bc
 800642c:	200002d0 	.word	0x200002d0
 8006430:	200002e8 	.word	0x200002e8
 8006434:	200002b4 	.word	0x200002b4
 8006438:	200002b8 	.word	0x200002b8

0800643c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006442:	e019      	b.n	8006478 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006444:	f001 f872 	bl	800752c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006448:	4b10      	ldr	r3, [pc, #64]	@ (800648c <prvCheckTasksWaitingTermination+0x50>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe fca7 	bl	8004da8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <prvCheckTasksWaitingTermination+0x54>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3b01      	subs	r3, #1
 8006460:	4a0b      	ldr	r2, [pc, #44]	@ (8006490 <prvCheckTasksWaitingTermination+0x54>)
 8006462:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <prvCheckTasksWaitingTermination+0x58>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3b01      	subs	r3, #1
 800646a:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <prvCheckTasksWaitingTermination+0x58>)
 800646c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800646e:	f001 f88f 	bl	8007590 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f810 	bl	8006498 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <prvCheckTasksWaitingTermination+0x58>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e1      	bne.n	8006444 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200002d0 	.word	0x200002d0
 8006490:	200002fc 	.word	0x200002fc
 8006494:	200002e4 	.word	0x200002e4

08006498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fa27 	bl	80078f8 <vPortFree>
                vPortFree( pxTCB );
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fa24 	bl	80078f8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064bc:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <prvResetNextTaskUnblockTime+0x30>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80064c6:	4b09      	ldr	r3, [pc, #36]	@ (80064ec <prvResetNextTaskUnblockTime+0x34>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80064ce:	e005      	b.n	80064dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064d0:	4b05      	ldr	r3, [pc, #20]	@ (80064e8 <prvResetNextTaskUnblockTime+0x30>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a04      	ldr	r2, [pc, #16]	@ (80064ec <prvResetNextTaskUnblockTime+0x34>)
 80064da:	6013      	str	r3, [r2, #0]
}
 80064dc:	bf00      	nop
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200002b4 	.word	0x200002b4
 80064ec:	2000031c 	.word	0x2000031c

080064f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80064f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <xTaskGetSchedulerState+0x34>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80064fe:	2301      	movs	r3, #1
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e008      	b.n	8006516 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006504:	4b08      	ldr	r3, [pc, #32]	@ (8006528 <xTaskGetSchedulerState+0x38>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800650c:	2302      	movs	r3, #2
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	e001      	b.n	8006516 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006516:	687b      	ldr	r3, [r7, #4]
    }
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	20000308 	.word	0x20000308
 8006528:	20000324 	.word	0x20000324

0800652c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d065      	beq.n	800660e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006542:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <xTaskPriorityDisinherit+0xec>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	429a      	cmp	r2, r3
 800654a:	d00b      	beq.n	8006564 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
    }
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10b      	bne.n	8006584 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60bb      	str	r3, [r7, #8]
    }
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	429a      	cmp	r2, r3
 8006598:	d039      	beq.n	800660e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d135      	bne.n	800660e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fbfe 	bl	8004da8 <uxListRemove>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	2201      	movs	r2, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43da      	mvns	r2, r3
 80065be:	4b17      	ldr	r3, [pc, #92]	@ (800661c <xTaskPriorityDisinherit+0xf0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4013      	ands	r3, r2
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <xTaskPriorityDisinherit+0xf0>)
 80065c6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	f1c3 0205 	rsb	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	2201      	movs	r2, #1
 80065e2:	409a      	lsls	r2, r3
 80065e4:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <xTaskPriorityDisinherit+0xf0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	4a0c      	ldr	r2, [pc, #48]	@ (800661c <xTaskPriorityDisinherit+0xf0>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a09      	ldr	r2, [pc, #36]	@ (8006620 <xTaskPriorityDisinherit+0xf4>)
 80065fc:	441a      	add	r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe fb72 	bl	8004cee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800660a:	2301      	movs	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800660e:	697b      	ldr	r3, [r7, #20]
    }
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000224 	.word	0x20000224
 800661c:	20000304 	.word	0x20000304
 8006620:	20000228 	.word	0x20000228

08006624 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	613b      	str	r3, [r7, #16]
    }
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006650:	f000 ff6c 	bl	800752c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006654:	4b31      	ldr	r3, [pc, #196]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	3354      	adds	r3, #84	@ 0x54
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d022      	beq.n	80066ac <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006666:	4b2d      	ldr	r3, [pc, #180]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	3214      	adds	r2, #20
 800666e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	43d2      	mvns	r2, r2
 8006676:	4011      	ands	r1, r2
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	3214      	adds	r2, #20
 800667c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006680:	4b26      	ldr	r3, [pc, #152]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	3354      	adds	r3, #84	@ 0x54
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006694:	2101      	movs	r1, #1
 8006696:	6a38      	ldr	r0, [r7, #32]
 8006698:	f000 fa2e 	bl	8006af8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800669c:	4b20      	ldr	r3, [pc, #128]	@ (8006720 <xTaskGenericNotifyWait+0xfc>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80066ac:	f000 ff70 	bl	8007590 <vPortExitCritical>

        taskENTER_CRITICAL();
 80066b0:	f000 ff3c 	bl	800752c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80066ba:	4b18      	ldr	r3, [pc, #96]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	3214      	adds	r2, #20
 80066c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80066ca:	4b14      	ldr	r3, [pc, #80]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	3354      	adds	r3, #84	@ 0x54
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d002      	beq.n	80066e2 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e00e      	b.n	8006700 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80066e2:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	3214      	adds	r2, #20
 80066ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	43d2      	mvns	r2, r2
 80066f2:	4011      	ands	r1, r2
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	3214      	adds	r2, #20
 80066f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006700:	4b06      	ldr	r3, [pc, #24]	@ (800671c <xTaskGenericNotifyWait+0xf8>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	3354      	adds	r3, #84	@ 0x54
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800670e:	f000 ff3f 	bl	8007590 <vPortExitCritical>

        return xReturn;
 8006712:	697b      	ldr	r3, [r7, #20]
    }
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000224 	.word	0x20000224
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	@ 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006732:	2301      	movs	r3, #1
 8006734:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <xTaskGenericNotify+0x30>
        __asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	623b      	str	r3, [r7, #32]
    }
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <xTaskGenericNotify+0x4e>
        __asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	61fb      	str	r3, [r7, #28]
    }
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8006776:	f000 fed9 	bl	800752c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	3214      	adds	r2, #20
 8006786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800678e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4413      	add	r3, r2
 8006794:	3354      	adds	r3, #84	@ 0x54
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800679c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	3354      	adds	r3, #84	@ 0x54
 80067a4:	2202      	movs	r2, #2
 80067a6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d83b      	bhi.n	8006826 <xTaskGenericNotify+0x102>
 80067ae:	a201      	add	r2, pc, #4	@ (adr r2, 80067b4 <xTaskGenericNotify+0x90>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	08006847 	.word	0x08006847
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	0800680b 	.word	0x0800680b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	3214      	adds	r2, #20
 80067ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	3214      	adds	r2, #20
 80067de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80067e2:	e033      	b.n	800684c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	3214      	adds	r2, #20
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	1c59      	adds	r1, r3, #1
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	3214      	adds	r2, #20
 80067f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80067fa:	e027      	b.n	800684c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	3214      	adds	r2, #20
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006808:	e020      	b.n	800684c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800680a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800680e:	2b02      	cmp	r3, #2
 8006810:	d006      	beq.n	8006820 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	3214      	adds	r2, #20
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800681e:	e015      	b.n	800684c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006820:	2300      	movs	r3, #0
 8006822:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8006824:	e012      	b.n	800684c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006826:	4b2c      	ldr	r3, [pc, #176]	@ (80068d8 <xTaskGenericNotify+0x1b4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <xTaskGenericNotify+0x126>
        __asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61bb      	str	r3, [r7, #24]
    }
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <xTaskGenericNotify+0x11e>
                    break;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <xTaskGenericNotify+0x128>

                    break;
 800684a:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800684c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006850:	2b01      	cmp	r3, #1
 8006852:	d13a      	bne.n	80068ca <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	3304      	adds	r3, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe faa5 	bl	8004da8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	2201      	movs	r2, #1
 8006864:	409a      	lsls	r2, r3
 8006866:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <xTaskGenericNotify+0x1b8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	4a1b      	ldr	r2, [pc, #108]	@ (80068dc <xTaskGenericNotify+0x1b8>)
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4a18      	ldr	r2, [pc, #96]	@ (80068e0 <xTaskGenericNotify+0x1bc>)
 800687e:	441a      	add	r2, r3
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7fe fa31 	bl	8004cee <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <xTaskGenericNotify+0x188>
        __asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	617b      	str	r3, [r7, #20]
    }
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b0:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <xTaskGenericNotify+0x1c0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d907      	bls.n	80068ca <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80068ba:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <xTaskGenericNotify+0x1c4>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068ca:	f000 fe61 	bl	8007590 <vPortExitCritical>

        return xReturn;
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80068d0:	4618      	mov	r0, r3
 80068d2:	3730      	adds	r7, #48	@ 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000300 	.word	0x20000300
 80068dc:	20000304 	.word	0x20000304
 80068e0:	20000228 	.word	0x20000228
 80068e4:	20000224 	.word	0x20000224
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b090      	sub	sp, #64	@ 0x40
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80068fa:	2301      	movs	r3, #1
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800693a:	f000 fedf 	bl	80076fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8006942:	f3ef 8211 	mrs	r2, BASEPRI
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	627a      	str	r2, [r7, #36]	@ 0x24
 8006958:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800695e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	3214      	adds	r2, #20
 800696a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800696e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006970:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	3354      	adds	r3, #84	@ 0x54
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	3354      	adds	r3, #84	@ 0x54
 8006988:	2202      	movs	r2, #2
 800698a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d83b      	bhi.n	8006a0a <xTaskGenericNotifyFromISR+0x11e>
 8006992:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <xTaskGenericNotifyFromISR+0xac>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	08006a2b 	.word	0x08006a2b
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069ef 	.word	0x080069ef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80069ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	3214      	adds	r2, #20
 80069b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	3214      	adds	r2, #20
 80069c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069c6:	e033      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80069c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	3214      	adds	r2, #20
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	1c59      	adds	r1, r3, #1
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	3214      	adds	r2, #20
 80069da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069de:	e027      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	3214      	adds	r2, #20
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069ec:	e020      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d006      	beq.n	8006a04 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	3214      	adds	r2, #20
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006a02:	e015      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8006a08:	e012      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a0a:	4b34      	ldr	r3, [pc, #208]	@ (8006adc <xTaskGenericNotifyFromISR+0x1f0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00d      	beq.n	8006a2e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	61fb      	str	r3, [r7, #28]
    }
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006a2a:	bf00      	nop
 8006a2c:	e000      	b.n	8006a30 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006a2e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d146      	bne.n	8006ac6 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61bb      	str	r3, [r7, #24]
    }
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a58:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <xTaskGenericNotifyFromISR+0x1f4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11c      	bne.n	8006a9a <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a62:	3304      	adds	r3, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe f99f 	bl	8004da8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	409a      	lsls	r2, r3
 8006a72:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae4 <xTaskGenericNotifyFromISR+0x1f8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae4 <xTaskGenericNotifyFromISR+0x1f8>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <xTaskGenericNotifyFromISR+0x1fc>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe f92b 	bl	8004cee <vListInsertEnd>
 8006a98:	e005      	b.n	8006aa6 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4812      	ldr	r0, [pc, #72]	@ (8006aec <xTaskGenericNotifyFromISR+0x200>)
 8006aa2:	f7fe f924 	bl	8004cee <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	4b11      	ldr	r3, [pc, #68]	@ (8006af0 <xTaskGenericNotifyFromISR+0x204>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d908      	bls.n	8006ac6 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006abc:	2201      	movs	r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8006af4 <xTaskGenericNotifyFromISR+0x208>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac8:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f383 8811 	msr	BASEPRI, r3
    }
 8006ad0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3740      	adds	r7, #64	@ 0x40
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000300 	.word	0x20000300
 8006ae0:	20000324 	.word	0x20000324
 8006ae4:	20000304 	.word	0x20000304
 8006ae8:	20000228 	.word	0x20000228
 8006aec:	200002bc 	.word	0x200002bc
 8006af0:	20000224 	.word	0x20000224
 8006af4:	20000310 	.word	0x20000310

08006af8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006b02:	4b29      	ldr	r3, [pc, #164]	@ (8006ba8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b08:	4b28      	ldr	r3, [pc, #160]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe f94a 	bl	8004da8 <uxListRemove>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b1a:	4b24      	ldr	r3, [pc, #144]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	2201      	movs	r2, #1
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43da      	mvns	r2, r3
 8006b28:	4b21      	ldr	r3, [pc, #132]	@ (8006bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	4a20      	ldr	r2, [pc, #128]	@ (8006bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b30:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d10a      	bne.n	8006b50 <prvAddCurrentTaskToDelayedList+0x58>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b40:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	481a      	ldr	r0, [pc, #104]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b4a:	f7fe f8d0 	bl	8004cee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006b4e:	e026      	b.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4413      	add	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b58:	4b14      	ldr	r3, [pc, #80]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d209      	bcs.n	8006b7c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b68:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7fe f8de 	bl	8004d36 <vListInsert>
}
 8006b7a:	e010      	b.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7fe f8d4 	bl	8004d36 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d202      	bcs.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006b98:	4a09      	ldr	r2, [pc, #36]	@ (8006bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6013      	str	r3, [r2, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000300 	.word	0x20000300
 8006bac:	20000224 	.word	0x20000224
 8006bb0:	20000304 	.word	0x20000304
 8006bb4:	200002e8 	.word	0x200002e8
 8006bb8:	200002b8 	.word	0x200002b8
 8006bbc:	200002b4 	.word	0x200002b4
 8006bc0:	2000031c 	.word	0x2000031c

08006bc4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006bce:	f000 faf7 	bl	80071c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <xTimerCreateTimerTask+0x58>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006bda:	4b11      	ldr	r3, [pc, #68]	@ (8006c20 <xTimerCreateTimerTask+0x5c>)
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	2302      	movs	r3, #2
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	2300      	movs	r3, #0
 8006be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006be8:	490e      	ldr	r1, [pc, #56]	@ (8006c24 <xTimerCreateTimerTask+0x60>)
 8006bea:	480f      	ldr	r0, [pc, #60]	@ (8006c28 <xTimerCreateTimerTask+0x64>)
 8006bec:	f7fe ff18 	bl	8005a20 <xTaskCreate>
 8006bf0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	603b      	str	r3, [r7, #0]
    }
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006c10:	687b      	ldr	r3, [r7, #4]
    }
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000358 	.word	0x20000358
 8006c20:	2000035c 	.word	0x2000035c
 8006c24:	08009110 	.word	0x08009110
 8006c28:	08006e21 	.word	0x08006e21

08006c2c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c3a:	202c      	movs	r0, #44	@ 0x2c
 8006c3c:	f000 fda0 	bl	8007780 <pvPortMalloc>
 8006c40:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f805 	bl	8006c6e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006c64:	697b      	ldr	r3, [r7, #20]
        }
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	617b      	str	r3, [r7, #20]
    }
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006c9a:	f000 fa91 	bl	80071c0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	6a3a      	ldr	r2, [r7, #32]
 8006cb4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe f80a 	bl	8004cd4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8006cd8:	bf00      	nop
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <xTimerGenericCommand+0x30>
        __asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	623b      	str	r3, [r7, #32]
    }
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006d10:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <xTimerGenericCommand+0x98>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02a      	beq.n	8006d6e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	dc18      	bgt.n	8006d5c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d2a:	f7ff fbe1 	bl	80064f0 <xTaskGetSchedulerState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d109      	bne.n	8006d48 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d34:	4b10      	ldr	r3, [pc, #64]	@ (8006d78 <xTimerGenericCommand+0x98>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	f107 0114 	add.w	r1, r7, #20
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d40:	f7fe f960 	bl	8005004 <xQueueGenericSend>
 8006d44:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d46:	e012      	b.n	8006d6e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d48:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <xTimerGenericCommand+0x98>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	f107 0114 	add.w	r1, r7, #20
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7fe f956 	bl	8005004 <xQueueGenericSend>
 8006d58:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d5a:	e008      	b.n	8006d6e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <xTimerGenericCommand+0x98>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	f107 0114 	add.w	r1, r7, #20
 8006d64:	2300      	movs	r3, #0
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	f7fe fa4e 	bl	8005208 <xQueueGenericSendFromISR>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006d70:	4618      	mov	r0, r3
 8006d72:	3728      	adds	r7, #40	@ 0x28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000358 	.word	0x20000358

08006d7c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006d88:	e008      	b.n	8006d9c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	18d1      	adds	r1, r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f8df 	bl	8006f6c <prvInsertTimerInActiveList>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ea      	bne.n	8006d8a <prvReloadTimer+0xe>
        }
    }
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dca:	4b14      	ldr	r3, [pc, #80]	@ (8006e1c <prvProcessExpiredTimer+0x5c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd ffe5 	bl	8004da8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff ffc3 	bl	8006d7c <prvReloadTimer>
 8006df6:	e008      	b.n	8006e0a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	4798      	blx	r3
    }
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000350 	.word	0x20000350

08006e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f859 	bl	8006ee4 <prvGetNextExpireTime>
 8006e32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f805 	bl	8006e48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006e3e:	f000 f8d7 	bl	8006ff0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e42:	bf00      	nop
 8006e44:	e7f0      	b.n	8006e28 <prvTimerTask+0x8>
	...

08006e48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006e52:	f7fe ff7d 	bl	8005d50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f866 	bl	8006f2c <prvSampleTimeNow>
 8006e60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d130      	bne.n	8006eca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d806      	bhi.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006e76:	f7fe ff79 	bl	8005d6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff9f 	bl	8006dc0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006e82:	e024      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e8a:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <prvProcessTimerOrBlockTask+0x90>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <prvProcessTimerOrBlockTask+0x50>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <prvProcessTimerOrBlockTask+0x52>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <prvProcessTimerOrBlockTask+0x94>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f7fe fd85 	bl	80059b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006eae:	f7fe ff5d 	bl	8005d6c <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <prvProcessTimerOrBlockTask+0x98>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
    }
 8006ec8:	e001      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006eca:	f7fe ff4f 	bl	8005d6c <xTaskResumeAll>
    }
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000354 	.word	0x20000354
 8006edc:	20000358 	.word	0x20000358
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eec:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <prvGetNextExpireTime+0x44>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <prvGetNextExpireTime+0x16>
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	e000      	b.n	8006efc <prvGetNextExpireTime+0x18>
 8006efa:	2200      	movs	r2, #0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f08:	4b07      	ldr	r3, [pc, #28]	@ (8006f28 <prvGetNextExpireTime+0x44>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e001      	b.n	8006f18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006f18:	68fb      	ldr	r3, [r7, #12]
    }
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20000350 	.word	0x20000350

08006f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006f34:	f7fe ffb8 	bl	8005ea8 <xTaskGetTickCount>
 8006f38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <prvSampleTimeNow+0x3c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d205      	bcs.n	8006f50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006f44:	f000 f916 	bl	8007174 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006f56:	4a04      	ldr	r2, [pc, #16]	@ (8006f68 <prvSampleTimeNow+0x3c>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000360 	.word	0x20000360

08006f6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d812      	bhi.n	8006fb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e01b      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <prvInsertTimerInActiveList+0x7c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fd fec0 	bl	8004d36 <vListInsert>
 8006fb6:	e012      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d206      	bcs.n	8006fce <prvInsertTimerInActiveList+0x62>
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e007      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fce:	4b07      	ldr	r3, [pc, #28]	@ (8006fec <prvInsertTimerInActiveList+0x80>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fd feac 	bl	8004d36 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006fde:	697b      	ldr	r3, [r7, #20]
    }
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000354 	.word	0x20000354
 8006fec:	20000350 	.word	0x20000350

08006ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ff6:	e0a9      	b.n	800714c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f2c0 80a6 	blt.w	800714c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd fec9 	bl	8004da8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007016:	1d3b      	adds	r3, r7, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff87 	bl	8006f2c <prvSampleTimeNow>
 800701e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3b01      	subs	r3, #1
 8007024:	2b08      	cmp	r3, #8
 8007026:	f200 808e 	bhi.w	8007146 <prvProcessReceivedCommands+0x156>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <prvProcessReceivedCommands+0x40>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007055 	.word	0x08007055
 8007034:	08007055 	.word	0x08007055
 8007038:	080070bd 	.word	0x080070bd
 800703c:	080070d1 	.word	0x080070d1
 8007040:	0800711d 	.word	0x0800711d
 8007044:	08007055 	.word	0x08007055
 8007048:	08007055 	.word	0x08007055
 800704c:	080070bd 	.word	0x080070bd
 8007050:	080070d1 	.word	0x080070d1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	b2da      	uxtb	r2, r3
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	18d1      	adds	r1, r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	69f8      	ldr	r0, [r7, #28]
 8007074:	f7ff ff7a 	bl	8006f6c <prvInsertTimerInActiveList>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d065      	beq.n	800714a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	4413      	add	r3, r2
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4619      	mov	r1, r3
 8007098:	69f8      	ldr	r0, [r7, #28]
 800709a:	f7ff fe6f 	bl	8006d7c <prvReloadTimer>
 800709e:	e008      	b.n	80070b2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	69f8      	ldr	r0, [r7, #28]
 80070b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80070ba:	e046      	b.n	800714a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80070ce:	e03d      	b.n	800714c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	617b      	str	r3, [r7, #20]
    }
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	18d1      	adds	r1, r2, r3
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	69f8      	ldr	r0, [r7, #28]
 8007116:	f7ff ff29 	bl	8006f6c <prvInsertTimerInActiveList>
                        break;
 800711a:	e017      	b.n	800714c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800712a:	69f8      	ldr	r0, [r7, #28]
 800712c:	f000 fbe4 	bl	80078f8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007130:	e00c      	b.n	800714c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007144:	e002      	b.n	800714c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <prvProcessReceivedCommands+0x15c>
                        break;
 800714a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800714c:	4b08      	ldr	r3, [pc, #32]	@ (8007170 <prvProcessReceivedCommands+0x180>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	2200      	movs	r2, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f90c 	bl	8005374 <xQueueReceive>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	f47f af4a 	bne.w	8006ff8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000358 	.word	0x20000358

08007174 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800717a:	e009      	b.n	8007190 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800717c:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <prvSwitchTimerLists+0x44>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007186:	f04f 31ff 	mov.w	r1, #4294967295
 800718a:	6838      	ldr	r0, [r7, #0]
 800718c:	f7ff fe18 	bl	8006dc0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007190:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <prvSwitchTimerLists+0x44>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800719a:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <prvSwitchTimerLists+0x44>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <prvSwitchTimerLists+0x48>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a04      	ldr	r2, [pc, #16]	@ (80071b8 <prvSwitchTimerLists+0x44>)
 80071a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80071a8:	4a04      	ldr	r2, [pc, #16]	@ (80071bc <prvSwitchTimerLists+0x48>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6013      	str	r3, [r2, #0]
    }
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000350 	.word	0x20000350
 80071bc:	20000354 	.word	0x20000354

080071c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80071c4:	f000 f9b2 	bl	800752c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80071c8:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <prvCheckForValidListAndQueue+0x54>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11d      	bne.n	800720c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80071d0:	4811      	ldr	r0, [pc, #68]	@ (8007218 <prvCheckForValidListAndQueue+0x58>)
 80071d2:	f7fd fd5f 	bl	8004c94 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80071d6:	4811      	ldr	r0, [pc, #68]	@ (800721c <prvCheckForValidListAndQueue+0x5c>)
 80071d8:	f7fd fd5c 	bl	8004c94 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80071dc:	4b10      	ldr	r3, [pc, #64]	@ (8007220 <prvCheckForValidListAndQueue+0x60>)
 80071de:	4a0e      	ldr	r2, [pc, #56]	@ (8007218 <prvCheckForValidListAndQueue+0x58>)
 80071e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <prvCheckForValidListAndQueue+0x64>)
 80071e4:	4a0d      	ldr	r2, [pc, #52]	@ (800721c <prvCheckForValidListAndQueue+0x5c>)
 80071e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80071e8:	2200      	movs	r2, #0
 80071ea:	210c      	movs	r1, #12
 80071ec:	200a      	movs	r0, #10
 80071ee:	f7fd fe97 	bl	8004f20 <xQueueGenericCreate>
 80071f2:	4603      	mov	r3, r0
 80071f4:	4a07      	ldr	r2, [pc, #28]	@ (8007214 <prvCheckForValidListAndQueue+0x54>)
 80071f6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <prvCheckForValidListAndQueue+0x54>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007200:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <prvCheckForValidListAndQueue+0x54>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4908      	ldr	r1, [pc, #32]	@ (8007228 <prvCheckForValidListAndQueue+0x68>)
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fb86 	bl	8005918 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800720c:	f000 f9c0 	bl	8007590 <vPortExitCritical>
    }
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000358 	.word	0x20000358
 8007218:	20000328 	.word	0x20000328
 800721c:	2000033c 	.word	0x2000033c
 8007220:	20000350 	.word	0x20000350
 8007224:	20000354 	.word	0x20000354
 8007228:	08009118 	.word	0x08009118

0800722c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <xTimerIsTimerActive+0x2a>
        __asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60fb      	str	r3, [r7, #12]
    }
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007256:	f000 f969 	bl	800752c <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e001      	b.n	8007272 <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 800726e:	2301      	movs	r3, #1
 8007270:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007272:	f000 f98d 	bl	8007590 <vPortExitCritical>

        return xReturn;
 8007276:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <pvTimerGetTimerID+0x2a>
        __asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60fb      	str	r3, [r7, #12]
    }
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80072aa:	f000 f93f 	bl	800752c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80072b4:	f000 f96c 	bl	8007590 <vPortExitCritical>

        return pvReturn;
 80072b8:	693b      	ldr	r3, [r7, #16]
    }
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3b04      	subs	r3, #4
 80072d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3b04      	subs	r3, #4
 80072e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f023 0201 	bic.w	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80072f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007328 <pxPortInitialiseStack+0x64>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3b14      	subs	r3, #20
 80072fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b04      	subs	r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f06f 0202 	mvn.w	r2, #2
 8007312:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b20      	subs	r3, #32
 8007318:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	0800732d 	.word	0x0800732d

0800732c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <prvTaskExitError+0x58>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d00b      	beq.n	8007358 <prvTaskExitError+0x2c>
        __asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
    }
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <prvTaskExitError+0x28>
        __asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60bb      	str	r3, [r7, #8]
    }
 800736a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800736c:	bf00      	nop
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0fc      	beq.n	800736e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000024 	.word	0x20000024
	...

08007390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007390:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <pxCurrentTCBConst2>)
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	6808      	ldr	r0, [r1, #0]
 8007396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739a:	f380 8809 	msr	PSP, r0
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8811 	msr	BASEPRI, r0
 80073aa:	4770      	bx	lr
 80073ac:	f3af 8000 	nop.w

080073b0 <pxCurrentTCBConst2>:
 80073b0:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop

080073b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80073b8:	4808      	ldr	r0, [pc, #32]	@ (80073dc <prvPortStartFirstTask+0x24>)
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	6800      	ldr	r0, [r0, #0]
 80073be:	f380 8808 	msr	MSP, r0
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8814 	msr	CONTROL, r0
 80073ca:	b662      	cpsie	i
 80073cc:	b661      	cpsie	f
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	df00      	svc	0
 80073d8:	bf00      	nop
 80073da:	0000      	.short	0x0000
 80073dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop

080073e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073ea:	4b47      	ldr	r3, [pc, #284]	@ (8007508 <xPortStartScheduler+0x124>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a47      	ldr	r2, [pc, #284]	@ (800750c <xPortStartScheduler+0x128>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d10b      	bne.n	800740c <xPortStartScheduler+0x28>
        __asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	613b      	str	r3, [r7, #16]
    }
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800740c:	4b3e      	ldr	r3, [pc, #248]	@ (8007508 <xPortStartScheduler+0x124>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a3f      	ldr	r2, [pc, #252]	@ (8007510 <xPortStartScheduler+0x12c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10b      	bne.n	800742e <xPortStartScheduler+0x4a>
        __asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60fb      	str	r3, [r7, #12]
    }
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800742e:	4b39      	ldr	r3, [pc, #228]	@ (8007514 <xPortStartScheduler+0x130>)
 8007430:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	22ff      	movs	r2, #255	@ 0xff
 800743e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <xPortStartScheduler+0x134>)
 8007454:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007456:	4b31      	ldr	r3, [pc, #196]	@ (800751c <xPortStartScheduler+0x138>)
 8007458:	2207      	movs	r2, #7
 800745a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745c:	e009      	b.n	8007472 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800745e:	4b2f      	ldr	r3, [pc, #188]	@ (800751c <xPortStartScheduler+0x138>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3b01      	subs	r3, #1
 8007464:	4a2d      	ldr	r2, [pc, #180]	@ (800751c <xPortStartScheduler+0x138>)
 8007466:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b80      	cmp	r3, #128	@ 0x80
 800747c:	d0ef      	beq.n	800745e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800747e:	4b27      	ldr	r3, [pc, #156]	@ (800751c <xPortStartScheduler+0x138>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1c3 0307 	rsb	r3, r3, #7
 8007486:	2b04      	cmp	r3, #4
 8007488:	d00b      	beq.n	80074a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60bb      	str	r3, [r7, #8]
    }
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074a2:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <xPortStartScheduler+0x138>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <xPortStartScheduler+0x138>)
 80074aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074ac:	4b1b      	ldr	r3, [pc, #108]	@ (800751c <xPortStartScheduler+0x138>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074b4:	4a19      	ldr	r2, [pc, #100]	@ (800751c <xPortStartScheduler+0x138>)
 80074b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80074c0:	4b17      	ldr	r3, [pc, #92]	@ (8007520 <xPortStartScheduler+0x13c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <xPortStartScheduler+0x13c>)
 80074c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80074cc:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <xPortStartScheduler+0x13c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a13      	ldr	r2, [pc, #76]	@ (8007520 <xPortStartScheduler+0x13c>)
 80074d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80074d8:	f000 f8e0 	bl	800769c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <xPortStartScheduler+0x140>)
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80074e2:	f000 f8ff 	bl	80076e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074e6:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <xPortStartScheduler+0x144>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007528 <xPortStartScheduler+0x144>)
 80074ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80074f2:	f7ff ff61 	bl	80073b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80074f6:	f7fe fdad 	bl	8006054 <vTaskSwitchContext>
    prvTaskExitError();
 80074fa:	f7ff ff17 	bl	800732c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed00 	.word	0xe000ed00
 800750c:	410fc271 	.word	0x410fc271
 8007510:	410fc270 	.word	0x410fc270
 8007514:	e000e400 	.word	0xe000e400
 8007518:	20000364 	.word	0x20000364
 800751c:	20000368 	.word	0x20000368
 8007520:	e000ed20 	.word	0xe000ed20
 8007524:	20000024 	.word	0x20000024
 8007528:	e000ef34 	.word	0xe000ef34

0800752c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
        __asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	607b      	str	r3, [r7, #4]
    }
 8007544:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007546:	4b10      	ldr	r3, [pc, #64]	@ (8007588 <vPortEnterCritical+0x5c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	4a0e      	ldr	r2, [pc, #56]	@ (8007588 <vPortEnterCritical+0x5c>)
 800754e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007550:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <vPortEnterCritical+0x5c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d110      	bne.n	800757a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007558:	4b0c      	ldr	r3, [pc, #48]	@ (800758c <vPortEnterCritical+0x60>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <vPortEnterCritical+0x4e>
        __asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	603b      	str	r3, [r7, #0]
    }
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <vPortEnterCritical+0x4a>
    }
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000024 	.word	0x20000024
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <vPortExitCritical+0x50>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <vPortExitCritical+0x26>
        __asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
    }
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <vPortExitCritical+0x50>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a08      	ldr	r2, [pc, #32]	@ (80075e0 <vPortExitCritical+0x50>)
 80075be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80075c0:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <vPortExitCritical+0x50>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <vPortExitCritical+0x44>
 80075c8:	2300      	movs	r3, #0
 80075ca:	603b      	str	r3, [r7, #0]
        __asm volatile
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f383 8811 	msr	BASEPRI, r3
    }
 80075d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000024 	.word	0x20000024
	...

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f01e 0f10 	tst.w	lr, #16
 8007600:	bf08      	it	eq
 8007602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007614:	f380 8811 	msr	BASEPRI, r0
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f7fe fd18 	bl	8006054 <vTaskSwitchContext>
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	f380 8811 	msr	BASEPRI, r0
 800762c:	bc09      	pop	{r0, r3}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007636:	f01e 0f10 	tst.w	lr, #16
 800763a:	bf08      	it	eq
 800763c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007640:	f380 8809 	msr	PSP, r0
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst>:
 8007650:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
        __asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
    }
 8007670:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007672:	f7fe fc35 	bl	8005ee0 <xTaskIncrementTick>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <SysTick_Handler+0x40>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f383 8811 	msr	BASEPRI, r3
    }
 800768e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	@ (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <vPortSetupTimerInterrupt+0x38>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ac:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <vPortSetupTimerInterrupt+0x3c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	@ (80076dc <vPortSetupTimerInterrupt+0x40>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	4a09      	ldr	r2, [pc, #36]	@ (80076e0 <vPortSetupTimerInterrupt+0x44>)
 80076ba:	3b01      	subs	r3, #1
 80076bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076be:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076c0:	2207      	movs	r2, #7
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	e000e010 	.word	0xe000e010
 80076d4:	e000e018 	.word	0xe000e018
 80076d8:	20000010 	.word	0x20000010
 80076dc:	10624dd3 	.word	0x10624dd3
 80076e0:	e000e014 	.word	0xe000e014

080076e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80076e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076f4 <vPortEnableVFP+0x10>
 80076e8:	6801      	ldr	r1, [r0, #0]
 80076ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80076ee:	6001      	str	r1, [r0, #0]
 80076f0:	4770      	bx	lr
 80076f2:	0000      	.short	0x0000
 80076f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop

080076fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007702:	f3ef 8305 	mrs	r3, IPSR
 8007706:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b0f      	cmp	r3, #15
 800770c:	d915      	bls.n	800773a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800770e:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <vPortValidateInterruptPriority+0x74>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007718:	4b16      	ldr	r3, [pc, #88]	@ (8007774 <vPortValidateInterruptPriority+0x78>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	7afa      	ldrb	r2, [r7, #11]
 800771e:	429a      	cmp	r2, r3
 8007720:	d20b      	bcs.n	800773a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	607b      	str	r3, [r7, #4]
    }
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800773a:	4b0f      	ldr	r3, [pc, #60]	@ (8007778 <vPortValidateInterruptPriority+0x7c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007742:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <vPortValidateInterruptPriority+0x80>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d90b      	bls.n	8007762 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	603b      	str	r3, [r7, #0]
    }
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <vPortValidateInterruptPriority+0x62>
    }
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	e000e3f0 	.word	0xe000e3f0
 8007774:	20000364 	.word	0x20000364
 8007778:	e000ed0c 	.word	0xe000ed0c
 800777c:	20000368 	.word	0x20000368

08007780 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	@ 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800778c:	f7fe fae0 	bl	8005d50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007790:	4b54      	ldr	r3, [pc, #336]	@ (80078e4 <pvPortMalloc+0x164>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007798:	f000 f90c 	bl	80079b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d012      	beq.n	80077c8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80077a2:	2208      	movs	r2, #8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	3308      	adds	r3, #8
 80077ae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	43db      	mvns	r3, r3
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d804      	bhi.n	80077c4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	4413      	add	r3, r2
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e001      	b.n	80077c8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db71      	blt.n	80078b2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d06e      	beq.n	80078b2 <pvPortMalloc+0x132>
 80077d4:	4b44      	ldr	r3, [pc, #272]	@ (80078e8 <pvPortMalloc+0x168>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d869      	bhi.n	80078b2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80077de:	4b43      	ldr	r3, [pc, #268]	@ (80078ec <pvPortMalloc+0x16c>)
 80077e0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80077e2:	4b42      	ldr	r3, [pc, #264]	@ (80078ec <pvPortMalloc+0x16c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077e8:	e004      	b.n	80077f4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d903      	bls.n	8007806 <pvPortMalloc+0x86>
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f1      	bne.n	80077ea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007806:	4b37      	ldr	r3, [pc, #220]	@ (80078e4 <pvPortMalloc+0x164>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780c:	429a      	cmp	r2, r3
 800780e:	d050      	beq.n	80078b2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2208      	movs	r2, #8
 8007816:	4413      	add	r3, r2
 8007818:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	2308      	movs	r3, #8
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	429a      	cmp	r2, r3
 8007830:	d920      	bls.n	8007874 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <pvPortMalloc+0xdc>
        __asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	613b      	str	r3, [r7, #16]
    }
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800786e:	6978      	ldr	r0, [r7, #20]
 8007870:	f000 f8fc 	bl	8007a6c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007874:	4b1c      	ldr	r3, [pc, #112]	@ (80078e8 <pvPortMalloc+0x168>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	4a1a      	ldr	r2, [pc, #104]	@ (80078e8 <pvPortMalloc+0x168>)
 8007880:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007882:	4b19      	ldr	r3, [pc, #100]	@ (80078e8 <pvPortMalloc+0x168>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <pvPortMalloc+0x170>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d203      	bcs.n	8007896 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800788e:	4b16      	ldr	r3, [pc, #88]	@ (80078e8 <pvPortMalloc+0x168>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a17      	ldr	r2, [pc, #92]	@ (80078f0 <pvPortMalloc+0x170>)
 8007894:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80078a8:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <pvPortMalloc+0x174>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a11      	ldr	r2, [pc, #68]	@ (80078f4 <pvPortMalloc+0x174>)
 80078b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80078b2:	f7fe fa5b 	bl	8005d6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <pvPortMalloc+0x158>
        __asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
    }
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <pvPortMalloc+0x154>
    return pvReturn;
 80078d8:	69fb      	ldr	r3, [r7, #28]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3728      	adds	r7, #40	@ 0x28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20012f74 	.word	0x20012f74
 80078e8:	20012f78 	.word	0x20012f78
 80078ec:	20012f6c 	.word	0x20012f6c
 80078f0:	20012f7c 	.word	0x20012f7c
 80078f4:	20012f80 	.word	0x20012f80

080078f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04b      	beq.n	80079a2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800790a:	2308      	movs	r3, #8
 800790c:	425b      	negs	r3, r3
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4413      	add	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	db0b      	blt.n	8007938 <vPortFree+0x40>
        __asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
    }
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <vPortFree+0x60>
        __asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60bb      	str	r3, [r7, #8]
    }
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	0fdb      	lsrs	r3, r3, #31
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01c      	beq.n	80079a2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d118      	bne.n	80079a2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800797c:	f7fe f9e8 	bl	8005d50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <vPortFree+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4413      	add	r3, r2
 800798a:	4a08      	ldr	r2, [pc, #32]	@ (80079ac <vPortFree+0xb4>)
 800798c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f000 f86c 	bl	8007a6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007994:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <vPortFree+0xb8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	4a05      	ldr	r2, [pc, #20]	@ (80079b0 <vPortFree+0xb8>)
 800799c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800799e:	f7fe f9e5 	bl	8005d6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20012f78 	.word	0x20012f78
 80079b0:	20012f84 	.word	0x20012f84

080079b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80079be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80079c0:	4b25      	ldr	r3, [pc, #148]	@ (8007a58 <prvHeapInit+0xa4>)
 80079c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a58 <prvHeapInit+0xa4>)
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ec:	4a1b      	ldr	r2, [pc, #108]	@ (8007a5c <prvHeapInit+0xa8>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80079f2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a5c <prvHeapInit+0xa8>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007a00:	2208      	movs	r2, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a13      	ldr	r2, [pc, #76]	@ (8007a60 <prvHeapInit+0xac>)
 8007a14:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007a16:	4b12      	ldr	r3, [pc, #72]	@ (8007a60 <prvHeapInit+0xac>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007a1e:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <prvHeapInit+0xac>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a34:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <prvHeapInit+0xac>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <prvHeapInit+0xb0>)
 8007a42:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4a07      	ldr	r2, [pc, #28]	@ (8007a68 <prvHeapInit+0xb4>)
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	2000036c 	.word	0x2000036c
 8007a5c:	20012f6c 	.word	0x20012f6c
 8007a60:	20012f74 	.word	0x20012f74
 8007a64:	20012f7c 	.word	0x20012f7c
 8007a68:	20012f78 	.word	0x20012f78

08007a6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a74:	4b28      	ldr	r3, [pc, #160]	@ (8007b18 <prvInsertBlockIntoFreeList+0xac>)
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e002      	b.n	8007a80 <prvInsertBlockIntoFreeList+0x14>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d8f7      	bhi.n	8007a7a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d108      	bne.n	8007aae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d118      	bne.n	8007af4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <prvInsertBlockIntoFreeList+0xb0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d00d      	beq.n	8007aea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e008      	b.n	8007afc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007aea:	4b0c      	ldr	r3, [pc, #48]	@ (8007b1c <prvInsertBlockIntoFreeList+0xb0>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e003      	b.n	8007afc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d002      	beq.n	8007b0a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20012f6c 	.word	0x20012f6c
 8007b1c:	20012f74 	.word	0x20012f74

08007b20 <std>:
 8007b20:	2300      	movs	r3, #0
 8007b22:	b510      	push	{r4, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	e9c0 3300 	strd	r3, r3, [r0]
 8007b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b2e:	6083      	str	r3, [r0, #8]
 8007b30:	8181      	strh	r1, [r0, #12]
 8007b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b34:	81c2      	strh	r2, [r0, #14]
 8007b36:	6183      	str	r3, [r0, #24]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	305c      	adds	r0, #92	@ 0x5c
 8007b3e:	f000 f926 	bl	8007d8e <memset>
 8007b42:	4b0d      	ldr	r3, [pc, #52]	@ (8007b78 <std+0x58>)
 8007b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b46:	4b0d      	ldr	r3, [pc, #52]	@ (8007b7c <std+0x5c>)
 8007b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b80 <std+0x60>)
 8007b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b84 <std+0x64>)
 8007b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b52:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <std+0x68>)
 8007b54:	6224      	str	r4, [r4, #32]
 8007b56:	429c      	cmp	r4, r3
 8007b58:	d006      	beq.n	8007b68 <std+0x48>
 8007b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b5e:	4294      	cmp	r4, r2
 8007b60:	d002      	beq.n	8007b68 <std+0x48>
 8007b62:	33d0      	adds	r3, #208	@ 0xd0
 8007b64:	429c      	cmp	r4, r3
 8007b66:	d105      	bne.n	8007b74 <std+0x54>
 8007b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b70:	f000 b986 	b.w	8007e80 <__retarget_lock_init_recursive>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	bf00      	nop
 8007b78:	08007d09 	.word	0x08007d09
 8007b7c:	08007d2b 	.word	0x08007d2b
 8007b80:	08007d63 	.word	0x08007d63
 8007b84:	08007d87 	.word	0x08007d87
 8007b88:	20012f88 	.word	0x20012f88

08007b8c <stdio_exit_handler>:
 8007b8c:	4a02      	ldr	r2, [pc, #8]	@ (8007b98 <stdio_exit_handler+0xc>)
 8007b8e:	4903      	ldr	r1, [pc, #12]	@ (8007b9c <stdio_exit_handler+0x10>)
 8007b90:	4803      	ldr	r0, [pc, #12]	@ (8007ba0 <stdio_exit_handler+0x14>)
 8007b92:	f000 b869 	b.w	8007c68 <_fwalk_sglue>
 8007b96:	bf00      	nop
 8007b98:	20000028 	.word	0x20000028
 8007b9c:	080089ed 	.word	0x080089ed
 8007ba0:	20000038 	.word	0x20000038

08007ba4 <cleanup_stdio>:
 8007ba4:	6841      	ldr	r1, [r0, #4]
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <cleanup_stdio+0x34>)
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	d001      	beq.n	8007bb4 <cleanup_stdio+0x10>
 8007bb0:	f000 ff1c 	bl	80089ec <_fflush_r>
 8007bb4:	68a1      	ldr	r1, [r4, #8]
 8007bb6:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <cleanup_stdio+0x38>)
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	d002      	beq.n	8007bc2 <cleanup_stdio+0x1e>
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 ff15 	bl	80089ec <_fflush_r>
 8007bc2:	68e1      	ldr	r1, [r4, #12]
 8007bc4:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <cleanup_stdio+0x3c>)
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	d004      	beq.n	8007bd4 <cleanup_stdio+0x30>
 8007bca:	4620      	mov	r0, r4
 8007bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd0:	f000 bf0c 	b.w	80089ec <_fflush_r>
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20012f88 	.word	0x20012f88
 8007bdc:	20012ff0 	.word	0x20012ff0
 8007be0:	20013058 	.word	0x20013058

08007be4 <global_stdio_init.part.0>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c14 <global_stdio_init.part.0+0x30>)
 8007be8:	4c0b      	ldr	r4, [pc, #44]	@ (8007c18 <global_stdio_init.part.0+0x34>)
 8007bea:	4a0c      	ldr	r2, [pc, #48]	@ (8007c1c <global_stdio_init.part.0+0x38>)
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2104      	movs	r1, #4
 8007bf4:	f7ff ff94 	bl	8007b20 <std>
 8007bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	2109      	movs	r1, #9
 8007c00:	f7ff ff8e 	bl	8007b20 <std>
 8007c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c08:	2202      	movs	r2, #2
 8007c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0e:	2112      	movs	r1, #18
 8007c10:	f7ff bf86 	b.w	8007b20 <std>
 8007c14:	200130c0 	.word	0x200130c0
 8007c18:	20012f88 	.word	0x20012f88
 8007c1c:	08007b8d 	.word	0x08007b8d

08007c20 <__sfp_lock_acquire>:
 8007c20:	4801      	ldr	r0, [pc, #4]	@ (8007c28 <__sfp_lock_acquire+0x8>)
 8007c22:	f000 b92e 	b.w	8007e82 <__retarget_lock_acquire_recursive>
 8007c26:	bf00      	nop
 8007c28:	200130c9 	.word	0x200130c9

08007c2c <__sfp_lock_release>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__sfp_lock_release+0x8>)
 8007c2e:	f000 b929 	b.w	8007e84 <__retarget_lock_release_recursive>
 8007c32:	bf00      	nop
 8007c34:	200130c9 	.word	0x200130c9

08007c38 <__sinit>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	f7ff fff0 	bl	8007c20 <__sfp_lock_acquire>
 8007c40:	6a23      	ldr	r3, [r4, #32]
 8007c42:	b11b      	cbz	r3, 8007c4c <__sinit+0x14>
 8007c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c48:	f7ff bff0 	b.w	8007c2c <__sfp_lock_release>
 8007c4c:	4b04      	ldr	r3, [pc, #16]	@ (8007c60 <__sinit+0x28>)
 8007c4e:	6223      	str	r3, [r4, #32]
 8007c50:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <__sinit+0x2c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f5      	bne.n	8007c44 <__sinit+0xc>
 8007c58:	f7ff ffc4 	bl	8007be4 <global_stdio_init.part.0>
 8007c5c:	e7f2      	b.n	8007c44 <__sinit+0xc>
 8007c5e:	bf00      	nop
 8007c60:	08007ba5 	.word	0x08007ba5
 8007c64:	200130c0 	.word	0x200130c0

08007c68 <_fwalk_sglue>:
 8007c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	4688      	mov	r8, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	2600      	movs	r6, #0
 8007c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c78:	f1b9 0901 	subs.w	r9, r9, #1
 8007c7c:	d505      	bpl.n	8007c8a <_fwalk_sglue+0x22>
 8007c7e:	6824      	ldr	r4, [r4, #0]
 8007c80:	2c00      	cmp	r4, #0
 8007c82:	d1f7      	bne.n	8007c74 <_fwalk_sglue+0xc>
 8007c84:	4630      	mov	r0, r6
 8007c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d907      	bls.n	8007ca0 <_fwalk_sglue+0x38>
 8007c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c94:	3301      	adds	r3, #1
 8007c96:	d003      	beq.n	8007ca0 <_fwalk_sglue+0x38>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	47c0      	blx	r8
 8007c9e:	4306      	orrs	r6, r0
 8007ca0:	3568      	adds	r5, #104	@ 0x68
 8007ca2:	e7e9      	b.n	8007c78 <_fwalk_sglue+0x10>

08007ca4 <iprintf>:
 8007ca4:	b40f      	push	{r0, r1, r2, r3}
 8007ca6:	b507      	push	{r0, r1, r2, lr}
 8007ca8:	4906      	ldr	r1, [pc, #24]	@ (8007cc4 <iprintf+0x20>)
 8007caa:	ab04      	add	r3, sp, #16
 8007cac:	6808      	ldr	r0, [r1, #0]
 8007cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb2:	6881      	ldr	r1, [r0, #8]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	f000 fb6f 	bl	8008398 <_vfiprintf_r>
 8007cba:	b003      	add	sp, #12
 8007cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc0:	b004      	add	sp, #16
 8007cc2:	4770      	bx	lr
 8007cc4:	20000034 	.word	0x20000034

08007cc8 <siprintf>:
 8007cc8:	b40e      	push	{r1, r2, r3}
 8007cca:	b500      	push	{lr}
 8007ccc:	b09c      	sub	sp, #112	@ 0x70
 8007cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8007cd0:	9002      	str	r0, [sp, #8]
 8007cd2:	9006      	str	r0, [sp, #24]
 8007cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007cd8:	4809      	ldr	r0, [pc, #36]	@ (8007d00 <siprintf+0x38>)
 8007cda:	9107      	str	r1, [sp, #28]
 8007cdc:	9104      	str	r1, [sp, #16]
 8007cde:	4909      	ldr	r1, [pc, #36]	@ (8007d04 <siprintf+0x3c>)
 8007ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce4:	9105      	str	r1, [sp, #20]
 8007ce6:	6800      	ldr	r0, [r0, #0]
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	a902      	add	r1, sp, #8
 8007cec:	f000 fa2e 	bl	800814c <_svfiprintf_r>
 8007cf0:	9b02      	ldr	r3, [sp, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	b01c      	add	sp, #112	@ 0x70
 8007cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cfc:	b003      	add	sp, #12
 8007cfe:	4770      	bx	lr
 8007d00:	20000034 	.word	0x20000034
 8007d04:	ffff0208 	.word	0xffff0208

08007d08 <__sread>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	f000 f868 	bl	8007de4 <_read_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	bfab      	itete	ge
 8007d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d1c:	181b      	addge	r3, r3, r0
 8007d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d22:	bfac      	ite	ge
 8007d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d26:	81a3      	strhlt	r3, [r4, #12]
 8007d28:	bd10      	pop	{r4, pc}

08007d2a <__swrite>:
 8007d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	461f      	mov	r7, r3
 8007d30:	898b      	ldrh	r3, [r1, #12]
 8007d32:	05db      	lsls	r3, r3, #23
 8007d34:	4605      	mov	r5, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4616      	mov	r6, r2
 8007d3a:	d505      	bpl.n	8007d48 <__swrite+0x1e>
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	2302      	movs	r3, #2
 8007d42:	2200      	movs	r2, #0
 8007d44:	f000 f83c 	bl	8007dc0 <_lseek_r>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	4632      	mov	r2, r6
 8007d56:	463b      	mov	r3, r7
 8007d58:	4628      	mov	r0, r5
 8007d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	f000 b853 	b.w	8007e08 <_write_r>

08007d62 <__sseek>:
 8007d62:	b510      	push	{r4, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6a:	f000 f829 	bl	8007dc0 <_lseek_r>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	bf15      	itete	ne
 8007d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d7e:	81a3      	strheq	r3, [r4, #12]
 8007d80:	bf18      	it	ne
 8007d82:	81a3      	strhne	r3, [r4, #12]
 8007d84:	bd10      	pop	{r4, pc}

08007d86 <__sclose>:
 8007d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8a:	f000 b809 	b.w	8007da0 <_close_r>

08007d8e <memset>:
 8007d8e:	4402      	add	r2, r0
 8007d90:	4603      	mov	r3, r0
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d100      	bne.n	8007d98 <memset+0xa>
 8007d96:	4770      	bx	lr
 8007d98:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9c:	e7f9      	b.n	8007d92 <memset+0x4>
	...

08007da0 <_close_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	@ (8007dbc <_close_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fbdd 	bl	800156a <_close>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_close_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_close_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	200130c4 	.word	0x200130c4

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	@ (8007de0 <_lseek_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fbf2 	bl	80015b8 <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200130c4 	.word	0x200130c4

08007de4 <_read_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	@ (8007e04 <_read_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f9 fb80 	bl	80014f8 <_read>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_read_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_read_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200130c4 	.word	0x200130c4

08007e08 <_write_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	@ (8007e28 <_write_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 fb8b 	bl	8001532 <_write>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_write_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_write_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	200130c4 	.word	0x200130c4

08007e2c <__errno>:
 8007e2c:	4b01      	ldr	r3, [pc, #4]	@ (8007e34 <__errno+0x8>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000034 	.word	0x20000034

08007e38 <__libc_init_array>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e70 <__libc_init_array+0x38>)
 8007e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e74 <__libc_init_array+0x3c>)
 8007e3e:	1b64      	subs	r4, r4, r5
 8007e40:	10a4      	asrs	r4, r4, #2
 8007e42:	2600      	movs	r6, #0
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	d109      	bne.n	8007e5c <__libc_init_array+0x24>
 8007e48:	4d0b      	ldr	r5, [pc, #44]	@ (8007e78 <__libc_init_array+0x40>)
 8007e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e7c <__libc_init_array+0x44>)
 8007e4c:	f000 ff6e 	bl	8008d2c <_init>
 8007e50:	1b64      	subs	r4, r4, r5
 8007e52:	10a4      	asrs	r4, r4, #2
 8007e54:	2600      	movs	r6, #0
 8007e56:	42a6      	cmp	r6, r4
 8007e58:	d105      	bne.n	8007e66 <__libc_init_array+0x2e>
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e60:	4798      	blx	r3
 8007e62:	3601      	adds	r6, #1
 8007e64:	e7ee      	b.n	8007e44 <__libc_init_array+0xc>
 8007e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6a:	4798      	blx	r3
 8007e6c:	3601      	adds	r6, #1
 8007e6e:	e7f2      	b.n	8007e56 <__libc_init_array+0x1e>
 8007e70:	08009174 	.word	0x08009174
 8007e74:	08009174 	.word	0x08009174
 8007e78:	08009174 	.word	0x08009174
 8007e7c:	08009178 	.word	0x08009178

08007e80 <__retarget_lock_init_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <__retarget_lock_acquire_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__retarget_lock_release_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <memcpy>:
 8007e86:	440a      	add	r2, r1
 8007e88:	4291      	cmp	r1, r2
 8007e8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e8e:	d100      	bne.n	8007e92 <memcpy+0xc>
 8007e90:	4770      	bx	lr
 8007e92:	b510      	push	{r4, lr}
 8007e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9c:	4291      	cmp	r1, r2
 8007e9e:	d1f9      	bne.n	8007e94 <memcpy+0xe>
 8007ea0:	bd10      	pop	{r4, pc}
	...

08007ea4 <_free_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d041      	beq.n	8007f30 <_free_r+0x8c>
 8007eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb0:	1f0c      	subs	r4, r1, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfb8      	it	lt
 8007eb6:	18e4      	addlt	r4, r4, r3
 8007eb8:	f000 f8e0 	bl	800807c <__malloc_lock>
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <_free_r+0x90>)
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	b933      	cbnz	r3, 8007ed0 <_free_r+0x2c>
 8007ec2:	6063      	str	r3, [r4, #4]
 8007ec4:	6014      	str	r4, [r2, #0]
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ecc:	f000 b8dc 	b.w	8008088 <__malloc_unlock>
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d908      	bls.n	8007ee6 <_free_r+0x42>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	1821      	adds	r1, r4, r0
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	bf01      	itttt	eq
 8007edc:	6819      	ldreq	r1, [r3, #0]
 8007ede:	685b      	ldreq	r3, [r3, #4]
 8007ee0:	1809      	addeq	r1, r1, r0
 8007ee2:	6021      	streq	r1, [r4, #0]
 8007ee4:	e7ed      	b.n	8007ec2 <_free_r+0x1e>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x4c>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x42>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1850      	adds	r0, r2, r1
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x6c>
 8007ef8:	6820      	ldr	r0, [r4, #0]
 8007efa:	4401      	add	r1, r0
 8007efc:	1850      	adds	r0, r2, r1
 8007efe:	4283      	cmp	r3, r0
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1e0      	bne.n	8007ec6 <_free_r+0x22>
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4408      	add	r0, r1
 8007f0c:	6010      	str	r0, [r2, #0]
 8007f0e:	e7da      	b.n	8007ec6 <_free_r+0x22>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x74>
 8007f12:	230c      	movs	r3, #12
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	e7d6      	b.n	8007ec6 <_free_r+0x22>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	1821      	adds	r1, r4, r0
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1809      	addeq	r1, r1, r0
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7ca      	b.n	8007ec6 <_free_r+0x22>
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	200130d0 	.word	0x200130d0

08007f38 <sbrk_aligned>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007f78 <sbrk_aligned+0x40>)
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	6831      	ldr	r1, [r6, #0]
 8007f40:	4605      	mov	r5, r0
 8007f42:	b911      	cbnz	r1, 8007f4a <sbrk_aligned+0x12>
 8007f44:	f000 fe28 	bl	8008b98 <_sbrk_r>
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 fe23 	bl	8008b98 <_sbrk_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d103      	bne.n	8007f5e <sbrk_aligned+0x26>
 8007f56:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d0f8      	beq.n	8007f5a <sbrk_aligned+0x22>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 fe14 	bl	8008b98 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d1f2      	bne.n	8007f5a <sbrk_aligned+0x22>
 8007f74:	e7ef      	b.n	8007f56 <sbrk_aligned+0x1e>
 8007f76:	bf00      	nop
 8007f78:	200130cc 	.word	0x200130cc

08007f7c <_malloc_r>:
 8007f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4606      	mov	r6, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d904      	bls.n	8007fa2 <_malloc_r+0x26>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	6033      	str	r3, [r6, #0]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008078 <_malloc_r+0xfc>
 8007fa6:	f000 f869 	bl	800807c <__malloc_lock>
 8007faa:	f8d8 3000 	ldr.w	r3, [r8]
 8007fae:	461c      	mov	r4, r3
 8007fb0:	bb44      	cbnz	r4, 8008004 <_malloc_r+0x88>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff ffbf 	bl	8007f38 <sbrk_aligned>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	d158      	bne.n	8008072 <_malloc_r+0xf6>
 8007fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc4:	4627      	mov	r7, r4
 8007fc6:	2f00      	cmp	r7, #0
 8007fc8:	d143      	bne.n	8008052 <_malloc_r+0xd6>
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d04b      	beq.n	8008066 <_malloc_r+0xea>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	eb04 0903 	add.w	r9, r4, r3
 8007fd8:	f000 fdde 	bl	8008b98 <_sbrk_r>
 8007fdc:	4581      	cmp	r9, r0
 8007fde:	d142      	bne.n	8008066 <_malloc_r+0xea>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	1a6d      	subs	r5, r5, r1
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff ffa6 	bl	8007f38 <sbrk_aligned>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d03a      	beq.n	8008066 <_malloc_r+0xea>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	442b      	add	r3, r5
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	bb62      	cbnz	r2, 8008058 <_malloc_r+0xdc>
 8007ffe:	f8c8 7000 	str.w	r7, [r8]
 8008002:	e00f      	b.n	8008024 <_malloc_r+0xa8>
 8008004:	6822      	ldr	r2, [r4, #0]
 8008006:	1b52      	subs	r2, r2, r5
 8008008:	d420      	bmi.n	800804c <_malloc_r+0xd0>
 800800a:	2a0b      	cmp	r2, #11
 800800c:	d917      	bls.n	800803e <_malloc_r+0xc2>
 800800e:	1961      	adds	r1, r4, r5
 8008010:	42a3      	cmp	r3, r4
 8008012:	6025      	str	r5, [r4, #0]
 8008014:	bf18      	it	ne
 8008016:	6059      	strne	r1, [r3, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	bf08      	it	eq
 800801c:	f8c8 1000 	streq.w	r1, [r8]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f82f 	bl	8008088 <__malloc_unlock>
 800802a:	f104 000b 	add.w	r0, r4, #11
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	f020 0007 	bic.w	r0, r0, #7
 8008034:	1ac2      	subs	r2, r0, r3
 8008036:	bf1c      	itt	ne
 8008038:	1a1b      	subne	r3, r3, r0
 800803a:	50a3      	strne	r3, [r4, r2]
 800803c:	e7af      	b.n	8007f9e <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	f8c8 2000 	streq.w	r2, [r8]
 8008048:	605a      	strne	r2, [r3, #4]
 800804a:	e7eb      	b.n	8008024 <_malloc_r+0xa8>
 800804c:	4623      	mov	r3, r4
 800804e:	6864      	ldr	r4, [r4, #4]
 8008050:	e7ae      	b.n	8007fb0 <_malloc_r+0x34>
 8008052:	463c      	mov	r4, r7
 8008054:	687f      	ldr	r7, [r7, #4]
 8008056:	e7b6      	b.n	8007fc6 <_malloc_r+0x4a>
 8008058:	461a      	mov	r2, r3
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	d1fb      	bne.n	8008058 <_malloc_r+0xdc>
 8008060:	2300      	movs	r3, #0
 8008062:	6053      	str	r3, [r2, #4]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa8>
 8008066:	230c      	movs	r3, #12
 8008068:	6033      	str	r3, [r6, #0]
 800806a:	4630      	mov	r0, r6
 800806c:	f000 f80c 	bl	8008088 <__malloc_unlock>
 8008070:	e794      	b.n	8007f9c <_malloc_r+0x20>
 8008072:	6005      	str	r5, [r0, #0]
 8008074:	e7d6      	b.n	8008024 <_malloc_r+0xa8>
 8008076:	bf00      	nop
 8008078:	200130d0 	.word	0x200130d0

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_lock+0x8>)
 800807e:	f7ff bf00 	b.w	8007e82 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	200130c8 	.word	0x200130c8

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	@ (8008090 <__malloc_unlock+0x8>)
 800808a:	f7ff befb 	b.w	8007e84 <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	200130c8 	.word	0x200130c8

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	688e      	ldr	r6, [r1, #8]
 800809a:	461f      	mov	r7, r3
 800809c:	42be      	cmp	r6, r7
 800809e:	680b      	ldr	r3, [r1, #0]
 80080a0:	4682      	mov	sl, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4690      	mov	r8, r2
 80080a6:	d82d      	bhi.n	8008104 <__ssputs_r+0x70>
 80080a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b0:	d026      	beq.n	8008100 <__ssputs_r+0x6c>
 80080b2:	6965      	ldr	r5, [r4, #20]
 80080b4:	6909      	ldr	r1, [r1, #16]
 80080b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ba:	eba3 0901 	sub.w	r9, r3, r1
 80080be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c2:	1c7b      	adds	r3, r7, #1
 80080c4:	444b      	add	r3, r9
 80080c6:	106d      	asrs	r5, r5, #1
 80080c8:	429d      	cmp	r5, r3
 80080ca:	bf38      	it	cc
 80080cc:	461d      	movcc	r5, r3
 80080ce:	0553      	lsls	r3, r2, #21
 80080d0:	d527      	bpl.n	8008122 <__ssputs_r+0x8e>
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7ff ff52 	bl	8007f7c <_malloc_r>
 80080d8:	4606      	mov	r6, r0
 80080da:	b360      	cbz	r0, 8008136 <__ssputs_r+0xa2>
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	464a      	mov	r2, r9
 80080e0:	f7ff fed1 	bl	8007e86 <memcpy>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	6126      	str	r6, [r4, #16]
 80080f2:	6165      	str	r5, [r4, #20]
 80080f4:	444e      	add	r6, r9
 80080f6:	eba5 0509 	sub.w	r5, r5, r9
 80080fa:	6026      	str	r6, [r4, #0]
 80080fc:	60a5      	str	r5, [r4, #8]
 80080fe:	463e      	mov	r6, r7
 8008100:	42be      	cmp	r6, r7
 8008102:	d900      	bls.n	8008106 <__ssputs_r+0x72>
 8008104:	463e      	mov	r6, r7
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	4632      	mov	r2, r6
 800810a:	4641      	mov	r1, r8
 800810c:	f000 fd2a 	bl	8008b64 <memmove>
 8008110:	68a3      	ldr	r3, [r4, #8]
 8008112:	1b9b      	subs	r3, r3, r6
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	4433      	add	r3, r6
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	462a      	mov	r2, r5
 8008124:	f000 fd48 	bl	8008bb8 <_realloc_r>
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e0      	bne.n	80080f0 <__ssputs_r+0x5c>
 800812e:	6921      	ldr	r1, [r4, #16]
 8008130:	4650      	mov	r0, sl
 8008132:	f7ff feb7 	bl	8007ea4 <_free_r>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e7e9      	b.n	800811e <__ssputs_r+0x8a>
	...

0800814c <_svfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4698      	mov	r8, r3
 8008152:	898b      	ldrh	r3, [r1, #12]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	b09d      	sub	sp, #116	@ 0x74
 8008158:	4607      	mov	r7, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4614      	mov	r4, r2
 800815e:	d510      	bpl.n	8008182 <_svfiprintf_r+0x36>
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b973      	cbnz	r3, 8008182 <_svfiprintf_r+0x36>
 8008164:	2140      	movs	r1, #64	@ 0x40
 8008166:	f7ff ff09 	bl	8007f7c <_malloc_r>
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	6128      	str	r0, [r5, #16]
 800816e:	b930      	cbnz	r0, 800817e <_svfiprintf_r+0x32>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	@ 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	2340      	movs	r3, #64	@ 0x40
 8008180:	616b      	str	r3, [r5, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	2320      	movs	r3, #32
 8008188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800818c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008190:	2330      	movs	r3, #48	@ 0x30
 8008192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008330 <_svfiprintf_r+0x1e4>
 8008196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819a:	f04f 0901 	mov.w	r9, #1
 800819e:	4623      	mov	r3, r4
 80081a0:	469a      	mov	sl, r3
 80081a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a6:	b10a      	cbz	r2, 80081ac <_svfiprintf_r+0x60>
 80081a8:	2a25      	cmp	r2, #37	@ 0x25
 80081aa:	d1f9      	bne.n	80081a0 <_svfiprintf_r+0x54>
 80081ac:	ebba 0b04 	subs.w	fp, sl, r4
 80081b0:	d00b      	beq.n	80081ca <_svfiprintf_r+0x7e>
 80081b2:	465b      	mov	r3, fp
 80081b4:	4622      	mov	r2, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff6b 	bl	8008094 <__ssputs_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	f000 80a7 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c6:	445a      	add	r2, fp
 80081c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 809f 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081de:	f10a 0a01 	add.w	sl, sl, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80081ec:	4654      	mov	r4, sl
 80081ee:	2205      	movs	r2, #5
 80081f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f4:	484e      	ldr	r0, [pc, #312]	@ (8008330 <_svfiprintf_r+0x1e4>)
 80081f6:	f7f8 f80b 	bl	8000210 <memchr>
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	b9d8      	cbnz	r0, 8008236 <_svfiprintf_r+0xea>
 80081fe:	06d0      	lsls	r0, r2, #27
 8008200:	bf44      	itt	mi
 8008202:	2320      	movmi	r3, #32
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008208:	0711      	lsls	r1, r2, #28
 800820a:	bf44      	itt	mi
 800820c:	232b      	movmi	r3, #43	@ 0x2b
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b2a      	cmp	r3, #42	@ 0x2a
 8008218:	d015      	beq.n	8008246 <_svfiprintf_r+0xfa>
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	4654      	mov	r4, sl
 800821e:	2000      	movs	r0, #0
 8008220:	f04f 0c0a 	mov.w	ip, #10
 8008224:	4621      	mov	r1, r4
 8008226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822a:	3b30      	subs	r3, #48	@ 0x30
 800822c:	2b09      	cmp	r3, #9
 800822e:	d94b      	bls.n	80082c8 <_svfiprintf_r+0x17c>
 8008230:	b1b0      	cbz	r0, 8008260 <_svfiprintf_r+0x114>
 8008232:	9207      	str	r2, [sp, #28]
 8008234:	e014      	b.n	8008260 <_svfiprintf_r+0x114>
 8008236:	eba0 0308 	sub.w	r3, r0, r8
 800823a:	fa09 f303 	lsl.w	r3, r9, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	46a2      	mov	sl, r4
 8008244:	e7d2      	b.n	80081ec <_svfiprintf_r+0xa0>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbb      	ittet	lt
 8008252:	425b      	neglt	r3, r3
 8008254:	f042 0202 	orrlt.w	r2, r2, #2
 8008258:	9307      	strge	r3, [sp, #28]
 800825a:	9307      	strlt	r3, [sp, #28]
 800825c:	bfb8      	it	lt
 800825e:	9204      	strlt	r2, [sp, #16]
 8008260:	7823      	ldrb	r3, [r4, #0]
 8008262:	2b2e      	cmp	r3, #46	@ 0x2e
 8008264:	d10a      	bne.n	800827c <_svfiprintf_r+0x130>
 8008266:	7863      	ldrb	r3, [r4, #1]
 8008268:	2b2a      	cmp	r3, #42	@ 0x2a
 800826a:	d132      	bne.n	80082d2 <_svfiprintf_r+0x186>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	9203      	str	r2, [sp, #12]
 8008274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008278:	3402      	adds	r4, #2
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008340 <_svfiprintf_r+0x1f4>
 8008280:	7821      	ldrb	r1, [r4, #0]
 8008282:	2203      	movs	r2, #3
 8008284:	4650      	mov	r0, sl
 8008286:	f7f7 ffc3 	bl	8000210 <memchr>
 800828a:	b138      	cbz	r0, 800829c <_svfiprintf_r+0x150>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	eba0 000a 	sub.w	r0, r0, sl
 8008292:	2240      	movs	r2, #64	@ 0x40
 8008294:	4082      	lsls	r2, r0
 8008296:	4313      	orrs	r3, r2
 8008298:	3401      	adds	r4, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	4824      	ldr	r0, [pc, #144]	@ (8008334 <_svfiprintf_r+0x1e8>)
 80082a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082a6:	2206      	movs	r2, #6
 80082a8:	f7f7 ffb2 	bl	8000210 <memchr>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d036      	beq.n	800831e <_svfiprintf_r+0x1d2>
 80082b0:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <_svfiprintf_r+0x1ec>)
 80082b2:	bb1b      	cbnz	r3, 80082fc <_svfiprintf_r+0x1b0>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	3307      	adds	r3, #7
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	3308      	adds	r3, #8
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	4433      	add	r3, r6
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	e76a      	b.n	800819e <_svfiprintf_r+0x52>
 80082c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082cc:	460c      	mov	r4, r1
 80082ce:	2001      	movs	r0, #1
 80082d0:	e7a8      	b.n	8008224 <_svfiprintf_r+0xd8>
 80082d2:	2300      	movs	r3, #0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	4619      	mov	r1, r3
 80082da:	f04f 0c0a 	mov.w	ip, #10
 80082de:	4620      	mov	r0, r4
 80082e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e4:	3a30      	subs	r2, #48	@ 0x30
 80082e6:	2a09      	cmp	r2, #9
 80082e8:	d903      	bls.n	80082f2 <_svfiprintf_r+0x1a6>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0c6      	beq.n	800827c <_svfiprintf_r+0x130>
 80082ee:	9105      	str	r1, [sp, #20]
 80082f0:	e7c4      	b.n	800827c <_svfiprintf_r+0x130>
 80082f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f6:	4604      	mov	r4, r0
 80082f8:	2301      	movs	r3, #1
 80082fa:	e7f0      	b.n	80082de <_svfiprintf_r+0x192>
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4b0e      	ldr	r3, [pc, #56]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4638      	mov	r0, r7
 8008308:	f3af 8000 	nop.w
 800830c:	1c42      	adds	r2, r0, #1
 800830e:	4606      	mov	r6, r0
 8008310:	d1d6      	bne.n	80082c0 <_svfiprintf_r+0x174>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	065b      	lsls	r3, r3, #25
 8008316:	f53f af2d 	bmi.w	8008174 <_svfiprintf_r+0x28>
 800831a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800831c:	e72c      	b.n	8008178 <_svfiprintf_r+0x2c>
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	4638      	mov	r0, r7
 800832a:	f000 f9bb 	bl	80086a4 <_printf_i>
 800832e:	e7ed      	b.n	800830c <_svfiprintf_r+0x1c0>
 8008330:	08009138 	.word	0x08009138
 8008334:	08009142 	.word	0x08009142
 8008338:	00000000 	.word	0x00000000
 800833c:	08008095 	.word	0x08008095
 8008340:	0800913e 	.word	0x0800913e

08008344 <__sfputc_r>:
 8008344:	6893      	ldr	r3, [r2, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	b410      	push	{r4}
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	da08      	bge.n	8008362 <__sfputc_r+0x1e>
 8008350:	6994      	ldr	r4, [r2, #24]
 8008352:	42a3      	cmp	r3, r4
 8008354:	db01      	blt.n	800835a <__sfputc_r+0x16>
 8008356:	290a      	cmp	r1, #10
 8008358:	d103      	bne.n	8008362 <__sfputc_r+0x1e>
 800835a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835e:	f000 bb6d 	b.w	8008a3c <__swbuf_r>
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	1c58      	adds	r0, r3, #1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	7019      	strb	r1, [r3, #0]
 800836a:	4608      	mov	r0, r1
 800836c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008370:	4770      	bx	lr

08008372 <__sfputs_r>:
 8008372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	4614      	mov	r4, r2
 800837a:	18d5      	adds	r5, r2, r3
 800837c:	42ac      	cmp	r4, r5
 800837e:	d101      	bne.n	8008384 <__sfputs_r+0x12>
 8008380:	2000      	movs	r0, #0
 8008382:	e007      	b.n	8008394 <__sfputs_r+0x22>
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	463a      	mov	r2, r7
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffda 	bl	8008344 <__sfputc_r>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d1f3      	bne.n	800837c <__sfputs_r+0xa>
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008398 <_vfiprintf_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	460d      	mov	r5, r1
 800839e:	b09d      	sub	sp, #116	@ 0x74
 80083a0:	4614      	mov	r4, r2
 80083a2:	4698      	mov	r8, r3
 80083a4:	4606      	mov	r6, r0
 80083a6:	b118      	cbz	r0, 80083b0 <_vfiprintf_r+0x18>
 80083a8:	6a03      	ldr	r3, [r0, #32]
 80083aa:	b90b      	cbnz	r3, 80083b0 <_vfiprintf_r+0x18>
 80083ac:	f7ff fc44 	bl	8007c38 <__sinit>
 80083b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b2:	07d9      	lsls	r1, r3, #31
 80083b4:	d405      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	059a      	lsls	r2, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083be:	f7ff fd60 	bl	8007e82 <__retarget_lock_acquire_recursive>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	071b      	lsls	r3, r3, #28
 80083c6:	d501      	bpl.n	80083cc <_vfiprintf_r+0x34>
 80083c8:	692b      	ldr	r3, [r5, #16]
 80083ca:	b99b      	cbnz	r3, 80083f4 <_vfiprintf_r+0x5c>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 fb72 	bl	8008ab8 <__swsetup_r>
 80083d4:	b170      	cbz	r0, 80083f4 <_vfiprintf_r+0x5c>
 80083d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d8:	07dc      	lsls	r4, r3, #31
 80083da:	d504      	bpl.n	80083e6 <_vfiprintf_r+0x4e>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b01d      	add	sp, #116	@ 0x74
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	0598      	lsls	r0, r3, #22
 80083ea:	d4f7      	bmi.n	80083dc <_vfiprintf_r+0x44>
 80083ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ee:	f7ff fd49 	bl	8007e84 <__retarget_lock_release_recursive>
 80083f2:	e7f3      	b.n	80083dc <_vfiprintf_r+0x44>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f8:	2320      	movs	r3, #32
 80083fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008402:	2330      	movs	r3, #48	@ 0x30
 8008404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085b4 <_vfiprintf_r+0x21c>
 8008408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800840c:	f04f 0901 	mov.w	r9, #1
 8008410:	4623      	mov	r3, r4
 8008412:	469a      	mov	sl, r3
 8008414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008418:	b10a      	cbz	r2, 800841e <_vfiprintf_r+0x86>
 800841a:	2a25      	cmp	r2, #37	@ 0x25
 800841c:	d1f9      	bne.n	8008412 <_vfiprintf_r+0x7a>
 800841e:	ebba 0b04 	subs.w	fp, sl, r4
 8008422:	d00b      	beq.n	800843c <_vfiprintf_r+0xa4>
 8008424:	465b      	mov	r3, fp
 8008426:	4622      	mov	r2, r4
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa1 	bl	8008372 <__sfputs_r>
 8008430:	3001      	adds	r0, #1
 8008432:	f000 80a7 	beq.w	8008584 <_vfiprintf_r+0x1ec>
 8008436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008438:	445a      	add	r2, fp
 800843a:	9209      	str	r2, [sp, #36]	@ 0x24
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 809f 	beq.w	8008584 <_vfiprintf_r+0x1ec>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800845c:	931a      	str	r3, [sp, #104]	@ 0x68
 800845e:	4654      	mov	r4, sl
 8008460:	2205      	movs	r2, #5
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4853      	ldr	r0, [pc, #332]	@ (80085b4 <_vfiprintf_r+0x21c>)
 8008468:	f7f7 fed2 	bl	8000210 <memchr>
 800846c:	9a04      	ldr	r2, [sp, #16]
 800846e:	b9d8      	cbnz	r0, 80084a8 <_vfiprintf_r+0x110>
 8008470:	06d1      	lsls	r1, r2, #27
 8008472:	bf44      	itt	mi
 8008474:	2320      	movmi	r3, #32
 8008476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847a:	0713      	lsls	r3, r2, #28
 800847c:	bf44      	itt	mi
 800847e:	232b      	movmi	r3, #43	@ 0x2b
 8008480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008484:	f89a 3000 	ldrb.w	r3, [sl]
 8008488:	2b2a      	cmp	r3, #42	@ 0x2a
 800848a:	d015      	beq.n	80084b8 <_vfiprintf_r+0x120>
 800848c:	9a07      	ldr	r2, [sp, #28]
 800848e:	4654      	mov	r4, sl
 8008490:	2000      	movs	r0, #0
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4621      	mov	r1, r4
 8008498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849c:	3b30      	subs	r3, #48	@ 0x30
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d94b      	bls.n	800853a <_vfiprintf_r+0x1a2>
 80084a2:	b1b0      	cbz	r0, 80084d2 <_vfiprintf_r+0x13a>
 80084a4:	9207      	str	r2, [sp, #28]
 80084a6:	e014      	b.n	80084d2 <_vfiprintf_r+0x13a>
 80084a8:	eba0 0308 	sub.w	r3, r0, r8
 80084ac:	fa09 f303 	lsl.w	r3, r9, r3
 80084b0:	4313      	orrs	r3, r2
 80084b2:	9304      	str	r3, [sp, #16]
 80084b4:	46a2      	mov	sl, r4
 80084b6:	e7d2      	b.n	800845e <_vfiprintf_r+0xc6>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d19      	adds	r1, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9103      	str	r1, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfbb      	ittet	lt
 80084c4:	425b      	neglt	r3, r3
 80084c6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ca:	9307      	strge	r3, [sp, #28]
 80084cc:	9307      	strlt	r3, [sp, #28]
 80084ce:	bfb8      	it	lt
 80084d0:	9204      	strlt	r2, [sp, #16]
 80084d2:	7823      	ldrb	r3, [r4, #0]
 80084d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d6:	d10a      	bne.n	80084ee <_vfiprintf_r+0x156>
 80084d8:	7863      	ldrb	r3, [r4, #1]
 80084da:	2b2a      	cmp	r3, #42	@ 0x2a
 80084dc:	d132      	bne.n	8008544 <_vfiprintf_r+0x1ac>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9203      	str	r2, [sp, #12]
 80084e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ea:	3402      	adds	r4, #2
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085c4 <_vfiprintf_r+0x22c>
 80084f2:	7821      	ldrb	r1, [r4, #0]
 80084f4:	2203      	movs	r2, #3
 80084f6:	4650      	mov	r0, sl
 80084f8:	f7f7 fe8a 	bl	8000210 <memchr>
 80084fc:	b138      	cbz	r0, 800850e <_vfiprintf_r+0x176>
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	eba0 000a 	sub.w	r0, r0, sl
 8008504:	2240      	movs	r2, #64	@ 0x40
 8008506:	4082      	lsls	r2, r0
 8008508:	4313      	orrs	r3, r2
 800850a:	3401      	adds	r4, #1
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008512:	4829      	ldr	r0, [pc, #164]	@ (80085b8 <_vfiprintf_r+0x220>)
 8008514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008518:	2206      	movs	r2, #6
 800851a:	f7f7 fe79 	bl	8000210 <memchr>
 800851e:	2800      	cmp	r0, #0
 8008520:	d03f      	beq.n	80085a2 <_vfiprintf_r+0x20a>
 8008522:	4b26      	ldr	r3, [pc, #152]	@ (80085bc <_vfiprintf_r+0x224>)
 8008524:	bb1b      	cbnz	r3, 800856e <_vfiprintf_r+0x1d6>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	3307      	adds	r3, #7
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	3308      	adds	r3, #8
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008534:	443b      	add	r3, r7
 8008536:	9309      	str	r3, [sp, #36]	@ 0x24
 8008538:	e76a      	b.n	8008410 <_vfiprintf_r+0x78>
 800853a:	fb0c 3202 	mla	r2, ip, r2, r3
 800853e:	460c      	mov	r4, r1
 8008540:	2001      	movs	r0, #1
 8008542:	e7a8      	b.n	8008496 <_vfiprintf_r+0xfe>
 8008544:	2300      	movs	r3, #0
 8008546:	3401      	adds	r4, #1
 8008548:	9305      	str	r3, [sp, #20]
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 0c0a 	mov.w	ip, #10
 8008550:	4620      	mov	r0, r4
 8008552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008556:	3a30      	subs	r2, #48	@ 0x30
 8008558:	2a09      	cmp	r2, #9
 800855a:	d903      	bls.n	8008564 <_vfiprintf_r+0x1cc>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0c6      	beq.n	80084ee <_vfiprintf_r+0x156>
 8008560:	9105      	str	r1, [sp, #20]
 8008562:	e7c4      	b.n	80084ee <_vfiprintf_r+0x156>
 8008564:	fb0c 2101 	mla	r1, ip, r1, r2
 8008568:	4604      	mov	r4, r0
 800856a:	2301      	movs	r3, #1
 800856c:	e7f0      	b.n	8008550 <_vfiprintf_r+0x1b8>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <_vfiprintf_r+0x228>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4630      	mov	r0, r6
 800857a:	f3af 8000 	nop.w
 800857e:	4607      	mov	r7, r0
 8008580:	1c78      	adds	r0, r7, #1
 8008582:	d1d6      	bne.n	8008532 <_vfiprintf_r+0x19a>
 8008584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008586:	07d9      	lsls	r1, r3, #31
 8008588:	d405      	bmi.n	8008596 <_vfiprintf_r+0x1fe>
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	059a      	lsls	r2, r3, #22
 800858e:	d402      	bmi.n	8008596 <_vfiprintf_r+0x1fe>
 8008590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008592:	f7ff fc77 	bl	8007e84 <__retarget_lock_release_recursive>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	065b      	lsls	r3, r3, #25
 800859a:	f53f af1f 	bmi.w	80083dc <_vfiprintf_r+0x44>
 800859e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085a0:	e71e      	b.n	80083e0 <_vfiprintf_r+0x48>
 80085a2:	ab03      	add	r3, sp, #12
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	462a      	mov	r2, r5
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <_vfiprintf_r+0x228>)
 80085aa:	a904      	add	r1, sp, #16
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 f879 	bl	80086a4 <_printf_i>
 80085b2:	e7e4      	b.n	800857e <_vfiprintf_r+0x1e6>
 80085b4:	08009138 	.word	0x08009138
 80085b8:	08009142 	.word	0x08009142
 80085bc:	00000000 	.word	0x00000000
 80085c0:	08008373 	.word	0x08008373
 80085c4:	0800913e 	.word	0x0800913e

080085c8 <_printf_common>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	4616      	mov	r6, r2
 80085ce:	4698      	mov	r8, r3
 80085d0:	688a      	ldr	r2, [r1, #8]
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085e4:	4607      	mov	r7, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b10a      	cbz	r2, 80085ee <_printf_common+0x26>
 80085ea:	3301      	adds	r3, #1
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	0699      	lsls	r1, r3, #26
 80085f2:	bf42      	ittt	mi
 80085f4:	6833      	ldrmi	r3, [r6, #0]
 80085f6:	3302      	addmi	r3, #2
 80085f8:	6033      	strmi	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	f015 0506 	ands.w	r5, r5, #6
 8008600:	d106      	bne.n	8008610 <_printf_common+0x48>
 8008602:	f104 0a19 	add.w	sl, r4, #25
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ab      	cmp	r3, r5
 800860e:	dc26      	bgt.n	800865e <_printf_common+0x96>
 8008610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	3b00      	subs	r3, #0
 8008618:	bf18      	it	ne
 800861a:	2301      	movne	r3, #1
 800861c:	0692      	lsls	r2, r2, #26
 800861e:	d42b      	bmi.n	8008678 <_printf_common+0xb0>
 8008620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008624:	4641      	mov	r1, r8
 8008626:	4638      	mov	r0, r7
 8008628:	47c8      	blx	r9
 800862a:	3001      	adds	r0, #1
 800862c:	d01e      	beq.n	800866c <_printf_common+0xa4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	f003 0306 	and.w	r3, r3, #6
 8008636:	2b04      	cmp	r3, #4
 8008638:	bf02      	ittt	eq
 800863a:	68e5      	ldreq	r5, [r4, #12]
 800863c:	6833      	ldreq	r3, [r6, #0]
 800863e:	1aed      	subeq	r5, r5, r3
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	bf0c      	ite	eq
 8008644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008648:	2500      	movne	r5, #0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfc4      	itt	gt
 800864e:	1a9b      	subgt	r3, r3, r2
 8008650:	18ed      	addgt	r5, r5, r3
 8008652:	2600      	movs	r6, #0
 8008654:	341a      	adds	r4, #26
 8008656:	42b5      	cmp	r5, r6
 8008658:	d11a      	bne.n	8008690 <_printf_common+0xc8>
 800865a:	2000      	movs	r0, #0
 800865c:	e008      	b.n	8008670 <_printf_common+0xa8>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4641      	mov	r1, r8
 8008664:	4638      	mov	r0, r7
 8008666:	47c8      	blx	r9
 8008668:	3001      	adds	r0, #1
 800866a:	d103      	bne.n	8008674 <_printf_common+0xac>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	3501      	adds	r5, #1
 8008676:	e7c6      	b.n	8008606 <_printf_common+0x3e>
 8008678:	18e1      	adds	r1, r4, r3
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	2030      	movs	r0, #48	@ 0x30
 800867e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008682:	4422      	add	r2, r4
 8008684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800868c:	3302      	adds	r3, #2
 800868e:	e7c7      	b.n	8008620 <_printf_common+0x58>
 8008690:	2301      	movs	r3, #1
 8008692:	4622      	mov	r2, r4
 8008694:	4641      	mov	r1, r8
 8008696:	4638      	mov	r0, r7
 8008698:	47c8      	blx	r9
 800869a:	3001      	adds	r0, #1
 800869c:	d0e6      	beq.n	800866c <_printf_common+0xa4>
 800869e:	3601      	adds	r6, #1
 80086a0:	e7d9      	b.n	8008656 <_printf_common+0x8e>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	7e0f      	ldrb	r7, [r1, #24]
 80086aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086ac:	2f78      	cmp	r7, #120	@ 0x78
 80086ae:	4691      	mov	r9, r2
 80086b0:	4680      	mov	r8, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	469a      	mov	sl, r3
 80086b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ba:	d807      	bhi.n	80086cc <_printf_i+0x28>
 80086bc:	2f62      	cmp	r7, #98	@ 0x62
 80086be:	d80a      	bhi.n	80086d6 <_printf_i+0x32>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f000 80d2 	beq.w	800886a <_printf_i+0x1c6>
 80086c6:	2f58      	cmp	r7, #88	@ 0x58
 80086c8:	f000 80b9 	beq.w	800883e <_printf_i+0x19a>
 80086cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086d4:	e03a      	b.n	800874c <_printf_i+0xa8>
 80086d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086da:	2b15      	cmp	r3, #21
 80086dc:	d8f6      	bhi.n	80086cc <_printf_i+0x28>
 80086de:	a101      	add	r1, pc, #4	@ (adr r1, 80086e4 <_printf_i+0x40>)
 80086e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080086cd 	.word	0x080086cd
 80086f0:	080086cd 	.word	0x080086cd
 80086f4:	080086cd 	.word	0x080086cd
 80086f8:	080086cd 	.word	0x080086cd
 80086fc:	08008751 	.word	0x08008751
 8008700:	080086cd 	.word	0x080086cd
 8008704:	080086cd 	.word	0x080086cd
 8008708:	080086cd 	.word	0x080086cd
 800870c:	080086cd 	.word	0x080086cd
 8008710:	08008851 	.word	0x08008851
 8008714:	0800877b 	.word	0x0800877b
 8008718:	0800880b 	.word	0x0800880b
 800871c:	080086cd 	.word	0x080086cd
 8008720:	080086cd 	.word	0x080086cd
 8008724:	08008873 	.word	0x08008873
 8008728:	080086cd 	.word	0x080086cd
 800872c:	0800877b 	.word	0x0800877b
 8008730:	080086cd 	.word	0x080086cd
 8008734:	080086cd 	.word	0x080086cd
 8008738:	08008813 	.word	0x08008813
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6032      	str	r2, [r6, #0]
 8008744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800874c:	2301      	movs	r3, #1
 800874e:	e09d      	b.n	800888c <_printf_i+0x1e8>
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6031      	str	r1, [r6, #0]
 8008758:	0606      	lsls	r6, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xbc>
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	e003      	b.n	8008768 <_printf_i+0xc4>
 8008760:	0645      	lsls	r5, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xb8>
 8008764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008768:	2d00      	cmp	r5, #0
 800876a:	da03      	bge.n	8008774 <_printf_i+0xd0>
 800876c:	232d      	movs	r3, #45	@ 0x2d
 800876e:	426d      	negs	r5, r5
 8008770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008774:	4859      	ldr	r0, [pc, #356]	@ (80088dc <_printf_i+0x238>)
 8008776:	230a      	movs	r3, #10
 8008778:	e011      	b.n	800879e <_printf_i+0xfa>
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	0608      	lsls	r0, r1, #24
 8008780:	f853 5b04 	ldr.w	r5, [r3], #4
 8008784:	d402      	bmi.n	800878c <_printf_i+0xe8>
 8008786:	0649      	lsls	r1, r1, #25
 8008788:	bf48      	it	mi
 800878a:	b2ad      	uxthmi	r5, r5
 800878c:	2f6f      	cmp	r7, #111	@ 0x6f
 800878e:	4853      	ldr	r0, [pc, #332]	@ (80088dc <_printf_i+0x238>)
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	bf14      	ite	ne
 8008794:	230a      	movne	r3, #10
 8008796:	2308      	moveq	r3, #8
 8008798:	2100      	movs	r1, #0
 800879a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800879e:	6866      	ldr	r6, [r4, #4]
 80087a0:	60a6      	str	r6, [r4, #8]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	bfa2      	ittt	ge
 80087a6:	6821      	ldrge	r1, [r4, #0]
 80087a8:	f021 0104 	bicge.w	r1, r1, #4
 80087ac:	6021      	strge	r1, [r4, #0]
 80087ae:	b90d      	cbnz	r5, 80087b4 <_printf_i+0x110>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d04b      	beq.n	800884c <_printf_i+0x1a8>
 80087b4:	4616      	mov	r6, r2
 80087b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ba:	fb03 5711 	mls	r7, r3, r1, r5
 80087be:	5dc7      	ldrb	r7, [r0, r7]
 80087c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087c4:	462f      	mov	r7, r5
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	460d      	mov	r5, r1
 80087ca:	d9f4      	bls.n	80087b6 <_printf_i+0x112>
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d10b      	bne.n	80087e8 <_printf_i+0x144>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07df      	lsls	r7, r3, #31
 80087d4:	d508      	bpl.n	80087e8 <_printf_i+0x144>
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6861      	ldr	r1, [r4, #4]
 80087da:	4299      	cmp	r1, r3
 80087dc:	bfde      	ittt	le
 80087de:	2330      	movle	r3, #48	@ 0x30
 80087e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087e8:	1b92      	subs	r2, r2, r6
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	f8cd a000 	str.w	sl, [sp]
 80087f0:	464b      	mov	r3, r9
 80087f2:	aa03      	add	r2, sp, #12
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fee6 	bl	80085c8 <_printf_common>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d14a      	bne.n	8008896 <_printf_i+0x1f2>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b004      	add	sp, #16
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	4833      	ldr	r0, [pc, #204]	@ (80088e0 <_printf_i+0x23c>)
 8008814:	2778      	movs	r7, #120	@ 0x78
 8008816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6831      	ldr	r1, [r6, #0]
 800881e:	061f      	lsls	r7, r3, #24
 8008820:	f851 5b04 	ldr.w	r5, [r1], #4
 8008824:	d402      	bmi.n	800882c <_printf_i+0x188>
 8008826:	065f      	lsls	r7, r3, #25
 8008828:	bf48      	it	mi
 800882a:	b2ad      	uxthmi	r5, r5
 800882c:	6031      	str	r1, [r6, #0]
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	bf44      	itt	mi
 8008832:	f043 0320 	orrmi.w	r3, r3, #32
 8008836:	6023      	strmi	r3, [r4, #0]
 8008838:	b11d      	cbz	r5, 8008842 <_printf_i+0x19e>
 800883a:	2310      	movs	r3, #16
 800883c:	e7ac      	b.n	8008798 <_printf_i+0xf4>
 800883e:	4827      	ldr	r0, [pc, #156]	@ (80088dc <_printf_i+0x238>)
 8008840:	e7e9      	b.n	8008816 <_printf_i+0x172>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f023 0320 	bic.w	r3, r3, #32
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	e7f6      	b.n	800883a <_printf_i+0x196>
 800884c:	4616      	mov	r6, r2
 800884e:	e7bd      	b.n	80087cc <_printf_i+0x128>
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6030      	str	r0, [r6, #0]
 800885a:	062e      	lsls	r6, r5, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1c0>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1c6>
 8008864:	0668      	lsls	r0, r5, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1bc>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4616      	mov	r6, r2
 8008870:	e7bc      	b.n	80087ec <_printf_i+0x148>
 8008872:	6833      	ldr	r3, [r6, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	6032      	str	r2, [r6, #0]
 8008878:	681e      	ldr	r6, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4630      	mov	r0, r6
 8008880:	f7f7 fcc6 	bl	8000210 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1e6>
 8008886:	1b80      	subs	r0, r0, r6
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008894:	e7aa      	b.n	80087ec <_printf_i+0x148>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	4632      	mov	r2, r6
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ad      	beq.n	8008800 <_printf_i+0x15c>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x22e>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a6      	b.n	8008804 <_printf_i+0x160>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09d      	beq.n	8008800 <_printf_i+0x15c>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x212>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x206>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x222>
 80088da:	bf00      	nop
 80088dc:	08009149 	.word	0x08009149
 80088e0:	0800915a 	.word	0x0800915a

080088e4 <__sflush_r>:
 80088e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	0716      	lsls	r6, r2, #28
 80088ee:	4605      	mov	r5, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	d454      	bmi.n	800899e <__sflush_r+0xba>
 80088f4:	684b      	ldr	r3, [r1, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc02      	bgt.n	8008900 <__sflush_r+0x1c>
 80088fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd48      	ble.n	8008992 <__sflush_r+0xae>
 8008900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008902:	2e00      	cmp	r6, #0
 8008904:	d045      	beq.n	8008992 <__sflush_r+0xae>
 8008906:	2300      	movs	r3, #0
 8008908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800890c:	682f      	ldr	r7, [r5, #0]
 800890e:	6a21      	ldr	r1, [r4, #32]
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	d030      	beq.n	8008976 <__sflush_r+0x92>
 8008914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	0759      	lsls	r1, r3, #29
 800891a:	d505      	bpl.n	8008928 <__sflush_r+0x44>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008922:	b10b      	cbz	r3, 8008928 <__sflush_r+0x44>
 8008924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008926:	1ad2      	subs	r2, r2, r3
 8008928:	2300      	movs	r3, #0
 800892a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800892c:	6a21      	ldr	r1, [r4, #32]
 800892e:	4628      	mov	r0, r5
 8008930:	47b0      	blx	r6
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	d106      	bne.n	8008946 <__sflush_r+0x62>
 8008938:	6829      	ldr	r1, [r5, #0]
 800893a:	291d      	cmp	r1, #29
 800893c:	d82b      	bhi.n	8008996 <__sflush_r+0xb2>
 800893e:	4a2a      	ldr	r2, [pc, #168]	@ (80089e8 <__sflush_r+0x104>)
 8008940:	410a      	asrs	r2, r1
 8008942:	07d6      	lsls	r6, r2, #31
 8008944:	d427      	bmi.n	8008996 <__sflush_r+0xb2>
 8008946:	2200      	movs	r2, #0
 8008948:	6062      	str	r2, [r4, #4]
 800894a:	04d9      	lsls	r1, r3, #19
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	d504      	bpl.n	800895c <__sflush_r+0x78>
 8008952:	1c42      	adds	r2, r0, #1
 8008954:	d101      	bne.n	800895a <__sflush_r+0x76>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b903      	cbnz	r3, 800895c <__sflush_r+0x78>
 800895a:	6560      	str	r0, [r4, #84]	@ 0x54
 800895c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895e:	602f      	str	r7, [r5, #0]
 8008960:	b1b9      	cbz	r1, 8008992 <__sflush_r+0xae>
 8008962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008966:	4299      	cmp	r1, r3
 8008968:	d002      	beq.n	8008970 <__sflush_r+0x8c>
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fa9a 	bl	8007ea4 <_free_r>
 8008970:	2300      	movs	r3, #0
 8008972:	6363      	str	r3, [r4, #52]	@ 0x34
 8008974:	e00d      	b.n	8008992 <__sflush_r+0xae>
 8008976:	2301      	movs	r3, #1
 8008978:	4628      	mov	r0, r5
 800897a:	47b0      	blx	r6
 800897c:	4602      	mov	r2, r0
 800897e:	1c50      	adds	r0, r2, #1
 8008980:	d1c9      	bne.n	8008916 <__sflush_r+0x32>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0c6      	beq.n	8008916 <__sflush_r+0x32>
 8008988:	2b1d      	cmp	r3, #29
 800898a:	d001      	beq.n	8008990 <__sflush_r+0xac>
 800898c:	2b16      	cmp	r3, #22
 800898e:	d11e      	bne.n	80089ce <__sflush_r+0xea>
 8008990:	602f      	str	r7, [r5, #0]
 8008992:	2000      	movs	r0, #0
 8008994:	e022      	b.n	80089dc <__sflush_r+0xf8>
 8008996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899a:	b21b      	sxth	r3, r3
 800899c:	e01b      	b.n	80089d6 <__sflush_r+0xf2>
 800899e:	690f      	ldr	r7, [r1, #16]
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	d0f6      	beq.n	8008992 <__sflush_r+0xae>
 80089a4:	0793      	lsls	r3, r2, #30
 80089a6:	680e      	ldr	r6, [r1, #0]
 80089a8:	bf08      	it	eq
 80089aa:	694b      	ldreq	r3, [r1, #20]
 80089ac:	600f      	str	r7, [r1, #0]
 80089ae:	bf18      	it	ne
 80089b0:	2300      	movne	r3, #0
 80089b2:	eba6 0807 	sub.w	r8, r6, r7
 80089b6:	608b      	str	r3, [r1, #8]
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	dde9      	ble.n	8008992 <__sflush_r+0xae>
 80089be:	6a21      	ldr	r1, [r4, #32]
 80089c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089c2:	4643      	mov	r3, r8
 80089c4:	463a      	mov	r2, r7
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b0      	blx	r6
 80089ca:	2800      	cmp	r0, #0
 80089cc:	dc08      	bgt.n	80089e0 <__sflush_r+0xfc>
 80089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	4407      	add	r7, r0
 80089e2:	eba8 0800 	sub.w	r8, r8, r0
 80089e6:	e7e7      	b.n	80089b8 <__sflush_r+0xd4>
 80089e8:	dfbffffe 	.word	0xdfbffffe

080089ec <_fflush_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b913      	cbnz	r3, 80089fc <_fflush_r+0x10>
 80089f6:	2500      	movs	r5, #0
 80089f8:	4628      	mov	r0, r5
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	b118      	cbz	r0, 8008a06 <_fflush_r+0x1a>
 80089fe:	6a03      	ldr	r3, [r0, #32]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_fflush_r+0x1a>
 8008a02:	f7ff f919 	bl	8007c38 <__sinit>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0f3      	beq.n	80089f6 <_fflush_r+0xa>
 8008a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a10:	07d0      	lsls	r0, r2, #31
 8008a12:	d404      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a14:	0599      	lsls	r1, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_fflush_r+0x32>
 8008a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1a:	f7ff fa32 	bl	8007e82 <__retarget_lock_acquire_recursive>
 8008a1e:	4628      	mov	r0, r5
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7ff ff5f 	bl	80088e4 <__sflush_r>
 8008a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a28:	07da      	lsls	r2, r3, #31
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	d4e4      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	059b      	lsls	r3, r3, #22
 8008a32:	d4e1      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a36:	f7ff fa25 	bl	8007e84 <__retarget_lock_release_recursive>
 8008a3a:	e7dd      	b.n	80089f8 <_fflush_r+0xc>

08008a3c <__swbuf_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	460e      	mov	r6, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	4605      	mov	r5, r0
 8008a44:	b118      	cbz	r0, 8008a4e <__swbuf_r+0x12>
 8008a46:	6a03      	ldr	r3, [r0, #32]
 8008a48:	b90b      	cbnz	r3, 8008a4e <__swbuf_r+0x12>
 8008a4a:	f7ff f8f5 	bl	8007c38 <__sinit>
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	071a      	lsls	r2, r3, #28
 8008a56:	d501      	bpl.n	8008a5c <__swbuf_r+0x20>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	b943      	cbnz	r3, 8008a6e <__swbuf_r+0x32>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f82a 	bl	8008ab8 <__swsetup_r>
 8008a64:	b118      	cbz	r0, 8008a6e <__swbuf_r+0x32>
 8008a66:	f04f 37ff 	mov.w	r7, #4294967295
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	1a98      	subs	r0, r3, r2
 8008a74:	6963      	ldr	r3, [r4, #20]
 8008a76:	b2f6      	uxtb	r6, r6
 8008a78:	4283      	cmp	r3, r0
 8008a7a:	4637      	mov	r7, r6
 8008a7c:	dc05      	bgt.n	8008a8a <__swbuf_r+0x4e>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff ffb3 	bl	80089ec <_fflush_r>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1ed      	bne.n	8008a66 <__swbuf_r+0x2a>
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	701e      	strb	r6, [r3, #0]
 8008a98:	6962      	ldr	r2, [r4, #20]
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d004      	beq.n	8008aaa <__swbuf_r+0x6e>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	07db      	lsls	r3, r3, #31
 8008aa4:	d5e1      	bpl.n	8008a6a <__swbuf_r+0x2e>
 8008aa6:	2e0a      	cmp	r6, #10
 8008aa8:	d1df      	bne.n	8008a6a <__swbuf_r+0x2e>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff ff9d 	bl	80089ec <_fflush_r>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0d9      	beq.n	8008a6a <__swbuf_r+0x2e>
 8008ab6:	e7d6      	b.n	8008a66 <__swbuf_r+0x2a>

08008ab8 <__swsetup_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4b29      	ldr	r3, [pc, #164]	@ (8008b60 <__swsetup_r+0xa8>)
 8008abc:	4605      	mov	r5, r0
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b118      	cbz	r0, 8008acc <__swsetup_r+0x14>
 8008ac4:	6a03      	ldr	r3, [r0, #32]
 8008ac6:	b90b      	cbnz	r3, 8008acc <__swsetup_r+0x14>
 8008ac8:	f7ff f8b6 	bl	8007c38 <__sinit>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	0719      	lsls	r1, r3, #28
 8008ad2:	d422      	bmi.n	8008b1a <__swsetup_r+0x62>
 8008ad4:	06da      	lsls	r2, r3, #27
 8008ad6:	d407      	bmi.n	8008ae8 <__swsetup_r+0x30>
 8008ad8:	2209      	movs	r2, #9
 8008ada:	602a      	str	r2, [r5, #0]
 8008adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae6:	e033      	b.n	8008b50 <__swsetup_r+0x98>
 8008ae8:	0758      	lsls	r0, r3, #29
 8008aea:	d512      	bpl.n	8008b12 <__swsetup_r+0x5a>
 8008aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aee:	b141      	cbz	r1, 8008b02 <__swsetup_r+0x4a>
 8008af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d002      	beq.n	8008afe <__swsetup_r+0x46>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff f9d3 	bl	8007ea4 <_free_r>
 8008afe:	2300      	movs	r3, #0
 8008b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f043 0308 	orr.w	r3, r3, #8
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	b94b      	cbnz	r3, 8008b32 <__swsetup_r+0x7a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b28:	d003      	beq.n	8008b32 <__swsetup_r+0x7a>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f897 	bl	8008c60 <__smakebuf_r>
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	f013 0201 	ands.w	r2, r3, #1
 8008b3a:	d00a      	beq.n	8008b52 <__swsetup_r+0x9a>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	60a2      	str	r2, [r4, #8]
 8008b40:	6962      	ldr	r2, [r4, #20]
 8008b42:	4252      	negs	r2, r2
 8008b44:	61a2      	str	r2, [r4, #24]
 8008b46:	6922      	ldr	r2, [r4, #16]
 8008b48:	b942      	cbnz	r2, 8008b5c <__swsetup_r+0xa4>
 8008b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b4e:	d1c5      	bne.n	8008adc <__swsetup_r+0x24>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	0799      	lsls	r1, r3, #30
 8008b54:	bf58      	it	pl
 8008b56:	6962      	ldrpl	r2, [r4, #20]
 8008b58:	60a2      	str	r2, [r4, #8]
 8008b5a:	e7f4      	b.n	8008b46 <__swsetup_r+0x8e>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7f7      	b.n	8008b50 <__swsetup_r+0x98>
 8008b60:	20000034 	.word	0x20000034

08008b64 <memmove>:
 8008b64:	4288      	cmp	r0, r1
 8008b66:	b510      	push	{r4, lr}
 8008b68:	eb01 0402 	add.w	r4, r1, r2
 8008b6c:	d902      	bls.n	8008b74 <memmove+0x10>
 8008b6e:	4284      	cmp	r4, r0
 8008b70:	4623      	mov	r3, r4
 8008b72:	d807      	bhi.n	8008b84 <memmove+0x20>
 8008b74:	1e43      	subs	r3, r0, #1
 8008b76:	42a1      	cmp	r1, r4
 8008b78:	d008      	beq.n	8008b8c <memmove+0x28>
 8008b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b82:	e7f8      	b.n	8008b76 <memmove+0x12>
 8008b84:	4402      	add	r2, r0
 8008b86:	4601      	mov	r1, r0
 8008b88:	428a      	cmp	r2, r1
 8008b8a:	d100      	bne.n	8008b8e <memmove+0x2a>
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b96:	e7f7      	b.n	8008b88 <memmove+0x24>

08008b98 <_sbrk_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	@ (8008bb4 <_sbrk_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f8 fd16 	bl	80015d4 <_sbrk>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_sbrk_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_sbrk_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	200130c4 	.word	0x200130c4

08008bb8 <_realloc_r>:
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	4615      	mov	r5, r2
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	b921      	cbnz	r1, 8008bce <_realloc_r+0x16>
 8008bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc8:	4611      	mov	r1, r2
 8008bca:	f7ff b9d7 	b.w	8007f7c <_malloc_r>
 8008bce:	b92a      	cbnz	r2, 8008bdc <_realloc_r+0x24>
 8008bd0:	f7ff f968 	bl	8007ea4 <_free_r>
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bdc:	f000 f89e 	bl	8008d1c <_malloc_usable_size_r>
 8008be0:	4285      	cmp	r5, r0
 8008be2:	4606      	mov	r6, r0
 8008be4:	d802      	bhi.n	8008bec <_realloc_r+0x34>
 8008be6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bea:	d8f4      	bhi.n	8008bd6 <_realloc_r+0x1e>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f7ff f9c4 	bl	8007f7c <_malloc_r>
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d0ec      	beq.n	8008bd4 <_realloc_r+0x1c>
 8008bfa:	42b5      	cmp	r5, r6
 8008bfc:	462a      	mov	r2, r5
 8008bfe:	4621      	mov	r1, r4
 8008c00:	bf28      	it	cs
 8008c02:	4632      	movcs	r2, r6
 8008c04:	f7ff f93f 	bl	8007e86 <memcpy>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7ff f94a 	bl	8007ea4 <_free_r>
 8008c10:	463c      	mov	r4, r7
 8008c12:	e7e0      	b.n	8008bd6 <_realloc_r+0x1e>

08008c14 <__swhatbuf_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	460c      	mov	r4, r1
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	b096      	sub	sp, #88	@ 0x58
 8008c20:	4615      	mov	r5, r2
 8008c22:	461e      	mov	r6, r3
 8008c24:	da0d      	bge.n	8008c42 <__swhatbuf_r+0x2e>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c2c:	f04f 0100 	mov.w	r1, #0
 8008c30:	bf14      	ite	ne
 8008c32:	2340      	movne	r3, #64	@ 0x40
 8008c34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c38:	2000      	movs	r0, #0
 8008c3a:	6031      	str	r1, [r6, #0]
 8008c3c:	602b      	str	r3, [r5, #0]
 8008c3e:	b016      	add	sp, #88	@ 0x58
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	466a      	mov	r2, sp
 8008c44:	f000 f848 	bl	8008cd8 <_fstat_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	dbec      	blt.n	8008c26 <__swhatbuf_r+0x12>
 8008c4c:	9901      	ldr	r1, [sp, #4]
 8008c4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c56:	4259      	negs	r1, r3
 8008c58:	4159      	adcs	r1, r3
 8008c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c5e:	e7eb      	b.n	8008c38 <__swhatbuf_r+0x24>

08008c60 <__smakebuf_r>:
 8008c60:	898b      	ldrh	r3, [r1, #12]
 8008c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c64:	079d      	lsls	r5, r3, #30
 8008c66:	4606      	mov	r6, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	d507      	bpl.n	8008c7c <__smakebuf_r+0x1c>
 8008c6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2301      	movs	r3, #1
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	b003      	add	sp, #12
 8008c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7c:	ab01      	add	r3, sp, #4
 8008c7e:	466a      	mov	r2, sp
 8008c80:	f7ff ffc8 	bl	8008c14 <__swhatbuf_r>
 8008c84:	9f00      	ldr	r7, [sp, #0]
 8008c86:	4605      	mov	r5, r0
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7ff f976 	bl	8007f7c <_malloc_r>
 8008c90:	b948      	cbnz	r0, 8008ca6 <__smakebuf_r+0x46>
 8008c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c96:	059a      	lsls	r2, r3, #22
 8008c98:	d4ee      	bmi.n	8008c78 <__smakebuf_r+0x18>
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	f043 0302 	orr.w	r3, r3, #2
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	e7e2      	b.n	8008c6c <__smakebuf_r+0xc>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	6020      	str	r0, [r4, #0]
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cb6:	b15b      	cbz	r3, 8008cd0 <__smakebuf_r+0x70>
 8008cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f000 f81d 	bl	8008cfc <_isatty_r>
 8008cc2:	b128      	cbz	r0, 8008cd0 <__smakebuf_r+0x70>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	431d      	orrs	r5, r3
 8008cd4:	81a5      	strh	r5, [r4, #12]
 8008cd6:	e7cf      	b.n	8008c78 <__smakebuf_r+0x18>

08008cd8 <_fstat_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d07      	ldr	r5, [pc, #28]	@ (8008cf8 <_fstat_r+0x20>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7f8 fc4c 	bl	8001582 <_fstat>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_fstat_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_fstat_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200130c4 	.word	0x200130c4

08008cfc <_isatty_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	@ (8008d18 <_isatty_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7f8 fc4b 	bl	80015a2 <_isatty>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_isatty_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_isatty_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	200130c4 	.word	0x200130c4

08008d1c <_malloc_usable_size_r>:
 8008d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d20:	1f18      	subs	r0, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bfbc      	itt	lt
 8008d26:	580b      	ldrlt	r3, [r1, r0]
 8008d28:	18c0      	addlt	r0, r0, r3
 8008d2a:	4770      	bx	lr

08008d2c <_init>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr

08008d38 <_fini>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	bf00      	nop
 8008d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3e:	bc08      	pop	{r3}
 8008d40:	469e      	mov	lr, r3
 8008d42:	4770      	bx	lr
